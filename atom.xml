<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Good good study, day day up]]></title>
  <link href="http://aleung.github.io/blog/atom.xml" rel="self"/>
  <link href="http://aleung.github.io/blog/"/>
  <updated>2015-10-06T01:05:58+08:00</updated>
  <id>http://aleung.github.io/blog/</id>
  <author>
    <name><![CDATA[Leo Liang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kossel Mini 3D打印机制作记录 (1)]]></title>
    <link href="http://aleung.github.io/blog/2015/10/05/kossel-mini-3d-printer-making/"/>
    <updated>2015-10-05T21:16:22+08:00</updated>
    <id>http://aleung.github.io/blog/2015/10/05/kossel-mini-3d-printer-making</id>
    <content type="html"><![CDATA[<h2 id="section">缘起及设计</h2>

<p>一切都起源于 flyisland 转的这篇文章：<a href="http://post.smzdm.com/p/332896">从零开始，给自己设计一台3D打印机</a>，大量的图文细节和制作过程描述吸引了我，门槛似乎也不怎么高，于是产生了做一台的想法。看了 <a href="http://www.thingiverse.com/">Thingivers</a> 这个网站，更是发现了新的世界，打消了“有3d打印机不知道用来做什么”的疑虑，对喜欢搞制作的人来说3d打印机太有用了。</p>

<p>于是开始网上查找资料，了解相关信息。一开始的想法是做像那篇文章中的 XYZ 结构，大一点的打印体积（开始都是贪心的），看了 <a href="http://forums.reprap.org/">RepRap 论坛</a>发现关于 delta 结构的讨论很热门，了解多一些后知道 delta 结构打印机的打印速度快，成本比较低，制作也不复杂，于是锁定了 <a href="http://reprap.org/wiki/Kossel">Kossel</a> 机型，心想先做一个出来练练手，小一点也够用了，以后真玩起来有需要再做大机器。</p>

<p>接下来在寻找国内的资源的时候知道了 <a href="http://www.thingiverse.com/thing:388683">K800</a> 打印机，这是国内爱好者 maximscy 在 Kossel Mini 基础上改进的以降低成本为目标的机型，原本 K800 的意思就是人民币800元可以做出来的 Kossel，但实际上基本上也还是要上千元。</p>

<p>K800 应该说对于推动3D打印机在国内普及有不少功劳，淘宝上有不少卖套件的。K800 降低了成本，但是毕竟还是以牺牲一点精度为代价，因此卖家也有不少“升级套餐”，例如将打印制作的元件换成铝合金元件，滑轮换回直线导轨等等。我对成本还不算很敏感，想做出来的机器质素好一点，但看下来发现套件的价格水分又太大了，而且配置不一定跟自己要求一致，于是决定自己采购元件。</p>

<p>最后定下来的方案基本上是原版的 Kossel Mini 方案，高度增加50mm，框架连接件用铝合金的以增加牢固程度和精度，挤出机用铝合金的套件。斜杆的制作精度要求比较高，也直接买做好的算了。</p>

<p>制作相关的资料信息，例如 BOM，记录在GitHub的 <a href="https://github.com/aleung/KosselPrinter">KosselPrinter</a> 项目里。</p>

<h2 id="section-1">进展</h2>

<h3 id="section-2">国庆节前</h3>

<p>计划用国庆节7天假期来制作，所有材料应该要在节前采购完毕。开始没有考虑到淘宝店家在国庆节会放假，到27号了BOM还没有完全做好，订单还没下。淘宝上采购的难度比预计要困难得多，要比较不同店家的产品，而且搜索了才知道有些元件有好多选择，要弄清楚它们的区别，相互的配套，一个变了可能设计就要改变，配套的东西也不同了。在马云家奋战一个晚上直到凌晨3点，第二天又继续买买买，终于把订单全下完，总金额1400元出头。</p>

<p>元件在29、30日陆续送到，其中挤出机发现配件不齐，找卖家补发。想着剩下的东西在1日都能够全部收齐了吧？</p>

<h3 id="section-3">10-1</h3>

<p>安装框架，发现买的铝合金连接件是按照国标铝型材设计的，竖杆孔里有几条棱，而我用的是欧标铝型材，配合使用T型螺母，因为棱的存在无法压紧，只好尝试用锉刀去锉掉那条棱。另外，我买的 M3*8 螺丝显得小和短了，有点勉强，出去转了一圈，没有找到卖铝型材用螺母的地方，都放假了。</p>

<p><img src="http://aleung.github.io/blog/attachments/2015/10/1.jpg" /></p>

<p>铝合金连接件有一件漏打一个孔，跟店家联系，他晚上直接开车给我送一个好的过来，超好人。跟他说起欧标型材的问题，他说可以送给我一些国标 M4 方螺母，也可以塞进欧标型材的槽里的，就不需要锉掉那条棱了。</p>

<h3 id="section-4">10-2</h3>

<p>把直线导轨装上，发现只有一根导轨的滑块能够在重力下自己下滑，另外两根摩擦力都好大，而且是不均匀，在某些地方特别卡，需要用一点力才能推过去。网上问人，说这是不正常的，要么是质量特别差，要么是旧零件翻新。只好退货了，然后就不知道应该买什么导轨，国产的似乎不可靠，台湾上银的又太贵，而且据说淘宝假货很多。</p>

<p><img src="http://aleung.github.io/blog/attachments/2015/10/2.jpg" /></p>

<p>快递国庆节都休息了，节前买的东西到了配送点就是没人送上门，停工待料。开始看软件、参数调整和建模方面的资料，发现入坑了，而且似乎是深不见底。</p>

<p>试用 <a href="http://www.openscad.org/">OpenSCAD</a>，通过写代码的方式来建3D模型，很容易上手，做基于几何体的模型很简便（自由曲面用什么工具都不简单吧？）。</p>

<h3 id="section-5">10-3</h3>

<p>收到M4螺丝螺母，把原来用M3螺丝螺母已经装好的框架拆掉。发现步进电机、同步轮和连接件的安装位置不太吻合，看来又要动用钢锉。要等导轨和滑车到了后确定具体位置才好动手。于是所有东西又回到一堆零件的状态。</p>

<p>将计划从国庆假期完成更新为10月底前完成。</p>

<h3 id="section-6">10-5</h3>

<p>快递终于上班了，所有淘宝买的东西都送齐了。但是直线导轨退货后还没有重新购买，没有这个关键零件还是什么都做不了。</p>

<p>今天没有干什么东西，只是将送丝机和挤出头装配了起来。</p>

<p><img src="http://aleung.github.io/blog/attachments/2015/10/3.jpg" /> <img src="http://aleung.github.io/blog/attachments/2015/10/4.jpg" /></p>

<p><em>(To be contined…)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自由软件质量不如软件企业自己开发的可靠？]]></title>
    <link href="http://aleung.github.io/blog/2015/09/20/quality-of-free-software/"/>
    <updated>2015-09-20T12:31:29+08:00</updated>
    <id>http://aleung.github.io/blog/2015/09/20/quality-of-free-software</id>
    <content type="html"><![CDATA[<p>在软件企业中开发产品/项目，做技术选型时经常会听到的一个说法是：选择开源自由软件，会不会质量不够有保障？还是我们自己做好一些。</p>

<p>自由软件遵循的是完全的市场经济，面对的是残酷的竞争。如果项目做得不好，满足不了需求，就会无人问津而最终被废弃掉，使用者才不心痛已经有多少人力物力已经投入到这个项目中。项目设计太差，代码太烂，同样也吸引不了贡献者，导致原有贡献者的离开或者另起炉灶。对比的看，软件企业中开发的软件项目就如受着国家保护的国企，虽然也面临外部竞争，但在内部怎么也还是自家孩子，再烂也很难让大家承认它的失败，要放弃更加是艰难的决定，往往意味影响好些人的仕途。因此，你会看到很多企业开发的软件项目很烂，因为它们本来应该死掉的，但被强制维持着生命。</p>

<p>从软件开发者的平均水平这个角度来看，自由软件项目也优于企业开发的软件项目。当然，这里谈的自由软件项目是指有一组稳定贡献者有明确蓝图的，这样才能与企业项目相比较，个人练手的项目不算在内。试想一下，在一个软件企业里面，水平足矣为自由软件提交代码的开发者占了多少比例？但是那些尚不能为自由软件项目提交代码的开发者，在企业里面可是天天写代码的，甚至大部分代码是出自他们之手。</p>

<p>泛泛的说，在某个领域，如果可选的自由软件有不少，那么排名前列的项目，质量基本上不需要太过担心。</p>

<p>上面是我对自由软件质量担忧的看法，但这当然不代表就可以随意选择使用自由软件，技术选型中需要评估的东西还有很多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[持续学习]]></title>
    <link href="http://aleung.github.io/blog/2015/09/20/continuous-learning/"/>
    <updated>2015-09-20T12:14:00+08:00</updated>
    <id>http://aleung.github.io/blog/2015/09/20/continuous-learning</id>
    <content type="html"><![CDATA[<p>上次<a href="http://aleung.github.io/blog/blog/2015/08/29/html-presentation-framework/">提到</a>用 HTML 做的 presentation，是在公司里做的关于持续学习的一个分享。</p>

<p><em>注意：看绿色导航箭头，是可以向下翻页的。有些背景图片可能需要翻墙才能看到，否则会变成空白。</em></p>

<iframe src="//slides.com/aleung/goodgoodstudy/embed?style=light" width="800" height="600" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML presentation framework]]></title>
    <link href="http://aleung.github.io/blog/2015/08/29/html-presentation-framework/"/>
    <updated>2015-08-29T03:23:55+08:00</updated>
    <id>http://aleung.github.io/blog/2015/08/29/html-presentation-framework</id>
    <content type="html"><![CDATA[<p>最近要做一个分享，需要做个有趣一些的 slides。工作上的 slides 都是用 PowerPoints 来做的，但 ppt 放网上分享不方便，而且也不 cool，因此琢磨着弄个什么来玩玩。开始打算想用 markdown 来写，一方面是习惯了，另外也够简便。几年前就曾试过用 markdown 写一个简单的 <a href="http://aleung.github.io/presentation/markdown/slides.html">slides</a>。</p>

<p>上网搜索一圈，发现这种打着 “HTML presentation framework” 名号的工具还真多，近些年来 HTML5、CSS、JavaScript 的广泛应用，这些基于 HTML 的演示可以做得很炫，让人耳目一新，例如这个 <a href="http://vizzuality.github.io/rollingstonesmap/">50 Years of the Rolling Stones</a> 和 <a href="http://lightning.fm/massofplanets/#/">Mass of Planets</a> (要允许网页使用摄像头)。</p>

<p>比较了一下，感觉 <a href="https://github.com/hakimel/reveal.js">reveal.js</a> 不错，也很受欢迎。后来又发现另外一个后起之秀 <a href="https://github.com/markdalgleish/bespoke.js">bespoke.js</a>，影响力不够 reveal.js 大，但它的插件式设计更胜一筹。对了，这些工具基本上都是用 JavaScript/Node.js 等一套工具链的，前端相关的技术 js 独霸天下了。</p>

<p>先试了一下 bespoke.js。看到 reveal.js 能使用 <a href="https://www.leapmotion.com/">Leap Motion</a> Controller 来手势控制，演示起来会比较出彩，正好同事有一个 leap motion，可以借来玩，但是却找不到 bespoke.js 支持 leap motion 的插件。查了一下，原来 leap 有 JavaScript API，在浏览器里面能够通过事件监听获得双手各个手指的位置和手势动作的信息，API 暴露出来的已经是处理后的双手模型了，应用用起来相当方便。于是就简单的 port 了一个 <a href="https://www.npmjs.com/package/bespoke-leapmotion">bespoke-leapmotion</a> 插件出来。但说实在的，leap motion 这东西还是中看不中用，用手势切换页面根本就不如手指头按个按键快捷和省力，手势的辨别也不够精准（这方面应用在数据处理上是可以下些功夫的）。</p>

<p><img src="http://aleung.github.io/blog/attachments/2015/8/leapmotion.jpg" /></p>

<p>Bespoke.js 的 markdown 支持似乎还有些坑，总有这样那样的问题。而且在 markdown 在版面布局方面局限性也很大，做出来的 slides 显得单调了些，效果不够理想，于是又在看看直接用 HTML 来写会怎样。HTML 是足够灵活了，但是要设置排版布局又累死了，我对 HTML+CSS 也不是那么熟悉，有点想放弃用回 PowerPoint 了。 </p>

<p>正好这个时候，发现了 <a href="http://slides.com">slides.com</a> 这个网站，它背后用的就是 reveal.js，但它的在线编辑器真心好用啊，鼠标拖放元素，功能简洁但又足够做出漂亮的效果了。就是它了！</p>

<p><img src="http://aleung.github.io/blog/attachments/2015/8/slides-editor.png" /></p>

<p>但是，我还是念念不忘 leap motion —— 演示的时候可以带来新奇的效果啊。Slides.com 自然不会有这偏门的功能，但它很良心的提供了 export to reveal.js，在上面编辑好的 slides 可以放回本地的 reveal.js 里面播放，免费用户都可以享受。嗯，看起来一切都好，可是，怎么在 slides.com 里面写好的 speaker notes 导出后都丢失了呢？查看导出文件的内容，似乎是 slides.com 内部处理 speaker notes 用的机制跟 reveal.js 不一样，存放的格式也不同了。还好，只要数据都在，还是有办法的，写个<a href="https://github.com/aleung/slides-export">程序</a>来转换就行了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[永恒的终结]]></title>
    <link href="http://aleung.github.io/blog/2015/06/09/the-end-of-eternity/"/>
    <updated>2015-06-09T23:50:40+08:00</updated>
    <id>http://aleung.github.io/blog/2015/06/09/the-end-of-eternity</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://aleung.github.io/blog/attachments/2015/6/TheEndOfEternity.jpg" /></p>

<p>花了几天空余时间，看完了阿西莫夫的科幻小说<a href="http://book.douban.com/subject/25829693/">《永恒的终结》</a>。</p>

<p>在我的印象中，阿西莫夫的科幻小说是以逻辑严谨为特征的。他的好多作品都是设定在未来背景的侦探推理小说。小学时代读他的“机器人系列”，还以为机器人三大定律真的是生产机器人都需要固化的逻辑。总之，感觉他的书基本上都是烧脑之作，读起来要细细思考琢磨的。</p>

<p><em>（提示: 有关键情节透露）</em></p>

<p>在《永恒的终结》的设定中，时间的流逝是绝对的、单向的。即使在永恒时空，依然存在着时间的流逝（所谓的物理时间）。时间作用在永恒之人身上，他们依然会变老。严格的说，在整部小说的设定中，只存在一个时空，也就是一般时空。并不存在着一个独立的永恒时空，永恒时空其实是锚定在一般时空之上的一个个节点（在某些世纪上存在一个分区），永恒时空的时间跟一般时空的时间是同步的流逝的。</p>

<p>《永恒的终结》并没有引入其他科幻小说常用的平行时空的概念，或者说即使有平行时空，他们（永恒之人）也只能在其中一个时空上活动。永恒之人的特别之处在于他们拥有着在时间轴上穿行的能力，他们能够到达时空上的任何一个时刻（也包括空间位置，但这在故事中不是重点）。将时空中的活动想象为一盘按正常速度播放录像带，永恒之人就是能够倒退或者快进到录像带的某个时刻进行播放。无论如何，在这（唯一的）时空之中，因果率是起作用的，也就是说，这盘录像带的剧情是合乎因果情理来发展的，前一时刻的事件产生的后果会反映到后面的时刻中。永恒之人在时空之中穿梭观察，以一个旁观者的身份，他可以看到一件事情发生的前因后果。</p>

<p>但是，永恒之人要亲临一般时空的某个时刻进行观察，免不了会对该时刻发生的事件带来影响，因为这不像我们看录像带，超脱于录像的时空之外，前面说了时空其实始终只有一个，永恒之人进入某个时刻，也就是成为录像带场景中的一部分了。他在这个时刻的任何行动，都会在后续的时刻带来后果，也就是干扰了现实，带来了现实的变革。变革有多大，视乎影响的大小，如果恰好改变了因果链的一个关键节点，就会对后续的社会发展带来很大的影响，也就是永恒之人所做的现实变革。</p>

<p>虽然永恒之人可以随时进入某个时刻，做某些事情去改变现实，但他们并不能预先观察到引发的后果。因为这个一般时空是严格遵从因果律的，时空技师可以先去2481世纪看看是什么样子的，然后去2456世纪去实施现实变革计划，但是他看到的2481世纪只会是没有变革的，他没办法预先看到变革后的2481世纪，因为他还没有改变2456世纪发生的事件，无因就无果。当时空技师在2456世纪干预了某些事件，带来了连锁反应的后果，再去看2481世纪，这时他看到的就跟之前看到的2481世纪不一样了，之前的2481世纪已经不存在——只存在在他的记忆里——现实已经被改写。这就是为什么技师爱上了482世纪的一个女人，但当现实变革后，他即使再回到482世纪也无法找回他的爱人——也许她不存在了，也许在新的现实里她从来就没有爱过他。小说冲击了读者的一个观念：在具体的某一个时刻，发生过的事情永远不会改变。在这里，时间只是一个一维坐标系，事件并不是固化在上面的，就像可以将一件物品从空间一个位置上挪走，同样可以在时间上改变某个时刻发生的事件。</p>

<p>因为永恒之人并无法预先观测到现实变革的后果，他们只能依靠先进的计算机阵列和经验丰富的计算师去预测某个方案能够带来怎样的变化。不知道他们是怎样为世界的运转建模的，还有超凡的计算能力去预估一个扰动在逐渐发散的因果链上带来的后果。不过，跟蝴蝶效应之类的理论不同，在小说中设定为现实的演进是存在惯性的，一个扰动并不会带来无限发散的后续影响，而是经过一段时间后回归到跟没有扰动发生过一样的演进状态。所以，一个现实变革可能会影响几个世纪乃至上百个世纪的演进，但不会带来无穷的影响。</p>

<p>如果这种影响只是单向的：永恒之人可以进入某个时刻，给这个时间带来影响，那么一切还是很完美，因果链始终是开放无穷伸展的，不会成为闭环。但是小说其实还是要回到时空旅行的经典因果悖论：循环因果中去。</p>

<p>其实时间的因果悖论在永恒时空之中也存在：一个永恒之人是不是能够返回到前几天，去改变全时理事会的一次会议讨论？但小说将永恒时空设定为非连续的时空（至少一个世纪才有一个分区），绕开了这个问题，因为小说要指向一个更加大的悖论。</p>

<p><em>（注意：以下关键剧透）</em></p>

<p>小说将永恒时空的建立，或者说时空旅行的技术的产生，设定为是永恒之人将未来（27世纪）才发现的数学原理带回24世纪而创造的。这样，因果链条就形成了闭环了，前事之因带来后事之果，而后事却又是前事之因（这里的前、后指的是时间轴上的坐标）。那么，一旦“后事”没有发生，“前事”又何来呢？答案还是那个：现实将被抹去，一切都没有发生过。这与现实变革其实是一样的，永恒之人实施现实变革是对某个时刻实施干预，影响它的后果而将当前现实更替为另外一个现实；而永恒时空的建立本身就是一个来自未来的干预的结果，因此永恒之人需要去实施这个干预，以保证因果链的闭合，使得当前现实得以保存。一旦这个预期的干预没有发生，从那个时刻起的现实就毁灭了，变成一个新的现实——没有发生过来自未来的干预的现实。</p>

<p>但是我始终没有想明白的是，假若时间旅行是可行的，这种循环因果链在逻辑上可能存在吗？它是怎样形成的？可以不存在一个第一推动者？</p>

<p>小说最终的三个章节的转折还是让我意料不及，用的道理是很平白的：生于忧患，死于安乐，整个人类也是如此。拥有了时空穿行能力的人类会不断的通过现实变革，将人类的发展历史局限在一个安稳的状态。但是缺失了外太空探险精神的人类就在与外星文明的竞争中落败了。</p>

<p>在我的个人阅读体验里，读到最后几页感觉是前面做了如此华丽的铺垫，图穷匕见的却是一个建立银河帝国的俗套的梦想，颇有失望。</p>

<p>阿西莫夫将毁灭永恒时空的动机解释为男女之间的爱情，也许爱情是世界上最重要的东西，唯有它才能产生改变整个时空的动力。但阿西莫夫毕竟还是写逻辑推理更擅长，写起男女感情来完全读不出味道。</p>

<hr />

<p>豆瓣书评：http://book.douban.com/review/7495652/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll 与 Swagger UI 集成]]></title>
    <link href="http://aleung.github.io/blog/2015/04/03/jekyll-swagger-ui/"/>
    <updated>2015-04-03T00:00:00+08:00</updated>
    <id>http://aleung.github.io/blog/2015/04/03/jekyll-swagger-ui</id>
    <content type="html"><![CDATA[<p><a href="http://swagger.io/">Swagger</a> 是被广泛使用的用于 REST API 描述和文档化的框架。它制定了一个用于描述 REST API 的规范，提供了一组工具用于编辑 API 描述文件、生成测试客户端、生成文档等等。<a href="https://github.com/swagger-api/swagger-ui">Swagger UI</a> 是其中的用于生成文档的工具。</p>

<p><a href="http://jekyllrb.com/">Jekyll</a> 是深受程序员喜爱的静态网站生成工具，通常用来做 blog 站点，我们的工作团队也<a href="http://aleung.github.io/blog/blog/2015/01/26/jekyll/">用它来做内部的技术文档库</a>。</p>

<p>在 Jekyll 里描述我们产品的 REST API，编辑排版是比较繁琐的事情，不同的 API 描述也没有统一的风格，因此考虑到引入 Swagger 来规范化 API 定义。</p>

<p>为此，写了一个简单的 <a href="https://github.com/aleung/jekyll-swagger-ui">Jekyll 插件</a>，只要像下面例子那样在 markdown 中简单的插入 <code>swagger</code> tag，指定 API 描述文件，相应的 API 文档就会由 Swagger UI 生成并嵌入在页面中。</p>

<pre><code>{% swagger /api/my-api.json %}
</code></pre>

<p>安装使用方法请参看 <a href="https://github.com/aleung/jekyll-swagger-ui">README</a>。另外，Swagger UI 没有考虑到在一个页面中显示多组 API，会有些显示问题，已经提交 pull request，下个版本有望修复，暂时可以先下载我的修改版本，详见 README。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[几条基础排版规则，让文档显得专业]]></title>
    <link href="http://aleung.github.io/blog/2015/02/05/typesetting-basic+copy/"/>
    <updated>2015-02-05T00:00:00+08:00</updated>
    <id>http://aleung.github.io/blog/2015/02/05/typesetting-basic copy</id>
    <content type="html"><![CDATA[<p>虽然我不是处女座的，但在有些事情上会表现得比较处女座，例如对于文档格式，我常会跟各种细节纠缠不休，为的是看起来显得完美一些。</p>

<p>作为软件开发者，写文档是必备的技能，而且文档里常常会出现大量英文。这里介绍一些很基本的规则，使得文档的显得专业一些。这些规则在其他类型的文章里也是适用的。</p>

<h2 id="section">规则</h2>

<h3 id="section-1">用段落，不要强制换行</h3>

<p>在我看来，禁止使用强制换行，是没有特例的（我们不写诗歌）。在必须保留原始换行的地方，应该作为 preformatted text block（HTML 的 <code>PRE</code>，markdown 的 4 空格缩进段落）出现。</p>

<h3 id="section-2">保持一致性</h3>

<p>保持标点、字体等元素的一致性，整篇文档看起来清晰整齐，可读性高。</p>

<p>在这方面常见问题有：</p>

<dl>
  <dt>中文英文标点混用</dt>
  <dd>
    <p>写技术文章，经常会出现中文英文（西文）混合的场景。原则应该是在中文句子中使用中文标点，西文句子中使用西文标点。至于中文句子中嵌入西文引文，那么嵌入的西文内容中应该遵循西文引文这个“亚环境”的规则，用西文标点，但用来包裹嵌入内容的引号或者括号还是属于中文句子的环境，因此用中文标点。</p>
  </dd>
  <dt>简体繁体中文混用</dt>
  <dd>这个如果不考虑海外用户，问题也不算大，对大陆读者来说，混合简体繁体阅读起来基本上没有违和感。</dd>
  <dt>全角半角混用</dt>
  <dd>除了中文标点外，西文字母和数字这些字符是不应该出现全角的。</dd>
  <dt>成对的符号没有对称</dt>
  <dd>例如引号，是区分左引号和右引号的，一般输入法会正确识别方向，但在拷贝粘贴或者插入编辑的时候要小心方向不要弄错。</dd>
</dl>

<h3 id="section-3">空格的使用</h3>

<p>中文标点不需要加空格。西文标点后需要加一个空格；成对的符号，开始的要在前面加空格，结束的在后面加空格。</p>

<p>西文单词之间要用空格分隔，这个不容易错。但是单词与数字之间也要加空格，例如“iPhone 6”。</p>

<p>中文与西文混排时，中文与西文之间可能要添加空格，以保证有一定间距，具体视乎显示效果而定。有人习惯一律加空格。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<h3 id="section-4">西文大小写不要误用</h3>

<p>强调以下的规则似乎有点小题大做，但确实还是经常会见到这样的错误。</p>

<ul>
  <li>句子首字母大写，句子内不应该用大写，除非下面的情况；</li>
  <li>有些专有名词首字母大写的，即使用在句子中间也要保留大写；</li>
  <li>全部大写的缩写，放在哪里都不能变成小写。</li>
</ul>

<h3 id="section-5">西文没有书名号</h3>

<p>书名号是中文特有的。在西文中，书名用斜体表示，篇名用引号。</p>

<h3 id="section-6">使用样式，不要在文字上添加格式</h3>

<p>同样语义的文字，就应该有同样的显示效果，这也是一致性的体现。把文字变得五颜六色，再插一段超大字体，这种做法还是留在小毛孩的论坛里吧。</p>

<h3 id="section-7">不要滥用强调</h3>

<p>强调会吸引注意力，打破文档视觉结构，只应该用在真正需要的地方。满篇的强调等于没有强调。</p>

<p>若要突出文档架构，应该使用标题（headings）。当文章中有些整行文字需要强调时，往往是应该将它们作为小标题。</p>

<p>在西文中，按照强调的程度不同，一般强调用斜体，特别强调用加粗。但是，斜体只适合西文，中文不好看，在印刷中可以用楷体或者加着重号代替，不过在一般电子文档中不方便使用（在 web 上可以用 CSS 来控制），没有什么好方法，所以在中文中就没法区分一般强调和特别强调了。 <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>改颜色改字体大小之类的奇淫技巧不可使用。</p>

<h3 id="section-8">合理使用格式</h3>

<p>通过合理使用语义化的格式，可以达到需要的显示效果，而不用去直接指定如何显示。HTML 和 markdown 都支持以下几种格式：</p>

<dl>
  <dt>引用 （blockquote）</dt>
  <dd>整段文字引用自其他地方。</dd>
  <dt>Preformatted text block</dt>
  <dd>保留原始格式，包括换行，空格等。</dd>
  <dt>代码格式</dt>
  <dd>用等宽字体（monospaced font）显示。要做得漂亮一点就是加上自动语法高亮渲染了。</dd>
  <dt>定义列表 (definition list)</dt>
  <dd>适用于一个名词，后面一段解释的场合，就像现在这段文字。也就是 key-value map 在文本中的体现。在HTML 里是 <code>DL</code>, <code>DT</code> 和 <code>DD</code> 标签，不属于基本的 markdown 格式，有些引擎会支持。</dd>
</dl>

<h2 id="section-9">总结</h2>

<p>保证各种元素的一致性。关注内容的层次结构，段落或文字的语义属性，而不是显示效果。显示效果由样式来控制。</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://www.geekpark.net/topics/193278">空格杂谈</a>  <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://blog.acgtyrant.com/chinese-western-mixed-typesetting.html">中西文混排</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://blog.justfont.com/2014/01/popular-typography-4/">大眾字型學：理想的排版強調法</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll]]></title>
    <link href="http://aleung.github.io/blog/2015/01/26/jekyll/"/>
    <updated>2015-01-26T21:29:40+08:00</updated>
    <id>http://aleung.github.io/blog/2015/01/26/jekyll</id>
    <content type="html"><![CDATA[<h2 id="jekyll-">用 Jekyll 作为内部技术文档库</h2>

<p><img class="right" src="http://aleung.github.io/blog/attachments/2015/1/ecebook.png" /></p>

<p>去年在公司的产品开发团队中推行了使用 <a href="http://jekyllrb.com/">Jekyll</a> 静态网站生成工具来写内部技术文档，大半年下来，效果还不错。</p>

<p>内部技术资料的共享和维护以前一直是个问题。开始用 Office Word 正正规规的写设计文档，维护成本太高了，往往是代码已经翻天覆地变化，文档里都没有反映出来，大家不愿意更新。而且查找起来也不方便。后来推行敏捷方法，不想让文档工作那么 heavy 了，于是用 wiki 来记录。Wiki 的问题是信息非常碎片化，大家很随意的添加新页面，整个 wiki 就像一个草稿本，写得很没有系统。网状的超链接导航令读者很迷茫，不知道需要的信息入口在哪儿，有些隐藏得很深的页面没有几个人知道它们的存在。Wiki 的在线编辑体验也不是那么好。</p>

<p>Jekyll 是个静态网站生成工具，采用 <a href="http://zh.m.wikipedia.org/wiki/Markdown">markdown</a> 语法来写内容，根据模板生成 HTML 页面，发布到一个 web 服务器上，就可以用浏览器在线查看内容。Jekyll 通常用来做  blog 系统，但它用来做有组织的内容发布系统也是完全胜任的。我基本上就是仿照 Jekyll <a href="http://jekyllrb.com/docs/home/">官方文档</a> 的风格和结构来组织我们产品的内部技术文档库。</p>

<p>使用 Jekyll 优点首先是编写方便，markdown 是个轻量的标记语言，上手简单，语法易记，而且有不少编辑工具支持。即使没有渲染成 HTML，也是直接可以阅读的，比起奇奇怪怪还各自不同的 wiki 语法好写多了。</p>

<p>在模板做得好以及安装合适的插件后，生成的文档显示效果相当漂亮，格式效果也很丰富。而且，我们使用了 <a href="https://github.com/aleung/jekyll-plantuml">plantuml</a> 插件，可以直接用文字的方式<strong>写</strong>UML<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，比起以前用其他工具画图，截图，再嵌入文档这种方式方便多了。</p>

<p>技术文档库的原始文件是文本格式，用 git 来做版本管理，不用担心大家同时编辑保存时会相互覆盖的问题，修改历史也很清晰。大家都是程序员，本来代码就是用 git 来管理的，文档也用 git 管理自然是很顺手的事情。使用 <a href="https://github.com/aleung/jekyll-post-revision">jekyll-post-revision</a> 这个插件，能够在生成的页面上显示修改历史记录。</p>

<p>通过 <a href="https://github.com/slashdotdash/jekyll-lunr-js-search">jekyll-lunr-js-search</a> 这个插件，能为站点提供全文搜索的能力，这也是相当方便的功能。</p>

<h2 id="windows--jekyll">在 Windows 上安装 Jekyll</h2>

<p>Jekyll 是用 Ruby 开发的，在 Linux 和 Mac OS X 上安装使用都很简单，在系统中有 Ruby 环境的前提下（Mac 是自带的，Linux 的各种发行版都会有安装包），照着官网上的<a href="http://jekyllrb.com/docs/quickstart/">介绍</a>，几个命令就搞定了。但是，在 Windows 下就不是那么简单了（顺便再黑一下 Windows，不使用 Microsoft 技术的开发者都应该离开它）。</p>

<p>在 Windows 上装过几次 Jekyll，可以写点教程减少大家摸索的时间。大致参考这篇 <a href="http://jekyll-windows.juthilo.com/">Run Jekyll on Windows</a>。</p>

<h3 id="ruby">安装 Ruby</h3>

<p>首先需要安装 Ruby 环境。从 <a href="http://rubyinstaller.org/downloads">http://rubyinstaller.org/downloads</a> 下载 Ruby 2.0 和 DevKit，安装 Ruby，然后将 DevKit 解压到 <code>C:/RubyDevKit</code>，在命令行运行下面指令完成安装。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bat"><span class="line"><span class="k">cd</span> C:\RubyDevKit
</span><span class="line">ruby dk.rb init
</span><span class="line">ruby dk.rb install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="jekyll--gem">安装 Jekyll 相关的 gem</h3>

<p>Gem 是 Ruby 的包管理工具。在命令行执行<code>gem install</code>可从互联网的仓库直接下载和安装需要的包。如果需要代理，需要先设置环境变量<code>http_proxy</code>，如不需要则忽略第一行。其中，<code>jekyll</code>这个 gem 是必须安装的，其他的视乎环境、配置和使用的插件，可能需要装，可能不需要装。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bat"><span class="line"><span class="k">set</span> <span class="nv">http_proxy</span><span class="o">=</span>http:<span class="n">//my-proxy:8080</span>
</span><span class="line">
</span><span class="line">gem install jekyll
</span><span class="line">
</span><span class="line">gem install kramdown
</span><span class="line">gem install pygments
</span><span class="line">gem install nokogiri
</span><span class="line">gem install coderay
</span><span class="line">gem install wdm
</span><span class="line">gem install json
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果在安装过程中出现 SSL 错误，从<a href="https://gist.github.com/luislavena/f064211759ee0f806c88">这里</a>可以找到解决方法。</p>

<h3 id="jekyll">使用 Jekyll</h3>

<p>Jekyll 的相关操作都是执行<code>jekyll</code>命令进行。后面的基本上就是看<a href="http://jekyllrb.com/docs/quickstart/">官方文档</a>慢慢折腾了。</p>

<h2 id="jekyllexe">制作 jekyll.exe</h2>

<p>上面的步骤还是有点繁琐。我们公司里的都是 Java 程序员，在电脑里装个 Ruby 环境也没有其他用处。为了推广使用，简化大家的操作，做一个 portable 的 Jekyll 可执行程序会更好。</p>

<p>制作的步骤基本上参考这篇 <a href="http://www.nickw.it/jekyll-dot-exe/">Building Jekyll.exe for Windows</a>。</p>

<p>首先要安装 OCRA。可能还需要安装 psych，bigdecimal 这些 gem。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bat"><span class="line">gem install ocra
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>解开 jekyll 到一个临时目录：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bat"><span class="line">gem unpack jekyll
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>修改<code>bin/jekyll</code>，在开头增加几个依赖声明：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;jekyll-watch&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;wdm&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>生成 exe 文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bat"><span class="line">ocra --add-all-core --gem-all bin<span class="n">/jekyll</span> lib<span class="n">/jekyll/mime.types</span> lib<span class="n">/site_template/**/*</span> lib<span class="n">/site_template/*</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>做出来的 jekyll.exe 需要测试一下，看看各种命令是否都能正常。视乎配置和使用插件的不同，可能需要增加更多的依赖声明。以上只是我的环境的例子，不一定适用于所有场景。</p>

<p>最后，我知道大家都还是懒得衣来伸手饭来张口的，就提供一个编译好的 <a href="https://github.com/f5f6/f5f6.github.io/raw/master/_bin/jekyll.exe">jekyll.exe</a> 下载，支持 kramdown 和 coderay。但还是那句话：不一定符合你的环境。</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>参考 <a href="http://aleung.github.io/blog/blog/2014/08/23/plantuml/">PlantUML 简介</a>, <a href="http://aleung.github.io/blog/blog/2014/01/20/text-to-uml-diagram/">Text to UML Diagram</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ 同事们关于 FP 语言的讨论]]></title>
    <link href="http://aleung.github.io/blog/2015/01/25/fp/"/>
    <updated>2015-01-25T12:41:14+08:00</updated>
    <id>http://aleung.github.io/blog/2015/01/25/fp</id>
    <content type="html"><![CDATA[<p><em>之前在公司里一来一往的邮件讨论，被江南白衣集成一篇收录到<a href="http://calvin1978.blogcn.com/articles/haskell.html">他的博客</a>里，读下来还蛮有意思，转过来，以下为全文引用。其中的梁君就是我啦。</em></p>

<h2 id="section">缘起</h2>

<p><strong>达夫君</strong>： </p>

<p><a href="http://segmentfault.com/a/1190000000502996">利用 GitHub 统计分析编程语言发展趋势</a></p>

<h2 id="section-1">第一轮讨论</h2>

<p><strong>梁君</strong>：</p>

<p>增加的Java的项目里，不知道有多少是与Android相关的呢？</p>

<p>Scala最热门都是在意大利城市（Milan, Rome, Florence, Naples,Turin），很奇怪，意大利软件业不发达。于是查了字典在意大利语里scala是scale(英语)的意思，应该跟编程语言无关。排除之后排首位的就是 San Francisco和San Jose，硅谷地区。</p>

<p>最近几天在看 Haskell，真是非常有趣的一门语言。
于是也在Google Trends上看一下，搜索Haskell最热的城市是 Gothenburg，第二是Utrecht (因为乌特勒支大学？)。</p>

<p>2014年热度，按国家排序，Haskell最热也是China! 考虑到中国已经屏蔽了Google，这个结果令人吃惊。在国内Scala, Haskell也不是那么热门吧？程序员人口基数大？</p>

<p><strong>雄君</strong>：</p>

<p>Haskell应该是所有程序语言里面被神化的最厉害的吧。有种说法，Haskell可以让你变成一个更好的程序员，即便你不用它，好像还有本书名就是这个。感觉看几本Haskell书就能变成高手似的，快变成宗教了都。。。。</p>

<p><strong>梁君</strong>：</p>

<p>Haskell应该是一种研究型/教学型语言吧。</p>

<p>据说是纯粹的FP，我现在看它是想试试强迫一下自己使用FP的思维模式。</p>

<p>那篇 <a href="http://raganwald.com/2014/12/20/why-why-functional-programming-matters-matters.html">WhyWhyFP</a> 不错。 里面，看到一些话（虽然不算是那篇文字的主题）：</p>

<blockquote>
  <p>The key is the word better. It is not the same as the phrase more powerful.
it is possible to make a language “better” by removing features that are considered harmful, if by doing so it makes programs in the language better programs.</p>
</blockquote>

<p>关于 better 与 powerful 的思考，不是功能越多就越好。用在我们的产品上也是一样啊。</p>

<h2 id="haskell">哥德堡的Haskell教授</h2>

<p><strong>赵君</strong>：</p>

<p>Gothenburg研究Haskell的那个人好像是Richard君的教授。感兴趣的可以问问Richard的感受。</p>

<p><strong>范君</strong>：</p>

<p>Richard说的:</p>

<blockquote>
  <p>Mr Hughes is a very smart guy. And his homepage hasn’t changed since I had him as a professor : http://www.cse.chalmers.se/~rjmh/ </p>
</blockquote>

<p>国外大学很多都是用Haskell，大老板之前去大英帝国读研也是用它。</p>

<h2 id="fp">FP做题大赛</h2>

<p><strong>韶君</strong>：</p>

<p>我好奇看一下，“证明即程序、命题为类型”，这就是一门数学领域的领域语言，难怪学院派对它宠爱有加，一边证明一边编程，逼格高啊</p>

<p>有个网站号称趣味学Haskell: <a href="http://learnyouahaskell-zh-tw.csie.org/">HASKELL 趣學指南</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>Step by step 学了一下Haskell，居然停不下来，无论写还是读，都像在玩puzzle game，都想找回以前的数学课本来复习一下。我想不用也能让你成为更好的程序员此话不假，就是让你恶补一下已经还给老师的数学概念。</p>

<p>给个零零漆的经典应用题大家思考一下：有一个农场，鸡的数目是鸭的四倍，但是鸭又比猪少九只，鸭和猪的数目是六十七只，请问农场所有动物的脚加起来共多少只？</p>

<p><strong>雄君</strong>：</p>

<p>感觉这跟你的学习方式关系更大，跟语言关系不大的。你也可以用Scala去做SICP的习题，同样有这种感觉。</p>

<p><strong>梁君</strong>：</p>

<p>不挑起具体语言之争。韶君的例子应该是说明FP给人带来耳目一新的感觉。</p>

<p>另外，我感觉那本书 (Learn You a Haskell) 用来做FP入门真的很好，之前看过一些Scala的书都没有那么清晰的理解。</p>

<p>顺便做做那道题目：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="kt">Prelude</span><span class="o">&gt;</span> <span class="n">head</span> <span class="p">[</span><span class="n">c</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="n">d</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="n">p</span><span class="o">*</span><span class="mi">4</span> <span class="o">|</span> <span class="n">d</span><span class="ow">&lt;-</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">],</span> <span class="kr">let</span> <span class="n">c</span><span class="ow">=</span><span class="n">d</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span> <span class="kr">let</span> <span class="n">p</span><span class="ow">=</span><span class="n">d</span><span class="o">+</span><span class="mi">9</span><span class="p">,</span> <span class="n">d</span><span class="o">+</span><span class="n">p</span><span class="o">==</span><span class="mi">67</span><span class="p">]</span>
</span><span class="line"><span class="mi">442</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>韶君</strong>：</p>

<p>我原来写的是</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span class="nf">head</span> <span class="p">[</span><span class="n">a</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="n">b</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="n">c</span><span class="o">*</span><span class="mi">4</span><span class="o">|</span><span class="n">a</span> <span class="ow">&lt;-</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">..</span><span class="p">],</span> <span class="n">b</span> <span class="ow">&lt;-</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">..</span><span class="p">],</span> <span class="n">c</span> <span class="ow">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">..</span><span class="p">],</span> <span class="n">a</span><span class="ow">=</span><span class="mi">4</span><span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="n">b</span><span class="ow">=</span><span class="n">c</span><span class="o">-</span><span class="mi">9</span><span class="p">,</span> <span class="n">b</span><span class="o">+</span><span class="n">c</span><span class="ow">=</span><span class="mi">67</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>结果不会结束，除非数组加上限，有空找你理解一下。</p>

<p>确实是FP带来的感觉，相信Scala也可以带来这个感觉，只不过如果我用Scala就不自觉地当Java来做了。</p>

<p><strong>达夫君</strong>：</p>

<p>我原来也是将Scala当Java来写。但是当你将Java的语法忘了差不多了，Scala就入门了：）</p>

<p>其实只是个老问题，就是平常没机会看Scala的代码，没有好的example参考而已。
看别人的代码多了，也就习惯了。</p>

<p>用 Scala 解那道题：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">val</span> <span class="n">d</span> <span class="k">=</span> <span class="o">(</span><span class="mi">1</span> <span class="n">to</span> <span class="mi">67</span><span class="o">)</span> <span class="n">toStream</span>
</span><span class="line"><span class="k">val</span> <span class="n">feet</span> <span class="k">=</span> <span class="k">for</span> <span class="o">{</span>
</span><span class="line">  <span class="n">d1</span> <span class="k">&lt;-</span> <span class="n">d</span>
</span><span class="line">  <span class="n">c1</span> <span class="k">=</span> <span class="n">d1</span> <span class="o">*</span> <span class="mi">4</span>
</span><span class="line">  <span class="n">p1</span> <span class="k">=</span> <span class="n">d1</span> <span class="o">+</span><span class="mi">9</span> <span class="k">if</span> <span class="o">(</span><span class="n">d1</span> <span class="o">+</span> <span class="n">p1</span> <span class="o">==</span> <span class="mi">67</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span> <span class="k">yield</span> <span class="o">{</span>
</span><span class="line">  <span class="o">(</span><span class="n">c1</span><span class="o">+</span><span class="n">d1</span><span class="o">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">p1</span> <span class="o">*</span> <span class="mi">4</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line"><span class="n">println</span><span class="o">(</span><span class="n">feet</span><span class="o">.</span><span class="n">take</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">force</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>梁君</strong>：</p>

<p>Scala应该增加一种纯FP模式，当打开这个选项的时候，任何不符合FP的写法都报错（或者warning）。</p>

<p><strong>米君</strong>：</p>

<p>沒電腦，裸寫一段 Python，不知道對不對：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">print</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="err">‎</span><span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="mi">4</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">9</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span><span class="p">,</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">+</span><span class="n">x</span><span class="o">+</span><span class="mi">9</span> <span class="o">==</span> <span class="mi">67</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">67</span><span class="p">)))[</span><span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看起來還是 Haskell 的最有數學味。</p>

<p>邊打邊爐邊研究，或者還可以這樣（不知道對不對，大意如此）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">print</span> <span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="mi">4</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">9</span><span class="p">)</span><span class="o">*</span><span class="mi">4</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">67</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span><span class="o">+</span><span class="n">x</span><span class="o">+</span><span class="mi">9</span> <span class="o">==</span> <span class="mi">67</span><span class="err">‎</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>據說這樣有 lazy evaluation，map 和 filter 不知道有沒有。有明白人指點一下嗎？</p>

<p><strong>韶君</strong>：</p>

<p>FP的思路就是“是什么”，指令编程的思路是“做什么”，从这个角度看
<code>head [c*2+d*2+p*4 | d&lt;-[0..], let c=d*4, let p=d+9, d+p==67]</code> 这个最优雅了，基本上把题目复述一遍而已</p>

<p><strong>雄君</strong>：</p>

<p>米君，你已经线下把三元方程转成一元了，这个是作弊吧，不算。</p>

<p>Haskell的 lazy evaluation 在这么小的程序里面也会搞出无限循环的bug，这是它没法商用的最大原因之一。</p>

<p>我发一个Clojure的，也符合数据的解方程思路。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="clojure"><span class="line"><span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">for </span><span class="p">[</span><span class="nv">p</span> <span class="p">(</span><span class="nb">range </span><span class="mi">1</span> <span class="mi">67</span><span class="p">)</span>
</span><span class="line">             <span class="ss">:let</span> <span class="p">[</span><span class="nv">d</span> <span class="p">(</span><span class="nb">- </span><span class="mi">67</span> <span class="nv">p</span><span class="p">)</span> <span class="nv">c</span> <span class="p">(</span><span class="nb">* </span><span class="mi">4</span> <span class="nv">d</span><span class="p">)]</span>
</span><span class="line">             <span class="ss">:when</span> <span class="p">(</span><span class="nb">= </span><span class="nv">d</span> <span class="p">(</span><span class="nb">- </span><span class="nv">p</span> <span class="mi">9</span><span class="p">))]</span>
</span><span class="line">         <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">p</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">d</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">c</span> <span class="mi">2</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>梁君</strong>：</p>

<p>这个我忍不住要说说了，上限没有在原题中给出，需要推理才能得到的。Haskell的程序里是没有设上限的：<code>a &lt;-[1..], b &lt;-[1..], c &lt;- [1..]</code>。
你们写的其他程序都是有上限的：<code>p (range 1 67)</code>，<code>x in range(0, 67)</code>，<code>(1 to 67)</code>。</p>

<p>用这个来说Haskell会搞出无限循环的bug是不是有点冤枉了？</p>

<p>p.s. FP的理论在那里，现代的语言都或多或少吸取进去了，只是用什么语法形式的问题，纯粹一些还是要跟原来的特性做妥协，大家也都相互借鉴。除了Java最不思上进。</p>

<p>看上去Clojure的语法最像Lisp。</p>

<p><strong>米君</strong>：</p>

<p>不服上訴。哈哈。</p>

<p>這樣呢？算不算真三元？（已經盡力了。除非改成一元，否則range 好像是繞不過的坎，如果改成無限列表也是一樣會死循環。）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">print</span> <span class="nb">iter</span><span class="p">(</span> <span class="n">c</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">d</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p</span><span class="o">*</span><span class="mi">4</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">67</span><span class="o">*</span><span class="mi">4</span><span class="p">)</span> <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">67</span><span class="p">)</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">67</span><span class="p">)</span> <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="n">d</span><span class="o">*</span><span class="mi">4</span> <span class="ow">and</span> <span class="n">d</span> <span class="o">==</span> <span class="n">p</span><span class="o">-</span><span class="mi">9</span> <span class="ow">and</span> <span class="n">d</span><span class="o">+</span><span class="n">p</span> <span class="o">==</span> <span class="mi">67</span><span class="p">)</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Clojure的版本和Java看上去很像啊。唯一不同大概就是 lazy evaluation 吧。
另外，雖然定義了三個變量，但其實只有一個是真正的“變”量，所以還是一元。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">p</span> <span class="o">&lt;=</span><span class="mi">67</span><span class="o">;</span> <span class="n">d</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">67</span> <span class="o">-</span> <span class="n">p</span><span class="o">;</span>
</span><span class="line">  <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">d</span> <span class="o">*</span> <span class="mi">4</span><span class="o">;</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span> <span class="n">d</span> <span class="o">==</span> <span class="n">p</span> <span class="o">-</span> <span class="mi">9</span> <span class="o">)</span>
</span><span class="line">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">c</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">d</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="n">p</span><span class="o">*</span><span class="mi">4</span> <span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>雄君</strong>：</p>

<p>其实完全不是那么一回事，Scala和Clojure里面的for不是循环的意思，达夫之前解释过。这是Java程序员转FP的第一重障碍。另外，Clojure这段代码绝对没有lazy evaluation，如果需要Lazy，Clojure必须要明确指定使用Lazy seq。</p>

<p>Python和Java的表达能力不可能赶上Lisp的，超过Lisp表达能力的语言还没有发明出来。</p>

<h2 id="section-2">最后一轮讨论</h2>

<p><strong>雄君</strong>：</p>

<p>Clojure是一个Lisp变种，也是目前唯一的一个商业化的Lisp系语言。</p>

<p>Haskell 是 lazy evaluation by default 的语言，全世界几乎独此一家了。这个特性导致程序运行时，时间和空间都是不可预期的，基本上没有企业敢用。</p>

<p>Haskell又为了程序在逻辑上的predictable，从语言成面回避side effect，结果连个随机数生成都搞不定，发明monad来解决这个问题。问题是monad这么复杂的东西，用Haskell开发竟然是必须掌握的技巧，这很恐怖啊，哪找程序员？</p>

<p>这语言真的是只能看的。</p>

<p><strong>韶君</strong>：</p>

<p>Haskell我觉得商业上想取得成功确实不容易，但我不觉得作者想这样做，说商用，有哪种语言比Java更成功呢，指令语言也没那么容易出错，因为指令语言只有想不到，没有做不到，想取得商业成功就意味着妥协，从这个角度，我更看好Scala。</p>

<p><strong>达夫君</strong>：</p>

<p>估计等大家要看Java8的时候就需要考虑是升级JDK到8呢还是换Scala了。</p>

<p><strong>梁君</strong>：</p>

<p>Haskell 就是一门教学/研究型语言，开个学术会议，几个老家伙聚在一起，说不如我们设计个语言来显示一下FP多牛B吧。商业成功不是它设计的初衷 (后来其他人怎么想是另外一回事)</p>

<blockquote>
  <p>At the conference on Functional Programming Languages and Computer Architecture (FPCA ‘87) in Portland, Oregon, a meeting was held during which participants formed a strong consensus that a committee should be formed to define an open standard for such languages. The committee’s purpose was to consolidate the existing functional languages into a common one that would serve as a basis for future research in functional-language design.</p>
</blockquote>

<p>才发现BASIC不是我唯一的入门语言，我刚学电脑的时候还看过Logo语言，这么说我也是一开始就接触FP的啦。</p>

<p>对Java程序员和已经大量投资于Java的软件企业来说，应该是Scala最有价值。</p>

<p><strong>雄君</strong>：</p>

<p>我是前几年被人忽悠后花了好几个月学习Haskell，还想用它做项目，现在已经弃坑了。</p>

<h2 id="section-3">诗一首</h2>

<blockquote><p>孤独时</p><p>孤独时我不喜欢使用语言。<br />一头熊和一只鹦鹉坐在<br />跷跷板的两头<br />跷跷板朝一头翘起。很多东西<br />没办法称量，我是熊你们是鹦鹉。<br />我是这头熊我不使用<br />你们的语言。</p><footer><strong>余怒，2003.7.20</strong></footer></blockquote>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>英文原版为 <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good!</a>。有电子书，简体中文纸板也出版了。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Haskell]]></title>
    <link href="http://aleung.github.io/blog/2015/01/06/haskell/"/>
    <updated>2015-01-06T22:03:35+08:00</updated>
    <id>http://aleung.github.io/blog/2015/01/06/haskell</id>
    <content type="html"><![CDATA[<p>2014年断断续续学了一阵子 Scala 语言，Scala 真的不错，将面向对象和函数式编程两种范式结合得很好，对 Java 程序员非常友好。不过，从学编程开始就受命令式编程的思想的浸淫，要使用函数式编程的思想相当困难，思路转不过来，而 Scala 又不强迫你用 FP，所以写出来的程序基本上还是命令式的。不少人都推荐学 Haskell 作为函数式编程的入门，作为一门学院派的语言，它非常纯粹，有助于掌握函数式编程的思维方式。于是开始读 <a href="http://learnyouahaskell.com/">Learn You a Haskell for Great Good</a>，这真是本入门好书，从头开始一点点的理解接受函数式编程的思路。学 Haskell 的感觉非常<em>有趣</em>。</p>

<p>不过那本书只是讲语言特性和思想，没有讲 Haskell 的运行环境和使用。上网收集了一些资料，记录下来。</p>

<p>Haskell (缺省)是编译成 native code，并非运行在托管环境下，因此开发出来的程序就像 C 的一样直接可执行的 binary。Haskell 程序需要依赖于 Runtime System (RTS)，RTS 提供了内存管理，GC，轻量线程，并发等等功能的支持。包括 RTS 和其他的依赖到的 library，缺省都是静态链接到可执行程序中的，因此编译出来的程序体积会比较大。但现在 GHC 也已经支持动态链接了，如果使用动态链接，则要求运行环境中需要已经安装了 GHC（有 RTS）。在这方面，Haskell 跟 Go 差不多，都是直接得到 native 可执行程序，分发和部署会简单一些。</p>

<p>Haskell 的编译器叫做 Glasgow Haskell Compiler (GHC)，它包括了 compiler，boot library 和 runtime system (RTS)。编译器支持多种 backend，除了可以生成 native code (机器码)，也可以产生 C 语言源代码（供跨平台移植），或者 LLVM code，（供后面接 LLVM toolchain 使用）。</p>

<p>做应用开发不太可能什么都从头做起，必然要依赖第三方的函数库。Haskell 世界里的包管理和 build 系统叫 Cabal。另外有个工具 Cabal-Install 负责下载 Haskell package 源代码、编译、安装和注册到 GHC 的整个过程。共享的包存放在 <a href="http://hackage.haskell.org/">Hackage</a> 这个在线仓库中。</p>

<p>Reference: <a href="http://www.aosabook.org/en/ghc.html">The Architecture of Open Source Applications - GHC</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大鹏新年马拉松]]></title>
    <link href="http://aleung.github.io/blog/2015/01/02/da-peng-new-year-marathon/"/>
    <updated>2015-01-02T16:17:11+08:00</updated>
    <id>http://aleung.github.io/blog/2015/01/02/da-peng-new-year-marathon</id>
    <content type="html"><![CDATA[<p>Pacer数据丢了，没法分析心率和速度 :( </p>

<p>净成绩 4:17:47，比广马要好些。之前训练很少，按照玩玩的心态去跑，没有设定时间目标，也没有预定配速，就按照舒服的速度跑。</p>

<p>起跑后速度不快，大家的速度也平均，不像其他赛事一样起跑速度都很快，应该是因为只有全马，大家都是有经验的。开始几公里步速大概在5’50”上下，感觉跟平常训练很像，步伐轻快，心率也没有一下飙高。太阳没出来，有点风，罩着雨衣到8km 才脱下。</p>

<p>十几公里那段跑得比较舒畅，步速也不知不觉加快到5分十几秒的样子。这段落偶有小上下坡，新柏油路面，很舒服。18km 吃能量胶，以免20km 后能量不足。这时我还挺乐观的以为能跑进410。</p>

<p>过了半程 开始觉得膝关节不适，比以往出现得早太多了，而且二十多公里后开始变成水泥路面。心肺状态倒是很好，基本不喘气。</p>

<p>25km 补给点吃了盐丸和香蕉，26km 经过水头，有些民众加油，气氛不错。27km 后有点疲累了，28km后一个陡坡，怕太耗体能，走了后半段。</p>

<p>30km 那段很多人都在走路了，只要坚持跑就能不断超人，距离拉得很开，有些时候就是一个人在跑，前面很远都没人。这时跑得吃力了，速度在6分左右，但感觉很慢。不断的期待什么时候能到往大亚湾电站的路。小腿也有抽筋感觉，在医护站喷过云南白药。这段路上又吃了一个能量胶。</p>

<p>31km 后转弯拐向大亚湾核电站方向，对面有折返的人，观众也多些，心理上很快就跑完了折返段这两公里。</p>

<p>然后就一直惦记着38km 前那个大上坡，实际上上坡从33km 就开始了，这段路树荫茂密，看不到远方，我听别人说是连续两公里上坡，还以为没到。除了左小腿，右小腿和左大腿都有过要抽筋感觉，过医疗站必去喷一下。过了35km 大补给站，看到一眼到头都是上坡的大直路，但反倒跑起来不那么辛苦，小步的跑虽然慢但不是非常吃劲，没有撑不住要停下来走的感觉。过了37km 看到前面到顶了，才走了最后一段。</p>

<p>38km 后急下坡，虽然轻松但脚肌肉已经太疲累跑不起来，6分步速。而且，左小腿抽筋感很强，膝关节和髋关节都劳累，右膝特别不适。虽然是最后几公里，但真有点崩溃的感觉了。40km 前后应该是感觉最差的一段。</p>

<p>41km最后一个拐弯后，又开始上坡，这时咬牙也得坚持了，要抽筋也不管了，左四头肌和小腿的肌肉都在不断的抽搐着，其实它们还是有继续工作的能力的。但，怎么还看不到终点啊？终于在过42km牌子后看到终点拱门……这两百米也不短……</p>

<p>冲线后除了挂上奖牌，组委会还很贴心的准备了披风给披上，真温暖。从马路下去会场有好多级台阶，也专设了一个斜坡供大家下去。虽然是斜坡，我都只能慢慢蹭下去，膝关节累得弯不了了，志愿者马上过了扶我到医疗点喷药。傍晚大巴回到广州，下车后走路都一拐一拐，右膝的旧患，在弯曲时痛，不能受力，特别是下不了楼梯。休息一晚后，感觉好很多。</p>

<p>这次跑的心率一直很平稳，起跑几公里没有一下子飙升，十公里后一直维持在160以内，从头到尾都没有特别气喘吁吁的，没有那种肌肉糖原消耗尽突然有氧功能跟不上的感觉。早餐吃了三碗粥，一个鸡蛋，几个红薯，一瓶运动饮料直到起跑前喝完。跟往常一样，水站不喝水，饮料站都喝一些饮料。18km 能量胶，25km 半根香蕉，30km 左右能量胶，35km 半根香蕉，觉得能量补充足够了。带来3个能量胶剩了一个，补给站也没有多拿食物，感觉不需要。</p>

<p>但是，依然困扰的是小腿后侧肌肉抽筋的问题，上次盐田半马在最后一公里也出现了。广马前的训练几次三十多公里没有出现过。广马天气热太阳晒，这次气温很适宜，还吃了盐丸，还是出现。应该问题还是训练得少，肌肉不能坚持长时间运动。</p>

<p><img src="http://aleung.github.io/blog/attachments/2015/1/route.jpg" /></p>

<p><img src="http://aleung.github.io/blog/attachments/2015/1/elevation.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Trouble shooting: Windows响应缓慢]]></title>
    <link href="http://aleung.github.io/blog/2014/12/30/windows-troubleshooting/"/>
    <updated>2014-12-30T16:24:15+08:00</updated>
    <id>http://aleung.github.io/blog/2014/12/30/windows-troubleshooting</id>
    <content type="html"><![CDATA[<p>最近一个星期，电脑出现了缓慢的现象：打开任何应用，窗口都要等待上一段时间才能出现。</p>

<p>在 <a href="http://technet.microsoft.com/en-us/sysinternals/bb896653">Process Explorer</a> 中看到进程已经出现，也没有什么CPU占用，但窗口就是不出来，好像是要等到什么操作超时。这里如果能够查看调用栈，应该就能知道程序卡在什么地方。</p>

<p>上网搜索一下，看到一些文章提到 troubleshoot Windows 问题，都用到了 WinDbg 来分析进程调用栈。这篇<a href="http://www.codeproject.com/Articles/6084/Windows-Debuggers-Part-A-WinDbg-Tutorial">文章</a>简要介绍了 WinDbg 的使用方法（不过可能文章年代过于久远，有些细节已经对不上了）。于是安装相应软件，实操一下。</p>

<p>只是用到 WinDbg 的一些皮毛功能，包括这些命令：</p>

<table>
  <thead>
    <tr>
      <th>Command</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>~</td>
      <td>列出所有线程</td>
    </tr>
    <tr>
      <td>k <em>5</em></td>
      <td>显示当前线程的stack trace，如果附带数字则限制打印条数</td>
    </tr>
    <tr>
      <td>kb</td>
      <td>显示stack trace，包含前三个调用参数</td>
    </tr>
    <tr>
      <td>~n[cmd]</td>
      <td>对n号线程执行 <em>cmd</em> 操作</td>
    </tr>
    <tr>
      <td>~*[cmd]</td>
      <td>对所有线程执行操作，如 <code>~*k 5</code></td>
    </tr>
    <tr>
      <td>~ns</td>
      <td>切换到n号线程</td>
    </tr>
  </tbody>
</table>

<p>WinDbg 可以 attach 到一个执行中的进程。但我只是想看看某个时刻那个进程在干什么，用 Process Explorer 创建进程的 minidump 更加简单，在 GUI 中选择进程，右键菜单选择 dump 就能创建出 dump 文件，可以多 dump 几次，然后用WinDbg 打开 dump 文件查看。</p>

<pre><code>Loading Dump File [C:\tmp\2014-12\notepad++.dmp]
User Mini Dump File: Only registers, stack and portions of memory are available

Symbol search path is: srv*c:\LocalSymbols* http://msdl.microsoft.com/download/symbols
Executable search path is:
Windows 7 Version 7601 (Service Pack 1) MP (4 procs) Free x86 compatible
Product: WinNt, suite: SingleUserTS
Machine Name:
Debug session time: Tue Dec 30 15:53:27.000 2014 (UTC + 8:00)
System Uptime: not available
Process Uptime: 0 days 0:00:06.000
</code></pre>

<p>这是 notepad++ 启动6秒钟后的 dump，看看这时有些什么线程，分别在干什么：</p>

<pre><code>0:000&gt; ~*k 6

.  0  Id: 1894.d54 Suspend: 0 Teb: 7efdd000 Unfrozen
ChildEBP RetAddr 
00137980 74c314ab ntdll!NtWaitForSingleObject+0x15
001379ec 764b1194 KERNELBASE!WaitForSingleObjectEx+0x98
00137a04 764b1148 kernel32!WaitForSingleObjectExImplementation+0x75
00137a18 74a5098c kernel32!WaitForSingleObject+0x12
00137a28 74a4fcdc msctf!CCicEvent::Wait+0x15
00137ca4 74a4fbd9 msctf!CAssemblyList::LoadFromCache+0x94

   1  Id: 1894.107c Suspend: 0 Teb: 7efda000 Unfrozen
ChildEBP RetAddr 
WARNING: Frame IP not in any known module. Following frames may be wrong.
00b4ff88 764b338a 0x1e02d1
00b4ff94 76ecbf32 kernel32!BaseThreadInitThunk+0xe
00b4ffd4 76ecbf05 ntdll!__RtlUserThreadStart+0x70
00b4ffec 00000000 ntdll!_RtlUserThreadStart+0x1b

   2  Id: 1894.4bc Suspend: 0 Teb: 7efd7000 Unfrozen
ChildEBP RetAddr 
02ecfe28 76ee1ad0 ntdll!NtWaitForWorkViaWorkerFactory+0x12
02ecff88 764b338a ntdll!TppWorkerThread+0x216
02ecff94 76ecbf32 kernel32!BaseThreadInitThunk+0xe
02ecffd4 76ecbf05 ntdll!__RtlUserThreadStart+0x70
02ecffec 00000000 ntdll!_RtlUserThreadStart+0x1b

   3  Id: 1894.f30 Suspend: 0 Teb: 7ef9f000 Unfrozen
ChildEBP RetAddr 
033afe28 76ee1ad0 ntdll!NtWaitForWorkViaWorkerFactory+0x12
033aff88 764b338a ntdll!TppWorkerThread+0x216
033aff94 76ecbf32 kernel32!BaseThreadInitThunk+0xe
033affd4 76ecbf05 ntdll!__RtlUserThreadStart+0x70
033affec 00000000 ntdll!_RtlUserThreadStart+0x1b

   4  Id: 1894.2034 Suspend: 0 Teb: 7ef9c000 Unfrozen
ChildEBP RetAddr 
04d1fdf4 76ecc6c5 ntdll!NtWaitForMultipleObjects+0x15
04d1ff88 764b338a ntdll!TppWaiterpThread+0x33d
04d1ff94 76ecbf32 kernel32!BaseThreadInitThunk+0xe
04d1ffd4 76ecbf05 ntdll!__RtlUserThreadStart+0x70
04d1ffec 00000000 ntdll!_RtlUserThreadStart+0x1b
</code></pre>

<p>共有5个线程，只有0号线程在干活。看0号线程的完整调用栈：</p>

<pre><code>0:000&gt; k
ChildEBP RetAddr 
00137980 74c314ab ntdll!NtWaitForSingleObject+0x15
001379ec 764b1194 KERNELBASE!WaitForSingleObjectEx+0x98
00137a04 764b1148 kernel32!WaitForSingleObjectExImplementation+0x75
00137a18 74a5098c kernel32!WaitForSingleObject+0x12
00137a28 74a4fcdc msctf!CCicEvent::Wait+0x15
00137ca4 74a4fbd9 msctf!CAssemblyList::LoadFromCache+0x94
00137cd0 74a4e045 msctf!CAssemblyList::Load+0x39
00137d00 74a4e863 msctf!EnsureAssemblyList+0xe9
00137d28 74a4e30a msctf!CLangBarItemMgr::GetCurrentCategoryList+0x14
00137d44 74a4e67d msctf!CLangBarItemMgr::_Init+0xea
00137d58 74a7d0c4 msctf!CLangBarItemMgr::CreateInstance+0xea
00137d78 74a57f99 msctf!CLangBarItemMgr_Ole::CreateInstance+0x6e
00137d8c 76038ca6 msctf!CClassFactory::CreateInstance+0x14
00137e14 76053170 ole32!CServerContextActivator::CreateInstance+0x172 [d:\w7rtm\com\ole32\com\objact\actvator.cxx @ 1000]
00137e54 76038dca ole32!ActivationPropertiesIn::DelegateCreateInstance+0x108 [d:\w7rtm\com\ole32\actprops\actprops.cxx @ 1917]
00137ea8 76038d3f ole32!CApartmentActivator::CreateInstance+0x112 [d:\w7rtm\com\ole32\com\objact\actvator.cxx @ 2268]
00137ec8 76038ac2 ole32!CProcessActivator::CCICallback+0x6d [d:\w7rtm\com\ole32\com\objact\actvator.cxx @ 1737]
00137ee8 76038a73 ole32!CProcessActivator::AttemptActivation+0x2c [d:\w7rtm\com\ole32\com\objact\actvator.cxx @ 1630]
00137f24 76038e2d ole32!CProcessActivator::ActivateByContext+0x4f [d:\w7rtm\com\ole32\com\objact\actvator.cxx @ 1487]
00137f4c 76053170 ole32!CProcessActivator::CreateInstance+0x49 [d:\w7rtm\com\ole32\com\objact\actvator.cxx @ 1377]
00137f8c 76052ef4 ole32!ActivationPropertiesIn::DelegateCreateInstance+0x108 [d:\w7rtm\com\ole32\actprops\actprops.cxx @ 1917]
001381ec 76053170 ole32!CClientContextActivator::CreateInstance+0xb0 [d:\w7rtm\com\ole32\com\objact\actvator.cxx @ 685]
0013822c 76053098 ole32!ActivationPropertiesIn::DelegateCreateInstance+0x108 [d:\w7rtm\com\ole32\actprops\actprops.cxx @ 1917]
001389fc 76059e25 ole32!ICoCreateInstanceEx+0x404 [d:\w7rtm\com\ole32\com\objact\objact.cxx @ 1334]
00138a5c 76059d86 ole32!CComActivator::DoCreateInstance+0xd9 [d:\w7rtm\com\ole32\com\objact\immact.hxx @ 343]
00138a80 76059d3f ole32!CoCreateInstanceEx+0x38 [d:\w7rtm\com\ole32\com\objact\actapi.cxx @ 157]
Unable to load image C:\Windows\System32\kunlun.ime, Win32 error 0n2
*** WARNING: Unable to verify timestamp for kunlun.ime
*** ERROR: Module load completed but symbols could not be loaded for kunlun.ime
00138ab0 71a86801 ole32!CoCreateInstance+0x37 [d:\w7rtm\com\ole32\com\objact\actapi.cxx @ 110]
WARNING: Stack unwind information not available. Following frames may be wrong.
00138ad4 71a86722 kunlun+0xf6801
00138b0c 71a8648c kunlun+0xf6722
00138bf0 71a4fb9e kunlun+0xf648c
00138c58 71a51e63 kunlun+0xbfb9e
00138c8c 71a51efc kunlun+0xc1e63
00138cc4 71a51b90 kunlun+0xc1efc
00138d34 71a4fc81 kunlun+0xc1b90
00138d74 762d459a kunlun+0xbfc81
00138d90 762d2900 imm32!CreateInputContext+0x195
00138db8 762d1e8c imm32!InternalImmLockIMC+0xca
00138dc8 762d34ae imm32!ImmLockIMC+0xf
00138dec 750cd9e7 imm32!ImmSetActiveContext+0x62
00138e08 750cadf9 user32!FocusSetIMCContext+0x28
0013905c 750c75b7 user32!ImeSystemHandler+0x31f
00139084 750c75ed user32!ImeWndProcWorker+0x2c9
001390a4 750c62fa user32!ImeWndProcW+0x29
001390d0 750c6d3a user32!InternalCallWinProc+0x23
00139148 750c6de8 user32!UserCallWinProcCheckWow+0x109
001391a4 750c6e44 user32!DispatchClientMessage+0xe0
001391e0 76ea010a user32!__fnDWORD+0x2b
001391f4 00fe7ae0 ntdll!KiUserCallbackDispatcher+0x2e
001392d8 750f10d3 0xfe7ae0
001392fc 750f1125 user32!CreateDialogIndirectParamAorW+0x33
*** ERROR: Module load completed but symbols could not be loaded for notepad++.exe
00139328 00516a73 user32!CreateDialogParamW+0x49
0013934c 750caa3c notepad__+0x116a73
00139400 750c8a5c user32!_CreateWindowEx+0x210
0013943c 0041ee1c user32!CreateWindowExW+0x33
0013a7cc 00584fd4 notepad__+0x1ee1c
0013a7e4 00584fa0 notepad__+0x184fd4
0013a7e8 00400000 notepad__+0x184fa0
0013a7ec 00040d60 notepad__
0013a7f0 00110d3c 0x40d60
0013a7f4 00000000 0x110d3c
</code></pre>

<p>最后的操作在msctf中等待某个事件，msctf 是 Microsoft Text Service；回溯调用栈，看见imm32（Input Method Manager）相关的调用，看来这个无响应的现象与输入法有关系。而 stack 中出现的 kunlun.ime 是必应输入法。</p>

<p>试试把正在使用的必应输入法卸载后重启，系统就正常了。重新安装必应输入法，重启后系统又出现无响应现象。</p>

<p>但比应输入法已经使用了一段时间了，为什么开始没有出现问题呢？回忆了一下，大概是在安装了 <a href="http://synergy-project.org/">Synergy</a> 之后出现的，Synergy共享鼠标键盘，也许有可能与输入法产生冲突。尝试一下，卸载synergy后，即使安装必应，系统也正常。看来可以确认是两者冲突，试了 Synergy 1.4.16/17/18 几个64bit版本都不能与 Bing IME 1.6.98.04 工作。</p>

<p>Ok，对我来说问题解决了，进一步的不再深究。这次学会了使用 WinDbg 查看调用栈的简单操作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting start with sbt]]></title>
    <link href="http://aleung.github.io/blog/2014/12/26/getting-start-with-sbt/"/>
    <updated>2014-12-26T17:17:50+08:00</updated>
    <id>http://aleung.github.io/blog/2014/12/26/getting-start-with-sbt</id>
    <content type="html"><![CDATA[<p>A shortened sbt tutorial for beginner and quick reference.</p>

<h2 id="directory-structure">Directory structure</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">lib/
</span><span class="line">project/
</span><span class="line">  Build.scala
</span><span class="line">  plugins.sbt
</span><span class="line">src/
</span><span class="line">  main/
</span><span class="line">    resources/
</span><span class="line">    scala/
</span><span class="line">    java/
</span><span class="line">  test/
</span><span class="line">built.sbt</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Source code can be placed in the project’s base directory. But usually people organize them into directory structure.</p>

<p>sbt by default uses the same directory structure as Maven for source files, all under <code>src/</code>.</p>

<p>sbt build definition files include <code>build.sbt</code> in project’s base drectory and other <code>.sbt</code> or <code>.scala</code> files in <code>project/</code> subdirectory.</p>

<p>The <code>project</code> directory <em>is another project embedded</em> which knows how to build the outer project. So it may have its <code>build.sbt</code> and <code>project</code> directory structure, which is recursive. <em>The build definition is an sbt project.</em></p>

<h2 id="running">Running</h2>

<p>Common sbt commands:</p>

<ul>
  <li>clean</li>
  <li>compile</li>
  <li>test</li>
  <li>testOnly &lt;testcase&gt;*</li>
  <li>run &lt;argument&gt;*</li>
  <li>package</li>
  <li>reload</li>
</ul>

<p>sbt can ran in interactive mode or batch mode. In batch mode, specifying a space-seperated list of commands. For commands that take arguments, enclosing the command and arguments in quotes.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span class="nv">$ </span>sbt clean compile <span class="s2">&quot;testOnly TestA TestB&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Prefixing a command with <code>~</code> will make the command run when any source files change. Press enter to stop watching for changes.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">&gt; ~ compile
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="build-definition">Build definition</h2>

<h3 id="sbt-build-definition-basic">.sbt build definition basic</h3>

<h4 id="project">Project</h4>

<p><code>build.sbt</code> defines one or more <code>Project</code>s, which hold a list of Scala expressions called <code>settings</code>.</p>

<p>Top-level objects and classes are not allowed in <code>build.sbt</code>. Those should go in the <code>project/</code> directory as full Scala source files.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">lazy</span> <span class="k">val</span> <span class="n">commonSettings</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class="line">  <span class="n">organization</span> <span class="o">:=</span> <span class="s">&quot;com.example&quot;</span><span class="o">,</span>
</span><span class="line">  <span class="n">version</span> <span class="o">:=</span> <span class="s">&quot;0.1.0&quot;</span><span class="o">,</span>
</span><span class="line">  <span class="n">scalaVersion</span> <span class="o">:=</span> <span class="s">&quot;2.11.4&quot;</span>
</span><span class="line"><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="k">lazy</span> <span class="k">val</span> <span class="n">root</span> <span class="k">=</span> <span class="o">(</span><span class="n">project</span> <span class="n">in</span> <span class="n">file</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">)).</span>
</span><span class="line">  <span class="n">settings</span><span class="o">(</span><span class="n">commonSettings</span><span class="k">:</span> <span class="k">_</span><span class="kt">*</span><span class="o">).</span>
</span><span class="line">  <span class="n">settings</span><span class="o">(</span>
</span><span class="line">    <span class="n">name</span> <span class="o">:=</span> <span class="s">&quot;hello&quot;</span>
</span><span class="line">  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>On the left, <code>name</code>, <code>version</code> and <code>scalaVersion</code> are <em>keys</em>. Keys have a method called <code>:=</code>, which returns a <code>Setting[T]</code>, where <code>T</code> is the value type.</p>

<h4 id="keys">Keys</h4>

<p>There are three flavors of key: <code>SettingKey[T]</code>, <code>TaskKey[T]</code> and <code>InputKey[T]</code>.</p>

<p>A <code>TaskKey[T]</code> is said to define a <em>task</em>. </p>

<p>A <code>InputKey[T]</code> defines a <em>input task</em>, which parses user input and produce a task to run.</p>

<p>For a setting, the value will be computed once at project load time. For a task, the computation will be re-run each time the task is executed.</p>

<p>Built-in keys are fields in object <code>sbt.Keys</code>, which are implicitly imported so can be directly referred.</p>

<p>Custom keys may be defined with their respective creation methods: <code>settingKey</code>, <code>taskKey</code>, and <code>inputKey</code>. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">lazy</span> <span class="k">val</span> <span class="n">hello</span> <span class="k">=</span> <span class="n">taskKey</span><span class="o">[</span><span class="kt">Unit</span><span class="o">](</span><span class="s">&quot;An example task&quot;</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="k">lazy</span> <span class="k">val</span> <span class="n">root</span> <span class="k">=</span> <span class="o">(</span><span class="n">project</span> <span class="n">in</span> <span class="n">file</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">)).</span>
</span><span class="line">  <span class="n">settings</span><span class="o">(</span>
</span><span class="line">    <span class="n">hello</span> <span class="o">:=</span> <span class="o">{</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Hello!&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class="line">  <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="bare-sbt-build-definition">Bare .sbt build definition</h3>

<p><em>Bare .sbt build definition</em> is an old style which is not recommended to use.</p>

<p>Bare .sbt build definition doesn’t explicitly define a <code>Project</code>, it implicitly deines one based on the location of the <code>.sbt</code> file. The <code>.sbt</code> file consists of a list of <code>Setting[_]</code> expressions.</p>

<p>Before sbt 0.13.7, settings must be separated by blank lines.</p>

<h2 id="library-dependencies">Library dependencies</h2>

<p>To add unmanaged dependencies, simplily drop jar files in <code>lib/</code>.</p>

<p>Managed dependencies are specified by <code>libraryDependencies</code> key in <code>build.sbt</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="n">groupID</span> <span class="o">%</span> <span class="n">artifactID</span> <span class="o">%</span> <span class="n">revision</span> <span class="o">%</span> <span class="n">configuration</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If you use double %% between the groupID and artifactID, sbt will add your project’s Scala version to the artifact name.</p>

<p>Assuming the scalaVersion for your build is 2.11.1, the following adds <code>org.scala-tools:scala-stm_2.11.1:0.3</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">&quot;org.scala-tools&quot;</span> <span class="o">%%</span> <span class="s">&quot;scala-stm&quot;</span> <span class="o">%</span> <span class="s">&quot;0.3&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By default, if omitted, configuration is “compile”. A common used value is “test”.</p>

<p>sbt uses Apache Ivy to implement managed dependencies. Advanced usage of revision and configuration can follow Ivy document.</p>

<p>sbt uses the standard Maven2 repository by default. To add additional repository, add a <code>resolver</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">resolvers</span> <span class="o">+=</span> <span class="s">&quot;Local Maven Repository&quot;</span> <span class="n">at</span> <span class="s">&quot;file://&quot;</span><span class="o">+</span><span class="nc">Path</span><span class="o">.</span><span class="n">userHome</span><span class="o">.</span><span class="n">absolutePath</span><span class="o">+</span><span class="s">&quot;/.m2/repository&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">resolvers</span> <span class="o">+=</span> <span class="s">&quot;Sonatype OSS Snapshots&quot;</span> <span class="n">at</span> <span class="s">&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="multiple-projects">Multiple projects</h2>

<p>Multiple projects can be grouped under one project. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">lazy</span> <span class="k">val</span> <span class="n">root</span> <span class="k">=</span> <span class="o">(</span><span class="n">project</span> <span class="n">in</span> <span class="n">file</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">)).</span>
</span><span class="line">  <span class="n">aggregate</span><span class="o">(</span><span class="n">util</span><span class="o">,</span> <span class="n">core</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="k">lazy</span> <span class="k">val</span> <span class="n">util</span> <span class="k">=</span> <span class="n">project</span>
</span><span class="line">
</span><span class="line"><span class="k">lazy</span> <span class="k">val</span> <span class="n">core</span> <span class="k">=</span> <span class="n">project</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Each sub-project has its own directory. In above example the directory name is same as the project’s ID. The following is a more explicit way: </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">lazy</span> <span class="k">val</span> <span class="n">core</span> <span class="k">=</span> <span class="n">project</span> <span class="n">in</span> <span class="n">file</span><span class="o">(</span><span class="s">&quot;core&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>If a project is not defined for the root directory in the build, sbt creates a default one that aggregates all other projects in the build. </p>

<p>A project may depend on other projects:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="k">lazy</span> <span class="k">val</span> <span class="n">core</span> <span class="k">=</span> <span class="n">project</span><span class="o">.</span><span class="n">dependsOn</span><span class="o">(</span><span class="n">util</span><span class="o">,</span> <span class="n">api</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>foo dependsOn(bar)</code> means that the <code>compile</code> configuration in foo depends on the <code>compile</code> configuration in bar. You can declare other configuraiton dependency, for example, <code>dependsOn(bar % "test-&gt;test;compile-&gt;compile")</code>.</p>

<h2 id="using-plugins">Using plugins</h2>

<p>Declares the plugin dependency in <code>project/plugins.sbt</code>. The file name can be different, you may create one sbt file for one plugin.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">addSbtPlugin</span><span class="o">(</span><span class="s">&quot;com.typesafe.sbt&quot;</span> <span class="o">%</span> <span class="s">&quot;sbt-site&quot;</span> <span class="o">%</span> <span class="s">&quot;0.7.0&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ivy Introduction for Maven User]]></title>
    <link href="http://aleung.github.io/blog/2014/12/26/ivy-introduction-for-maven-user/"/>
    <updated>2014-12-26T01:11:52+08:00</updated>
    <id>http://aleung.github.io/blog/2014/12/26/ivy-introduction-for-maven-user</id>
    <content type="html"><![CDATA[<p>由于 sbt 使用 Ivy 做依赖管理，必须了解一下 Ivy 的基础知识。这里从熟悉 Maven 的用户的角度简单描述一下 Ivy。</p>

<h2 id="section">共同点</h2>

<p>Maven的功能要比 Ivy 多很多，Maven 既管 build 也管依赖，而Ivy 仅仅是负责依赖管理。但就在依赖管理方面，两者在概念、模型、功能等方面都还是比较相似的。</p>

<p>对于 artifact 的标识，都是使用 groupID, artifactID, version 三元组，不过 Ivy 叫它们为 organization, module name, revision。Ivy 兼容 Maven 2 metadata，可以直接使用 Maven 2 repository。</p>

<h2 id="configuration--scope">Configuration / Scope</h2>

<p>Ivy 有个重要的概念叫 configuration，在 Maven 里类似的对应是 scope，但是 Ivy 的 configuration 比 Maven 的 scope 要灵活得多。</p>

<p>一个模块可以有多个 configuration，每个 configuration 包含一组外部模块依赖的声明（实际的配置是反过来的，每个依赖声明会标识自己在那种 configuration 中生效）。Configuration 可以是跟 Maven scope 类似的 compile, runtime 和 test，也可以任意定义。例如，某个模块既可以支持 Oracle 也可以支持 MySQL，当使用不同数据库时，需要依赖的模块是不同的，就可以分别在 oracle 和 mysql 两个 configuration 中定义各自需要的依赖。</p>

<p>Ivy 的 configuration 在依赖传递管理方面，比 Maven 要强。除了可以定义在一个 configuation 中需要依赖某个模块，还可以定义依赖这个模块时，会使用它的哪个 configuration，只有指定的 configuration 中的依赖才会传递进来。这个机制称为 configuration mapping。</p>

<p>下面的例子中，声明了在 default configuration 中需要依赖 hibernate，并且包含 hibernate 的 proxool 和 oscache 这两种 configuration 中的依赖。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;dependency</span> <span class="na">org=</span><span class="s">&quot;hibernate&quot;</span> <span class="na">name=</span><span class="s">&quot;hibernate&quot;</span> <span class="na">rev=</span><span class="s">&quot;2.1.8&quot;</span> <span class="na">conf=</span><span class="s">&quot;default-&gt;proxool,oscache&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Configuration 可以扩展（继承）另一个 configuration，可以设置外部可见性。</p>

<h2 id="repository">Repository</h2>

<p>Maven 的 repository 必须是网络服务（local 除外，local repository 本质上相当于 cache），Ivy 除了支持Maven 2 repository，也支持指定文件系统路径作为repository，还有各种各样其他的存储方式。</p>

<p>Maven 当配置了多个 repository 时，是按照配置的顺序一一查找，找到 artifact 为止。Ivy 的 artifact 查找是由 resolver 来负责，一个 resolver 对应一个 repository，有些特殊的 resolver 可以将多个 resolver 组合起来使用，例如 chain resolver 和 dual resolver。缺省的 resolver 就是一个 chain resolve，按照 local, shared, public的顺序去访问这些 repository。Ivy 的组织要比 Maven 更灵活一些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API metrics demo]]></title>
    <link href="http://aleung.github.io/blog/2014/12/14/api-metrics-demo/"/>
    <updated>2014-12-14T17:21:17+08:00</updated>
    <id>http://aleung.github.io/blog/2014/12/14/api-metrics-demo</id>
    <content type="html"><![CDATA[<p>This demo uses Graphite and Grafana to store and present API metrics. The demo environment is installed on Ubuntu.</p>

<h2 id="graphite">Graphite</h2>

<p>Graphite has two major components. </p>

<p>The first is <code>carbon-cache</code>, which is a daemon process to receive metrics data from client through TCP connection and store into filesystem via <code>whisper</code> database library.</p>

<p>Another one is a webapp. It provides HTTP API for generating graphs and retrieving raw data.</p>

<p>Since Ubuntu 14.04, it’s easy to install graphite with <code>apt-get</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo apt-get update
</span><span class="line">sudo apt-get install graphite-web graphite-carbon
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Both <code>carbon</code> and <code>graphite-web</code> are installed as python module. </p>

<p>Start carbon:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo service carbon-cache start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Graphite-web is base on django framework. Read <code>/usr/share/doc/graphite-web/README</code> for how to setup graphite-web. A major steps is to create database and default data:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo graphite-manage syncdb
</span><span class="line">sudo chown _graphite:_graphite /var/lib/graphite/graphite.db
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For testing Graphite, you can start Graphite with the Django lightweight Web server for development:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo -u _graphite /usr/bin/django-admin runserver --settings graphite.settings 0.0.0.0:8080
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To install on Apache, follow the guide in <code>/usr/share/doc/graphite-web/README</code>. </p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo apt-get install libapache2-mod-wsgi
</span><span class="line">sudo cp /usr/share/graphite-web/apache2-graphite.conf /etc/apache2/sites-available/graphite-web.conf
</span><span class="line">sudo a2ensite graphite-web
</span><span class="line">sudo service apache2 restart
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Graphite-web 0.9.12 only works under URL root path, it conflict with Apache default site setting. I modify <code>/etc/apache2/sites-enabled/graphite-web.conf</code> to make it work in a virtual host on port 81.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="apache"><span class="line"><span class="nb">Listen</span> <span class="m">81</span>
</span><span class="line"><span class="nt">&lt;VirtualHost</span> <span class="s">*:81</span><span class="nt">&gt;</span>
</span><span class="line"> ...
</span><span class="line"><span class="nt">&lt;/VirtualHost&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Reference:</p>

<ul>
  <li>https://www.digitalocean.com/community/tutorials/how-to-install-and-use-graphite-on-an-ubuntu-14-04-server</li>
</ul>

<h2 id="grafana">Grafana</h2>

<p>Download grafana package and extract to a directory. Configure Apache web server to make the grafana directory accessable.</p>

<p>Edit <code>config.js</code> (copy from <code>config.sample.js</code>) to enable graphite as datasource.</p>

<p>Because graphite-web is hosting on virtual host on port 81, which is different than where grafana is hosting, there is cross site script access restriction. Have to enable CORS (cross origin resource sharing) on graphite-web side.</p>

<p>Enable Apache mod_headers:</p>

<p>~~~ sh
sudo a2enmod headers
~~~</p>

<p>Add into <code>/etc/apache2/sites-enabled/graphite-web.conf</code>:</p>

<p>~~~ apache
Header set Access-Control-Allow-Origin “*”
Header set Access-Control-Allow-Methods “GET, OPTIONS”
Header set Access-Control-Allow-Headers “origin, authorization, accept”
~~~</p>

<h2 id="elasticsearch">Elasticsearch</h2>

<p>Elasticsearch is used by Granfan as a database to persistent dashboard configuration. Search and analystics features of Elasticsearch isn’t used in this case. Without Elasticsearch Grafana still works, but unable to save any change to dashboard design. You have to export dashboard JSON and import next time you want to use it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.4.1.deb
</span><span class="line">sudo dpkg -i elasticsearch-1.4.1.deb
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Elasticsearch is not starting on bootup by default. To setup as service, run:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo update-rc.d elasticsearch defaults 95 10
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To start manually, run:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line">sudo /etc/init.d/elasticsearch start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To enable CORS (cross origin resource sharing), add below into <code>/etc/elasticsearch/elasticsearch.yml</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="l-Scalar-Plain">http.cors.enabled</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="demo">Demo</h2>

<p>The scala script <code>feed_graphite.scala</code> generates mock API metrics data for demo. The Grafana portal is defined as <code>api.json</code>. Both files are stored in this <a href="https://gist.github.com/aleung/1ec7e56bfa9448af920b">gist</a>.</p>

<p><img src="http://aleung.github.io/blog/attachments/2014/12/api-metrics-demo.png" alt="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014广马数据分析]]></title>
    <link href="http://aleung.github.io/blog/2014/11/26/2014-guangzhou-marathon-analysis/"/>
    <updated>2014-11-26T07:38:06+08:00</updated>
    <id>http://aleung.github.io/blog/2014/11/26/2014-guangzhou-marathon-analysis</id>
    <content type="html"><![CDATA[<p><em>Updated 2014-11-27: 之前漏了一些号码段，重新补上更新了。</em></p>

<p>2014广州马拉松在网上可以根据号码查询成绩和名次了，但是没有开放完整成绩册的数据下载。出于好奇，想知道成绩的分布：跑330以内的有多少人？400呢？有多少人最后关门一刻才冲线的？于是写了个程序把数据抓下来分析。</p>

<p><img class="right" src="http://aleung.github.io/blog/attachments/2014/11/groups.png" /></p>

<p>数据不包含号码以0开头的专业选手（大概几十人）。由于不知道确切号码段，没完赛选手的数据有可能有误。</p>

<p>首先是各组的人数，男女比例全马约8:1，半马约3.6:1。跑步的妹子相对还是比较少，女子只要完赛了，总能够拿到个几百名的名次的 :)</p>

<p>然后看成绩分布。</p>

<p>半程组里有15%男选手和22%女选手未能完成比赛，而全程组不能完赛的男女选手比例分别是14%和21%。不一定是女子毅力不行，是相同的关门时间对女子更困难些吧。但有意思的是虽然全程更痛苦，但完成率跟半程是基本上一样的。</p>

<p>半马组，一半的男选手在2:30内跑完，一半的女选手在2:45内跑完。全马组，这个数字是男子5:00，女子5:20。有能力5小时内跑完全程的，已经强过一半的人了。</p>

<p>有几十人是过了关门时间才冲线的，依然有成绩，看来组委会还不是那么不近人情。</p>

<p><img src="http://aleung.github.io/blog/attachments/2014/11/half-marathon.png" /></p>

<p><img src="http://aleung.github.io/blog/attachments/2014/11/marathon.png" /></p>

<p>能跑330是什么水平？400呢？看看下面的表格，比例是表示有多少人在这个时间内完赛。</p>

<ul>
  <li>男子全程</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: right">时间</th>
      <th style="text-align: right">比例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">3:30</td>
      <td style="text-align: right">4.0%</td>
    </tr>
    <tr>
      <td style="text-align: right">4:00</td>
      <td style="text-align: right">15.6%</td>
    </tr>
    <tr>
      <td style="text-align: right">4:30</td>
      <td style="text-align: right">32.1%</td>
    </tr>
    <tr>
      <td style="text-align: right">5:00</td>
      <td style="text-align: right">52.0%</td>
    </tr>
    <tr>
      <td style="text-align: right">5:30</td>
      <td style="text-align: right">67.2%</td>
    </tr>
    <tr>
      <td style="text-align: right">6:00</td>
      <td style="text-align: right">85.5%</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>女子全程</li>
</ul>

<table>
  <thead>
    <tr>
      <th style="text-align: right">时间</th>
      <th style="text-align: right">比例</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">3:30</td>
      <td style="text-align: right">1.3%</td>
    </tr>
    <tr>
      <td style="text-align: right">4:00</td>
      <td style="text-align: right">5.7%</td>
    </tr>
    <tr>
      <td style="text-align: right">4:30</td>
      <td style="text-align: right">17.1%</td>
    </tr>
    <tr>
      <td style="text-align: right">5:00</td>
      <td style="text-align: right">38.6%</td>
    </tr>
    <tr>
      <td style="text-align: right">5:30</td>
      <td style="text-align: right">58.0%</td>
    </tr>
    <tr>
      <td style="text-align: right">6:00</td>
      <td style="text-align: right">78.2%</td>
    </tr>
  </tbody>
</table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[是灰霾吗？]]></title>
    <link href="http://aleung.github.io/blog/2014/09/16/smog/"/>
    <updated>2014-09-16T23:53:29+08:00</updated>
    <id>http://aleung.github.io/blog/2014/09/16/smog</id>
    <content type="html"><![CDATA[<p>看 Google Maps 上面的卫星图，珠江新城一带一片灰蒙蒙，但是有个奇怪的现象：高层建筑的楼顶似乎会清晰一些。</p>

<p><img src="http://aleung.github.io/blog/attachments/2014/9/smog.png" /></p>

<p>在图上最显眼的超高层建筑就是东塔和西塔了，东塔目前仍在建（好像已经封顶了），不知道卫星图是什么时候的，看起来也起码建得跟西塔一样高了。查了一下西塔（IFC-广州国际金融中心）的高度是440米。在图上看出西塔的2/3高度以下要灰一些，另外在建的东塔和旁边一个同样在建但高度只有1/3左右的建筑的屋顶的清晰度也有对比。是不是因为接近地面的灰霾影响了通透度，而灰霾主要沉积在距离地表二三百米以内的低空？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlantUML 简介]]></title>
    <link href="http://aleung.github.io/blog/2014/08/23/plantuml/"/>
    <updated>2014-08-23T16:57:33+08:00</updated>
    <id>http://aleung.github.io/blog/2014/08/23/plantuml</id>
    <content type="html"><![CDATA[<p>关于PlantUML的简介。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/38238529" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/aleung/plantuml" title="PlantUML" target="_blank">PlantUML</a> </strong> from <strong><a href="http://www.slideshare.net/aleung" target="_blank">aleung</a></strong> </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting the Hang of Web Typography]]></title>
    <link href="http://aleung.github.io/blog/2014/08/23/getting-the-hang-of-web-typography/"/>
    <updated>2014-08-23T10:34:11+08:00</updated>
    <id>http://aleung.github.io/blog/2014/08/23/getting-the-hang-of-web-typography</id>
    <content type="html"><![CDATA[<p>读书笔记摘抄：《<a href="http://book.douban.com/subject/25741532/">众妙之门——网页排版设计制胜秘诀</a>》</p>

<h1 id="section">版式设计</h1>

<p>正文字号常见为12~14px。</p>

<p>标题与正文字号（font-size）的比例，比较流行的平均值是1.96。也就是将正文文字字号乘以2，就得到标题文字的字号。字号从传统值（6,7,8,9,10,11,12,14,16,18,21,24,36,48,60,72）或者斐波那契数列（8,13,21,34,55）中选择，可以得到更自然的版式效果。</p>

<p>计算行宽的简单方法：行宽=字号*30。如果字号是10px，行宽就是300px，差不多等于一行65个字。</p>

<p>行高（line-height）受多种因素的影响：字体、字号、粗细、样式、行宽、字距等。行宽越宽，行高就需越大；字号越大，行高就需要越小。比较流行的行高与字号的比例是1.5。</p>

<p>段间距通常是行高的75%左右。</p>

<h1 id="section-1">字体分类</h1>

<p>网页设计中大多数字体可以分为五大类别：</p>

<h3 id="geometric-sans-">Geometric Sans 无衬线几何字体</h3>

<p><img src="http://aleung.github.io/blog/attachments/2014/8/geometric.jpg" /></p>

<p>这个类别实际包括了几何风格（Geometric）、现实风格（Realist）和奇异风格（Grotesk）三类字体。它们基于精准几何形体，每个字母笔画的宽度都是一样的，这种设计生动体现了“少即是多”的极简派的设计思想。</p>

<ul>
  <li>运用得当：干净、感性、现代而通用；</li>
  <li>运用不当：冰冷、理性、枯燥。</li>
</ul>

<p><em>Examples of Geometric/Realist/Grotesk Sans:</em> Helvetica, Univers, Futura, Avant Garde, Akzidenz Grotesk, Franklin Gothic, Gotham.</p>

<h3 id="humanist-sans-">Humanist Sans 无衬线人文字体</h3>

<p><img src="http://aleung.github.io/blog/attachments/2014/8/humanist.jpg" /></p>

<p>由手写体衍化而来，它们中的一些可能看上去干净而现代，但仍旧保留了一些手写体的特点。一般具有更多细节、更少的一致性，而且字体较窄笔画偏粗。</p>

<ul>
  <li>运用得当：既现代又人文；</li>
  <li>运用不当：缺乏力度，不够权威。</li>
</ul>

<p><em>Examples of Humanist Sans:</em> Gill Sans, Frutiger, Myriad, Optima, Verdana.</p>

<h3 id="old-style-">Old Style 古体字</h3>

<p><img src="http://aleung.github.io/blog/attachments/2014/8/old-style.jpg" /></p>

<p>特点是粗细笔画间的对比微妙，还有字母的弧度朝左偏。</p>

<ul>
  <li>运用得当：古典，传统而易读；</li>
  <li>运用不当：依然是古典和传统（与其他不协调）。</li>
</ul>

<p><em>Examples of Old Style:</em> Jenson, Bembo, Palatino, Garamond(尤其显得传统)</p>

<h3 id="transitional-and-modern-">Transitional and Modern 过渡体和现代体</h3>

<p><img src="http://aleung.github.io/blog/attachments/2014/8/trans.jpg" /><img src="http://aleung.github.io/blog/attachments/2014/8/modern.jpg" /></p>

<p>这两类字体是启蒙思想的产物，字体设计师尝试改变平凡而低调的古体字的字形，使其变得更具几何特点、更锐利、更艺术。</p>

<ul>
  <li>运用得当：展现出力量感、时尚感和活力；</li>
  <li>运用不当：不伦不类——若说古典，又过于显眼和繁复；若说现代，又显得有点俗气。</li>
</ul>

<p><em>Examples of transitional typefaces:</em> Times New Roman, Baskerville.</p>

<p><em>Examples of Modern serifs:</em> Bodoni, Didot.</p>

<h3 id="slab-serifs-">Slab Serifs 带衬线的板式字体</h3>

<p><img src="http://aleung.github.io/blog/attachments/2014/8/slab.jpg" /></p>

<p>笔画与其他衬线字体很像（形式简洁，笔画粗细对比相对微弱），但较为特别的是笔画末端有又方又硬的衬线。</p>

<p>这类字体可以传达出一种权威感，如Rockwell字体的粗体；也可以展现出友好的感觉，如Archer。独特的块状衬线能为版面带来特别的气息，不过一旦用错也尤为显眼。</p>

<p><em>Examples of Slab Serifs:</em> Clarendon, Rockwell, Courier, Lubalin Graph, Archer.</p>

<h3 id="reference">Reference:</h3>

<ul>
  <li><a href="what-font">What Font Should I Use?</a></li>
  <li>Making Sense of Type Classification (<a href="type-class-1">part 1</a>) (<a href="type-class-2">part 2</a>)</li>
</ul>

<h1 id="css-font-stack">CSS Font Stack</h1>

<p>创建字体栈的基本公式：最佳字体 + 次佳字体 + 常见的相似字体 + 相似的网页安全字体 + 通用字体。</p>

<p>在字体栈中要注意字体的字形比例。例如网页安全字体中，Verdana字形很宽，Arial/Helvetica相对较窄，它们不应该同时存在于版式中；Times和Georgia也是同理。</p>

<p>常见的字体栈参看 <a href="http://www.smashingmagazine.com/2009/09/22/complete-guide-to-css-font-stacks/">Guide to CSS Font Stacks</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跑步日記]]></title>
    <link href="http://aleung.github.io/blog/2014/06/21/run/"/>
    <updated>2014-06-21T18:19:08+08:00</updated>
    <id>http://aleung.github.io/blog/2014/06/21/run</id>
    <content type="html"><![CDATA[<p>今天難得的陰天，早上下過雨，溫度30℃出頭，沒有早幾天那麽酷熱，也有點風。
磨磨蹭蹭，早上10點半才出發。熱身段過後，按5’30”配速，從江灣橋過河南，沿江邊一直往東跑。</p>

<p>過了廣州塔，就到獵德大橋，大概10km位置。這時我面臨著一個艱難的選擇：上橋，就過到珠江新城然後沿江邊往回走，穿過二沙島回家，這是跑過好多次的路線，大概十七八公里左右。如果直走，就一直要到琶洲大橋才能過橋，到了北岸往回跑，要到家路程估計有近30公里，這時我從沒有跑過的距離。在我的大腦還在激烈思想鬥爭的時候，雙腿肌肉已經作出了決定——直走。</p>

<p>考慮到前路漫漫，將速度下降到5’50”。這時接近正午時分，雖然沒有太陽直射，人也比較熱，心率上升到接近160。找賣水的地方，但琶洲一帶很荒蕪，估算著也撐到過了琶洲橋後也沒問題。</p>

<p>13.5km處上橋，這橋真長，足足一公里。過了琶洲大橋下來，14.6km，去超市買運動飲料喝，停了幾分鐘。這麽一停下來，就沒法重新跑起來了，完全不想動。繼續跑後氣喘得很厲害，隔夜風爐都吹得著，腳擡不起，步頻下降了很多。將速度下降到6’30”了，希望能夠慢慢適應過來。堅持了一段，毫無起色，終於在過了華南大橋底，到了17km處放棄了。不清楚為什麼買水停了一下後狀態會突然變得那麽差，看回數據，過橋前的速度還是保持得比較平穩的5’50”左右。以前我也有經驗是不能停，一旦停下就很難重新回復狀態，但慢慢適應一段時間後還是可以的，這次完全不行。</p>

<p>找不到廁所，鑽進樹叢裏面尿尿。舒暢完後渾身酥軟，一轉身沒站穩跟身後樹幹長滿刺的木棉樹來了個親密接觸。</p>

<p>沿著江邊走，中午很寧靜，人不多，只有知了在不知疲倦的叫。突然覺得這個環境很舒服，享受一下時光吧，在榕樹陰下的石凳坐下，冰冷的石頭冷卻著大腿的肌肉，涼風吹拂身上的汗水。出來跑步什麼都沒有帶，不用再習慣性的拿手機來看，就讓時間的碎片留白，就是那樣靜坐著，看著開闊的江面，感覺那TMD不就是幸福麽。所以人都是自己感動自己的，要不哪來那麽多感人的事情。</p>

<p>歇了一會，將運動飲料全喝完了，感覺恢復了一些，起來繼續跑一下，邊跑盤算著後面還能再跑多遠。但是，跑累了的時候就是靠內心去堅持的，原來一直習慣了喘著氣的狀態，可以一直跑下去，一旦享受過停下休息的舒服後就承受不了之前那種苦了。最後跑到珠江新城地鐵站收官，累計20.5km。後面這段其實心率還在正常範圍，肌肉沒有不適，就是步頻慢了，按理說這個狀態還可以繼續跑上好一段距離的。</p>

<p>另一方面，今天跑的狀態看來確實不是那麽好，跑完幾個小時的感覺比以往跑這個距離要累。
回來看數據，感覺步頻似乎是反應體力狀態的一個直觀指標，從8.4km起步頻明顯下降了一個台階，而14.6km買水後步頻更是嚴重下降。另一方面，心率跟狀態有什麼關聯也還不是很清晰，每次跑步隨著疲勞累積，心率都是不斷升高的。但看以往的記錄，心率到160多速度依然保持的也有。</p>
]]></content>
  </entry>
  
</feed>

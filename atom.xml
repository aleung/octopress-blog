<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Good good study, day day up]]></title>
  <link href="http://aleung.github.com/blog/atom.xml" rel="self"/>
  <link href="http://aleung.github.com/blog/"/>
  <updated>2012-07-07T21:47:55+08:00</updated>
  <id>http://aleung.github.com/blog/</id>
  <author>
    <name><![CDATA[Leo Liang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring bean reference injection definition by external configuration]]></title>
    <link href="http://aleung.github.com/blog/2012/07/07/spring-bean-reference-injection-definition-by-external-configuration/"/>
    <updated>2012-07-07T21:38:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/07/07/spring-bean-reference-injection-definition-by-external-configuration</id>
    <content type="html"><![CDATA[<p>当使用 Spring 作为 IoC framework 的时候，有时会利用 property placeholder 来将bean的注入属性做成可配置化。但是，一般很少会将 reference bean id 也用 property placeholder 代替，有人甚至以为这是不允许的。</p>

<p>利用Spring Framework的property placeholder，将bean依赖关系配置抽离Spring XML文件，就能在产品发布部署后，通过配置选项来选定不同的实现，可用于集成接口、特定业务逻辑打开关闭等。</p>

<p><a href="http://www.oodesign.com/adapter-pattern.html">Adaptor pattern</a> is widely used at the point where our product integrates with external system. Product will provide several adapters to adapt to different external system interface.
We deliver our product in uniform installation package for all customers. A mechanism is required to configure which adapter to be used after system is installed.</p>

<p><a href="http://www.oodesign.com/factory-pattern.html">Factory pattern</a> can be used to create the specific adapter by configuration property. But by this way we need to create factory for each kind of adapters.</p>

<p>Actually Spring Framework already supports it. With property placeholder, it is able to use placeholder in bean reference and resolve the bean name from properties. The bean definition XML file is not allowed to be modified when product is released, because it’s packaged in war/ear. But properties can be modified as long as it’s store outside of the package, e.g. on file system or in configuration management (extend the PropertyPlaceholderConfigurer class).</p>

<p>Here is a sample code snippet:</p>
<div><script src="https://gist.github.com/2934603.js?file="></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; 
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;
    default-autowire=&quot;byType&quot;&gt;

    &lt;context:property-placeholder location=&quot;file:bin/leoliang/spring/test1/bean.properties&quot;/&gt;

    &lt;bean id=&quot;fooA&quot; class=&quot;leoliang.spring.test1.FooImplA&quot; /&gt;
    &lt;bean id=&quot;fooB&quot; class=&quot;leoliang.spring.test1.FooImplB&quot; /&gt;
    
    &lt;bean id=&quot;bar&quot; class=&quot;leoliang.spring.test1.Bar&quot;&gt;
        &lt;property name=&quot;foo&quot; ref=&quot;${foo_bean_id}&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</code></pre></noscript></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件团队工作空间再设计]]></title>
    <link href="http://aleung.github.com/blog/2012/06/30/redesign-of-software-development-workspace/"/>
    <updated>2012-06-30T22:24:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/06/30/redesign-of-software-development-workspace</id>
    <content type="html"><![CDATA[<p>软件团队的办公室空间可以分为三大类：团队工作空间，会议空间，公共区域。</p>

<p>敏捷团队在工作过程中需要有比较多沟通，团队工作空间需要为此准备必要的设施，例如带有白板的讨论区域，这样就不需要讨论一些事情都要跑很远找会议室；供张贴东西的墙面；公共信息显示屏，显示CI状态之类。</p>

<p>每个人的座位当然是越宽敞越好，即使条件限制，最低限度也需要保证可以增加一个人并排坐一起结对编程或讨论问题。因此应该用长条型的桌子，而不是曲尺型的桌子。</p>

<p>不同团队之间的空间有一定的隔离，减少相互影响，因为团队内的讨论对他人是噪音。并且，空间的尺度对心理也有影响，需要合适的尺度，过大的大厅一排排整齐排列的桌子的心理效果不好。</p>

<p>将公共区域，例如休息区、茶水间、打印机等，放在各个区域空间的交汇点，一方面是方便各个区域的人的到达，另外是形成汇聚点，成为人们的交流场所。公司里面需要创造让不同团队成员见面交流的机会。公共区域特别应该是开放性的，不带有物理边界，才能彰显公共属性，例如茶水间休息区与走廊不应该设墙，让它们融合起来，这样大家路过的时候就能够打个招呼聊上几句。休息家具款式可以多样化，颜色也可选择鲜明多彩的，让空间生动有活力。</p>

<p>其实不仅是公共区域，团队区域之间也应该是柔性边界。柔性边界会鼓励人们进入不同的区域，在软件公司里并没有什么理由要为员工进入一个普通区域造成障碍。人从一个大厅进入另一个大厅，心理不会有异样感，但如果要穿过一个门进入一个坐了人的封闭的房间，那他必须是有专门目的才会这样做。</p>

<p>会议室相对团队空间来说，私密性会强一些。在软件公司里开会，白板是很重要的，会议室的白板（或者用玻璃）的面积应该尽量的大，越大越好，画不下要擦掉影响思路，有可能的话将整面墙都做白版。会议室面积小，密闭空间的压抑感会特别严重，用玻璃做墙面可以改善空间感。由于团队工作空间是开放性的，需要多留一些小会议室(quite room)，或者半开放小隔间作为不受干扰的环境来临时使用。</p>

<p>人喜欢在窗户旁边工作：与外界空间的连通感，扩大心理空间，不会有幽闭压抑感；自然采光与通风。因此有窗的空间应该留作给人长时间活动的空间，而不是用作偶然才有人使用的用途，如果用作储物、机房就更浪费了。</p>

<p><em>后记：</em></p>

<p><em>差不多两年前在荷兰工作的时候，对于欧洲的办公环境深有感触，回到国内后就有了这些想法，不过一直没有动笔写下来。期望在国内有类似欧洲的环境在目前显然是不现实的，但如果是在一开始设计办公环境的时候考虑更多人的因素，其实在不增加成本的情况下也能有所改善。最重要的是观念。</em></p>

<p><em>另外还有更早的一篇<a href="http://aleung.github.com/blog/2006/05/12/Each-have-independent-office-with-the-Windows">每人都有带窗户的独立办公室</a>，是在瑞典工作的时候写的。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[migrate my blog to github]]></title>
    <link href="http://aleung.github.com/blog/2012/06/25/migrate-my-blog-to-github/"/>
    <updated>2012-06-25T23:40:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/06/25/migrate-my-blog-to-github</id>
    <content type="html"><![CDATA[<p>个人blog再一次搬家，从 Google Application Engine (GAE) 搬到 github 上来。原来的<a href="http://good-good-study.appspot.com/">地址</a>依然能够访问，但是不会再更新了，新文章都发到这里。Feed订阅地址不变，建议使用Google Reader订阅本站。</p>

<h2 id="section">搬迁原因</h2>

<p>上一次从blogbus搬到GAE，是因为忍受不了审查制度。GAE后来也被墙了，但是即使如此，我也不会为了读者数量而再使用国内的blog服务，在被审查的状态下写东西。</p>

<p>这次搬到github，最主要的动机是为了使用<a href="http://octopress.org/">Octopress</a>这个blog framework。</p>

<h3 id="section-1">好玩</h3>

<p>这个是最重要的原因。写blog不是什么正事，本来就是兴趣而已。之前搬离blogbus，选择了GAE的原因就是尝试一下GAE和PlayFramework编程。这次就是为了尝试Octopress。</p>

<h3 id="markdown">使用markdown写作</h3>

<p>Octopress使用markdown语法。接触markdown语法是在github项目的README页面上，还有<a href="http://stackoverflow.com">StackOverflow</a>里发帖用的也是markdown。刚开始觉得又是另一种wiki语法，但慢慢习惯了发现很好用：语法不太复杂，常用的格式不难记住；基本上常用的格式都覆盖了，实在不行还可以直接写HTML；原始文本的阅读性很好，不像HTML没法直接看；排版容易，文本编辑器就可以，而HTML的WYSIWYG编辑器生成的内容经常格式错乱需要手工再编辑。</p>

<h3 id="section-2">访问速度提高</h3>

<p>原来在GAE上的blog因为访问量少，服务进程闲置一段时间就会关闭，新请求进来要实例化新服务进程。我用的是PlayFramework，每次初始化都要等上十来秒左右，因此打开首个页面一定要等，体验很不好。</p>

<p>Octopress是在本地生成HTML页面后静态发布，速度自然不慢。不过缺省页面模版有些引用的资源下载速度不快，也有些可能被墙了，影响页面加载时间，下一步需要优化一下。</p>

<h3 id="section-3">版本管理与备份</h3>

<p>Octopress最好用的特性就是跟github集成，发布到github上。整个blog就是一个git project，天然就有版本管理了。放在github上，我也不需要考虑备份问题了。</p>

<h3 id="section-4">目前没有被墙</h3>

<p>目前github是可以直接访问的，因此可以方便大陆读者。不过这个是最次要的原因了，因为作为一个优秀的网络服务，github说不定哪天就被GFW给认证了。另外，前面说过页面里面嵌入的某些资源是被墙的，我还没有测试过对访问会带来什么影响。</p>

<h2 id="section-5">搬迁过程</h2>

<p>Octopress的搭建不算难，需要安装ruby和一些gem，按照文档指导，再Google一下就能搞掂。按照文档做了一些配置，也没什么问题。缺省不支持tag，找了两个<a href="https://github.com/robbyedwards/octopress-tag-pages">插件</a>装上去。模版和theme都用缺省的，稍微改了一点点，反正不在乎有没有个性了，我自己做也不一定好看，以后再说吧。缺省style显示不出表格，也需要改一点css。网上的资料不少，遇到问题Google一下大都能找到答案。</p>

<p>然后就是旧文章的迁移了，我原来的blog能够将所有数据用json格式导出，现在就要将它转换成新系统的文件格式；原来的文章正文是HTML，需要转换成markdown语法。不懂ruby，于是找了个python写的转换工具<a href="http://www.aaronsw.com/2002/html2text/">html2txt</a>，自己再写点脚本就好了。</p>

<p>问题还是有一些的：</p>

<p>Post的时间很奇怪：如果精确到秒，Octopress(其实是Jekyll)会认为这是UTC时间，在generate的时候变换为本地时区，页面里的帖子时间就加了8个小时；如果不精确到秒，只是分钟，那它就会当做本地时间而不做变换。我都不知道这是by design还是bug，不懂ruby看了下代码不得要领。后来我就把时间全部都改成只保留到分钟，绕开这个问题算了。</p>

<p>Ruby不支持中文URL，因此有几个问题：</p>

<ol>
  <li>文章URL不能是中文</li>
  <li>tag URL不能是中文</li>
  <li>文章中不能带有中文URL的链接。</li>
</ol>

<p>对于1，可以不用标题而只是用id来做post URL，但我觉得permalink还是用标题更cool一些，将中文翻译成英文好了。Google translate的API不公开了，本来想用Bing translate的API，但它要用OAuth2认证，我嫌要写太多代码了，后来找到有道翻译的API，效果还行。</p>

<p>对于2，因为tag的URL与显示是一致的，不能象post permalink那样做。网上的一些解决方法都比较复杂，不能保证日后升级兼容性，我干脆全部用英文做tag算了。</p>

<p>对于3，搜索了一遍旧文章，只有一个链接是中文的，而且已经失效了，故此也不需要花功夫了。</p>

<p>最后，就是还需要人工去check一遍老文章，看看自动转换的格式有没有问题，顺便回顾一下以前写的东西，有需要修改补充的就更新一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[试验 Octopress 的各种特性]]></title>
    <link href="http://aleung.github.com/blog/2012/06/24/try-octopress-markdown-features/"/>
    <updated>2012-06-24T23:08:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/06/24/try-octopress-markdown-features</id>
    <content type="html"><![CDATA[<p>这个blog使用的markdown解释器是<a href="http://kramdown.rubyforge.org/quickref.html">kramdown</a>，比起标准markdown有所增强。再加上Jekyll的一些插件特供的特殊功能。</p>

<h2 id="markdown">Markdown基本语法</h2>

<h3 id="section">标题</h3>

<p>标题用<code>#</code>开头，一个井号是一级标题，两个井号是二级标题，井号越多字体越小。</p>

<p>一级标题也可以通过在标题的下一行用<code>========</code>来标注，二级标题就是<code>---------</code>。更小的标题就不能用这种方式了。</p>

<h3 id="section-1">链接</h3>

<p>格式：</p>

<pre><code>[text](link)
</code></pre>

<h3 id="section-2">图片</h3>

<p>与链接类似，区别是前面增加叹号<code>!</code>：</p>

<pre><code>![text](link)
</code></pre>

<p>另一种图片语法是由插件支持的，用<code>{</code> <code>%</code>包围的img标签，后面跟着图片URL，在URL前可以加入可选的css class名称，如：<code>left</code>, <code>right</code>，得到文字环绕效果。</p>

<h3 id="blockquote">引用 (blockquote)</h3>

<p>用<code>&gt;</code>开头的一个段落：</p>

<blockquote>
  <p>Stay hungry…
stay foolish.</p>
</blockquote>

<p>用四个空格缩进的段落，会按原始格式显示，相当于HTML的<code>&lt;pre&gt;</code>的效果：</p>

<pre><code>+----+
|    |
+----+
</code></pre>

<p>也可以通过在原始格式引用段落的前后各加一行波浪号<code>~~~~~~</code>来实现。(这是kramdown特有的语法)</p>

<h3 id="section-3">显示效果</h3>

<p>用<code>*</code>或<code>_</code>包围的文字会用斜体显示：</p>

<p>Some of these words <em>are emphasized</em>.</p>

<p>如果双重符号<code>**</code>或<code>__</code>则会用粗体显示：</p>

<p>Use two asterisks for <strong>strong emphasis</strong>.</p>

<p>用<code>`</code>包围的文字按代码格式显示。</p>

<h3 id="section-4">列表</h3>

<p>用<code>*</code>, <code>+</code>, <code>-</code>开头的行都会作为列表项。子项缩进两个空格。</p>

<ul>
  <li>加号开头的段落
    <ul>
      <li>缩进两个空格，加号开头
        <ul>
          <li>再缩进两个空格，三级项目</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>其次</li>
</ul>

<h2 id="section-5">表格</h2>

<p>注意第二行的分割线的冒号位置，决定了这一列的对齐方式。</p>

<pre><code>No.   | Name    | Status  |
-----:|:--------|:-------:|
1     | Alaph   | done    |
2     | Beta    | ongoing |
10000 | Release | n/a     | 
</code></pre>

<p>效果：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: right">No.</th>
      <th style="text-align: left">Name</th>
      <th style="text-align: center">Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">1</td>
      <td style="text-align: left">Alaph</td>
      <td style="text-align: center">done</td>
    </tr>
    <tr>
      <td style="text-align: right">2</td>
      <td style="text-align: left">Beta</td>
      <td style="text-align: center">ongoing</td>
    </tr>
    <tr>
      <td style="text-align: right">10000</td>
      <td style="text-align: left">Release</td>
      <td style="text-align: center">n/a</td>
    </tr>
  </tbody>
</table>

<h3 id="section-6">脚注</h3>

<p>增加脚注<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>很简单，就是这样：<code>[^1]</code></p>

<p>脚注定义的写法是以<code>[^1]: </code>开头，后面跟着定义。</p>

<h2 id="section-7">嵌入代码</h2>

<p>下面的嵌入代码的方式都是由插件提供的，并非markdown语法。</p>

<h3 id="section-8">代码高亮</h3>

<pre><code> ``` [language] [title] [url] [link text]
 code snippet
 ```
</code></pre>

<p>效果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>HelloWorld.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello, World&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="gist">嵌入Gist</h3>

<div><script src="https://gist.github.com/2934603.js?file="></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; 
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;
    default-autowire=&quot;byType&quot;&gt;

    &lt;context:property-placeholder location=&quot;file:bin/leoliang/spring/test1/bean.properties&quot;/&gt;

    &lt;bean id=&quot;fooA&quot; class=&quot;leoliang.spring.test1.FooImplA&quot; /&gt;
    &lt;bean id=&quot;fooB&quot; class=&quot;leoliang.spring.test1.FooImplB&quot; /&gt;
    
    &lt;bean id=&quot;bar&quot; class=&quot;leoliang.spring.test1.Bar&quot;&gt;
        &lt;property name=&quot;foo&quot; ref=&quot;${foo_bean_id}&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</code></pre></noscript></div>

<p>方法是写一个用<code>{</code> <code>%</code>包围的gist标签，后面带上id。</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>脚注一定会显示在最末尾。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些读书记录]]></title>
    <link href="http://aleung.github.com/blog/2012/06/09/Some-reading-record/"/>
    <updated>2012-06-09T11:56:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/06/09/Some-reading-record</id>
    <content type="html"><![CDATA[<p>前几个月看了些软件开发相关的书，读的时候有时有感悟就发条tweet，在这里备份一下。  </p>

<h3 id="httpbookdoubancomsubject6526454"><a href="http://book.douban.com/subject/6526454/">梦断代码</a></h3>

<p>开始阅读《梦断代码》，一个历时多年的软件项目惨败的故事。其实类似的案例很多很多，不过大家都不愿意承认失败，或者将失败轻描淡写而已。</p>

<p>可复用软件之梦有一悖论：几乎总能找到一段满足大部分需要的代码，但这些拿来的代码所不能做到的部分，恰是本项目与众不同的创新之处。</p>

<p>软件开发的时间估算始终是恒久难题，敏捷方法能做到的只是对于短期估算有改善：通过任务切分和开发团队亲自估算让数值看起来可靠些，通过计算迭代速率等手段让估算值反映团队近期状态；但对于长期估算，答案依然是：你丫别问了，到时自然就知道。</p>

<p>《梦断代码》讲了一帮聪明人是怎么把事情搞砸的。因此我非常感兴趣Linux项目是怎么运作的，Linus怎么把这么多聪明人弄到一起合作，而且似乎成效相当不错。</p>

<p>在周五下班的地铁上看完了《梦断代码》，没有做计划也没有刻意定目标，但已经是在周五读完的第三本书，每周一本。就像连续三个叠代都准时交付。</p>

<h3 id="httpbookdoubancomsubject5406042"><a href="http://book.douban.com/subject/5406042/">设计原本</a></h3>

<p>一个设计，一个人能完成就不要让其他人参与，增加的人手会削弱设计的一致性，概念的完整性。一个职责，一个部门负责就好，多部门合作带来各自的利益考虑和冲突。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《程序员的思维修炼》读书笔记]]></title>
    <link href="http://aleung.github.com/blog/2012/06/05/The-programmer-thought-of-uniting-the-reading-notes/"/>
    <updated>2012-06-05T22:27:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/06/05/The-programmer-thought-of-uniting-the-reading-notes</id>
    <content type="html"><![CDATA[<p>《<a href="http://book.douban.com/subject/5372651/">程序员的思维修炼—-开发认知潜能的九堂课</a>》，国内书商起个怪名字，其实重点在副标题。 原书标题根本不是这样的。</p>

<h2 id="dreyfus">德雷福斯(Dreyfus)技能模型</h2>

<h3 id="novice">新手(Novice)</h3>

<p>新手缺乏经验，完成任务时需要操作指引。</p>

<p>即使某人在一个领域上工作了十年，对所有指引已经了然于心，但他只是不断重复执行指令，也依然是新手。</p>

<h3 id="advanced-beginner">高级新手(Advanced beginner)</h3>

<p>能执行要做的任务并根据需求学习新任务，但没对任务环境获得更广泛的概念上的理解，缺乏全局思维。</p>

<p>高级新手占了绝大部分比例，但他们常高估自己，因为不知道自己不知道什么。</p>

<h3 id="competent">胜任者(Competent)</h3>

<p>胜任者能够独立解决问题。</p>

<h3 id="proficient-practitioner">精通者(Proficient practitioner)</h3>

<p>精通者懂得反思，自我纠正，从自己和他人的经验中学习。</p>

<h3 id="expert">专家(Expert)</h3>

<p>专家凭直觉工作，基于他们在领域中的丰富经验，在恰当的情景中选取和应用这些经验。</p>

<p>专家对问题思考时将所有方面作为一个完整和独特的整体来考虑，而不仅是关注相关方面。</p>

<p>处理问题时，新手需要指引(instruction)，专家依靠直觉。不给新手指引，或者要求专家跟随指引，都会降低生产力。</p>

<p><em>按照前面说那个技能模型的定义，看看自己，在大部分领域都只是高级新手，少量能到胜任者，连精通都算不上。</em></p>

<h2 id="section">隐性思维</h2>

<p><em>原文中为R型思维，R指右脑，但作者认为左右脑区分并非真实情况，将L解释为线性(linear)模式R解释为富(rich)模式。我按照自己的理解将R型思维看成隐性思维。</em></p>

<p>发挥隐性思维，捕获闪现灵感，随时准备着记录下来。</p>

<p>隐性思维会被压抑，在一种思维不受控制的状态下，隐性思维才会发挥作用。</p>

<p>重视你的直觉，但要去验证它，而不是盲目在第一时间跟随直觉行动。</p>

<p>隐性思维是非线性的，它从你的记忆库中匹配关联，多学习接触不同类别的东西，为隐性思维累积素材。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用手机遥控Linux后台播放豆瓣电台]]></title>
    <link href="http://aleung.github.com/blog/2012/03/10/By-mobile-phone-remote-control-Linux-backstage-radio-broadcast-requirements/"/>
    <updated>2012-03-10T00:35:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/03/10/By-mobile-phone-remote-control-Linux-backstage-radio-broadcast-requirements</id>
    <content type="html"><![CDATA[<p>最近买了一个<a href="http://en.wikipedia.org/wiki/Asus_EeeBox_PC">EeeBox</a>来做home server，装Ubuntu操作系统，有不少东西可以玩。</p>

<p>其中一个用途是连接到音响播放音乐。我比较喜欢听豆瓣电台，于是找一个豆瓣电台的客户端。Home server平常不接显示器，也不启动图形界面，常见的浏览器客户端、桌面客户端都不能用，要找命令行的。在github上找到Johnny Huang开发的<a href="https://github.com/hzqtc/fmd">fmd</a>（Douban FM daemon），启动后在后台运行，正合我意。Fork下来给它增加了个安装脚本，能够安装为服务，开机就自动运行了。但fmd只是个后台进程，只有telnet命令接口，没法对它进行直接控制的，作者另外做了个命令行工具，叫做fmc（FMD client），用来控制fmd。但命令行工具在我这里也还是不能用—-没有显示器没有键盘—-必须能遥控才行。于是我在fmc基础上给它增加了一个web UI，称为<a href="https://github.com/aleung/fmweb">fmweb</a>，通过手机浏览器访问，就可以控制播放了。于是，我现在在家里任何地方，都可以控制我的豆瓣电台的播放，不喜欢听，跳下一首歌。</p>

<p>这是在Android浏览器上的截图，在iPhone、iPad上也可以用。</p>

<p><img src="https://lh6.googleusercontent.com/-ishGby7lpTk/T1ove7Z0-rI/AAAAAAAAAoU/94_iFdmfSKw/s400/Screenshot_2012-03-09-23-41-13.png" alt="" /><img src="https://lh5.googleusercontent.com/-zXp_XdbbgNk/T1ovfpnkxbI/AAAAAAAAAoc/CN-7dV4U4Xg/s400/Screenshot_2012-03-09-23-55-39.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在亚马逊买电脑主板，故障退货的经历及总结]]></title>
    <link href="http://aleung.github.com/blog/2012/02/25/In-the-amazon-bought-the-computer-motherboard-and-summarizes-the-experience-of-fault-return/"/>
    <updated>2012-02-25T19:58:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/02/25/In-the-amazon-bought-the-computer-motherboard-and-summarizes-the-experience-of-fault-return</id>
    <content type="html"><![CDATA[<p>为了给老台式电脑升级，在Amazon买了主板、CPU、内存，但装起来加电后不亮。根据现象分析，主板故障的可能性最大，主板是华擎H61M-HVS。拿去华擎网站上列出的本地特约维修中心检查。那里的人说亚马逊网上买的他们不管，跟他沟通了一下，他才勉为其难的测试了一下，查出是主板故障，贴了张故障标签就算了。问他是否能出检测报告之类，我好退货，他说不行，本来检测都不是他们的责任。</p>

<p>想找Amazon客服咨询，才发现根本没有客服热线，只能上网。幸好智能手机能上网，在订单退货的页面里能够呼叫客服。客服回电话倒是非常快，说了情况后她让我保留好维修中心的故障标签，给我办理了退货申请。我现在就等着退货了。</p>

<p>就这次经历总结一下：</p>

<ol>
  <li>买回来的新主板就有故障，让我对华擎的质量失去信心。后来我就买了华硕的主板，一线品牌可能可以放心些。</li>
  <li>华擎（好多其他电脑配件厂商也一样）的售后服务是要求通过原销售店家进行的，但亚马逊并不负责售后，因此出现故障后能否得到有效的服务很难说。我这次幸好还在7天退货期内，可以找亚马逊退货，假如超过7天，我都不知道该如何送修。这点的责任我觉得更多在厂商，他们还没有重视网络电子商务市场。因此消费者在购买这类商品的时候要慎重考虑，要么在实体店买，要么选择明确支持直接全国联保无需通过经销商的品牌。</li>
  <li>亚马逊的客服态度和处理都令我满意。结合以前网购的经历，亚马逊在网站、送货、支付、退货各环节都做得不错，是体验最好的。当然，这次我还要等到退货完成，退款成功后才能下最后结论。</li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[延长洁厕宝(蓝泡泡)使用时间的小技巧]]></title>
    <link href="http://aleung.github.com/blog/2012/02/19/Extend-the-toilet-bowl-cleaning-treasure-blue-bubble-use-of-the-time-small-skills/"/>
    <updated>2012-02-19T23:33:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/02/19/Extend-the-toilet-bowl-cleaning-treasure-blue-bubble-use-of-the-time-small-skills</id>
    <content type="html"><![CDATA[<p>以前马桶放的洁厕宝（蓝泡泡）总是不耐用，声称普通使用可达一个月，但实际上头几天冲的水颜色很深，一个星期后颜色就非常淡了，根本用不到一个月，原因是溶解速度控制不了，太快了。</p>

<p>为了防止过快溶解，给洁厕宝增加一个”外套”。我选的是大开口的口香糖盒子，大小比较合适，能把整块洁厕宝放进去，瓶口合上比较严实。在瓶身开上几个直径3～5mm左右的洞，洞不能太小也不能太大。开始可以先开三四个，如果实验发现洁厕宝溶解不出来再加开几个。怎么开洞就看你手上有什么工具了，我试过几种工具，发现用美工刀最容易，三刀开出一个三角形的洞。做好后把洁厕宝放进去，盖上盖子，扔马桶水箱里就行了。因为盒子里有空气，可能它不会自己沉下去，需要把它按进水里，把空气排出来。水箱里有水垢，不是那么好看，就不把照片贴出来了。</p>

<p><img src="https://lh4.googleusercontent.com/-c5HKYk_j34o/T0EL4Y6tMcI/AAAAAAAAAnY/YnGOTSAfDBY/s800/toilet_%201%20%281%29.jpg" alt="" /><img src="https://lh4.googleusercontent.com/-xujCGkefLQY/T0EL5g-crrI/AAAAAAAAAng/aVK2tmecsC0/s800/toilet_%202%20%281%29.jpg" alt="" /><img src="https://lh3.googleusercontent.com/-lDnmsRQFEiQ/T0EL7i1DpCI/AAAAAAAAAno/GCn5dEHM9dc/s800/toilet_%203%20%281%29.jpg" alt="" /></p>

<p>加了”外套”后，效果相当显著，一颗洁厕宝大概能用三个月。去年家人出差多，竟然用了半年！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[白云山跑步]]></title>
    <link href="http://aleung.github.com/blog/2011/12/26/Baiyun-mountain-running/"/>
    <updated>2011-12-26T00:50:00+08:00</updated>
    <id>http://aleung.github.com/blog/2011/12/26/Baiyun-mountain-running</id>
    <content type="html"><![CDATA[<p>最近几个周末都跑超过10公里的长距离，但珠江边跑多了已经没有新鲜感。另外最近一段时间空气污染情况又偏高了，虽然头顶阳光灿烂，看远眺整个城市低空都笼罩在一层灰霾之中。于是就把目光投向了白云山：一方面离开市中心，也有高度，空气会好些；另外跑有坡度的路线，可以起到不一样的锻炼效果。</p>

<p>以往去珠江边跑，我都是从住处附近就开始跑，最后跑回家，因此可以穿短衣短裤。但去白云山跑来回都得坐车，穿衣就是个问题。为此专门去迪卡侬买了长袖跑步上衣和紧身7分跑步裤。本来还想买跑步背包的，没得卖，登山背包不适合跑步，只好算了。回来在网上查一下，似乎全国的店都没有卖跑步背包，看了现在玩户外hiking的人多了，但跑步得还是少数。这次背了自行车包，效果还行，没有腰带有点左右晃动，但只是放一件衣服重量不大，对跑步没什么影响。</p>

<p>从外语学院附近的西门进白云山，已经下午4点多，周末到白云山的人真多，路上游客络绎不绝。新买的衣裤很显眼，引来不少注目，所以很多人都建议买点貌似专业的装备，可以有助于坚持锻炼。</p>

<p>路线记录在<a href="http://runkeeper.com/user/aleung/activity/63723897">RunKeeper</a>，有地图和海拔、速度曲线。</p>

<p>西门上山的路是最平缓的，至明珠楼前的2km没有多少上升，正好作为热身。过了明珠楼，就是正式上山路了，2公里上升了150米，上坡时的步速在每公里6分钟多到7分钟多左右，步频大概坚持在160～170，但步幅缩得很小了。绕摩星岭有东西两条路，我先是选择了东面的路，在接近6km处经过了这段路的最高点275米，接下来的路就比较平缓了，上下坡交替，坡度没有前面大，下坡路我跑得很欢。这段路视野开阔，先是看到京溪、梅花园一带的楼房，然后拐过弯，就看到了天河的中信等高楼。看着笼罩在一片灰蒙蒙之中的高楼已经在脚下，感觉很爽。跑了45分钟，7.6km，到达山顶公园。我原计划就是跑到这里为止的，本来以为起码要一个多小时才能到，一停下来，觉得好像不累，还没跑够（其实前面上坡的时候挺吃力的）。从这里如果往南走，就一直是下山路，到云台花园出山，坡度要更大，我不敢跑这样的下坡路，于是回头，还是回外语学院那边好了。接下来的岔路，选择了摩星岭西侧的路，这样走的就是环线，不用全走回头路。没想到后面这一公里多的路真是要命，一路都是上坡，一点平缓都没有。后面有一段我都坚持不了走直线，只能之字形迂回。幸好这段路不长，锦绣南天（雷达站）处到达最高点340米，这一公里上升了90米，上坡步速每公里8～9分钟，比走路快不了多少。接下来就是一路下坡了，跑了一公里多，一直都要控制速度，想着到山底路还长，怕膝盖受不了，不敢继续跑了，就此结束。全程10.64km，耗时1:06:55，平均6.17min/km。</p>

<p>西门这条路跑步上山比较合适，但走路下去就太长了。结束跑的时候差不多6点，太阳下山了，穿回抓绒衣也不冷，但裤子只盖住膝盖，小腿就有点凉。走到明珠楼，看后面的路坡度不大了，又跑了差不多两公里一段。但这段就跑得不算太好，不算累，但小腿偶尔有点要抽筋的感觉，不知道是因为之前上坡时累了还是因为太凉。下次还是走云台花园下山好了，时间短一些。但那边又没有直接回家的公交车，麻烦。今天跑这趟步一共花了4个多小时，如果能够将总时间控制到3小时内就比较好。</p>

<p>今天还戴了心率记录器来跑的，早上迪卡侬买的，配合我已有的心率胸带，USB电脑读数据。谁知回来才发现只能接Windows上，不支持Mac OSX，在虚拟机里也认不到设备。而且RunKeeper也只支持Polar心率表的数据格式，这个就算能连也没用。要拿回去退货了。</p>

<p>第一次跑上山，感觉不错。以后说不定可以尝试一下越野跑，据说龙凤线也可以跑的。不过不敢跑大下坡，膝盖伤过后就承受不了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跑步步频训练软件 RunningCadence 开发小记]]></title>
    <link href="http://aleung.github.com/blog/2011/12/24/Running-training-software-development-XiaoJi-RunningCadence-step-frequency/"/>
    <updated>2011-12-24T00:16:00+08:00</updated>
    <id>http://aleung.github.com/blog/2011/12/24/Running-training-software-development-XiaoJi-RunningCadence-step-frequency</id>
    <content type="html"><![CDATA[<p>在<a href="http://good-good-study.appspot.com/blog/posts/156002">10km跑总结</a>里提到：这次10km跑成绩的提高最重要因素是步频的提高。</p>

<p>在网上看了一些资料，提到提高步频的好处，并指出长跑理想的步频应该在每分钟180步左右，就开始尝试练习提高步频。但是跑起来并不知道怎样的频率才是合适的，还需要有工具测量才行。想到可以用手机的加速度传感器来测量，跑步时把手机绑在手臂上或者拿手上，测量手的摆动周期应该就可以计算出步频。</p>

<p>有了想法后，就考虑怎样实现。先要知道跑步时加速度传感器得到的数据会是怎样的，在market上找到软件Accelero-meter Log，能显出加速度传感器三轴数据的曲线。拿着手机跑了几步看看曲线，发现完全不是想象中那么简单：从曲线可以看出每跑一步的加速度变化，但并不是一步一个脉冲那么理想，而是大脉冲中包含着小脉冲，波形很不规则；更要命的是不同轴测量到的数据频率会不一样，软件应该按那个轴的数据计算？后来才想到不同轴测量数据频率不同的原因是手摆动的频率与身体重心上下移动的频率不一致，只是一半，再加上手的活动太自如了，跑动过程中会有不同的动作，都会引起加速度变化。</p>

<p>上网找到一个开源的Android计步器的代码，看看它怎么做，发现它只是将三个轴的数值加在一起，然后判断变化量。根据前面看得的数据波形，我感觉这样的算法太不靠谱了，再看看这个软件的用户评价，果然不佳。</p>

<p>这时想到Nike的配合iPhone使用的计步器，是藏在鞋里面的。它应该是感应脚的每次着地，而且计步器是固定在鞋里的，有特定的安装方向，因此它可以只检测垂直地面的加速度。想到这里就豁然开朗了，原来测量摆臂的想法是错误的，应该测量脚着地的冲击，也就是垂直方向的加速度。但那个轴才是垂直地面的呢？我不能规定用户使用这个软件时手机摆放的方向啊，他可以绑在臂上，拿在手里，放裤袋中。。。因此首先要解决的问题是如何判断手机的姿态，找出垂直于地面的轴。</p>

<p>人在运动的时候加速度不断变化，但加速度矢量一段时间的累计应该为零，而重力加速度是恒定的，并且垂直于地面，检测出重力加速度的方向就ok了。具体实现的方法也比较简单：对传感器三个轴的数据分别做截止频率为0.25Hz的低通滤波后，数值最大的那个轴应该就是最接近于垂直地面的。</p>

<p>还有个问题是手机加速度传感器的采样频率能到多高？是否能满足要求？长跑理想的着地次数是每分钟180次，相当于3Hz，一般人都只会比这个慢。实测我的Nexus One使用最短采样间隔时大约30~50ms能获取到一组数据，也就是采样频率大于20Hz，对于检测3Hz的信号完全足够。</p>

<p>对于复杂波形的处理方法，同样是简单的一阶低通滤波，截止频率取了3.5Hz，相当于每分钟210次着地。高频干扰通过滤波削弱后，相邻波峰的时间间隔就是两次着地的时间间隔了。具体实现时，波峰判断会比较麻烦，采样检查是否超过阈值来代替。本来想按振幅比例来设定阈值的，但算振幅也比较麻烦，之前检测重力加速度时已经得到重力加速度在测量轴上的分量，直接拿它的1/2做阈值就好了。这样做还带来了一个没有预料到的副作用：走路时脚步比较轻，超不过阈值，因此软件还能知道当前是否处于跑步状态。</p>

<p>步频数据算出来以后其他的就好办了。跑步时不方便看屏幕，通过语音合成播放出来。设定目标步频，语音提示应该加快还是减慢。还打算过增加个目标步频的节拍音，当实际步频与目标不一致时播放出来，不过软件用了这段时间，感觉有语音播报步频基本上已经足够了，暂时不做以后再说吧。</p>

<p>这个软件项目的网站： <a href="http://code.google.com/p/running-cadence/">http://code.google.com/p/running-cadence/</a></p>

<p>软件发布在Android Market:<a href="https://market.android.com/details?id=leoliang.runningcadence">https://market.android.com/details?id=leoliang.runningcadence</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NoClassDefFoundError]]></title>
    <link href="http://aleung.github.com/blog/2011/11/24/NoClassDefFoundError/"/>
    <updated>2011-11-24T17:35:00+08:00</updated>
    <id>http://aleung.github.com/blog/2011/11/24/NoClassDefFoundError</id>
    <content type="html"><![CDATA[<p>java.lang.NoClassDefFoundError 是个很讨厌的错误，你会发现明明它报告的class已经打包进应用里，没可能在classpath中找不到，然后百思不得其解。其实这个exception跟 ClassNotFoundException 不同，后者报告的类是真的找不到，而这个NoClassDefFoundError 的错误原因是：class loader无法加载这个类，因为它依赖的另外某些类无法找到。到底是什么类找不到？它不告诉你。</p>

<p>例如，看这个exception stack trace:</p>

<pre><code>Caused By: java.lang.NoClassDefFoundError: net/sf/cglib/proxy/Enhancer
        at org.springframework.aop.framework.Cglib2AopProxy.createEnhancer(Cglib2AopProxy.java:228)
        at org.springframework.aop.framework.Cglib2AopProxy.getProxy(Cglib2AopProxy.java:170)
        at org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:112)
        at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.createProxy(AbstractAutoProxyCreator.java:476)
        at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:362)
        at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:322)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:407)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1426)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
</code></pre>

<p>cglib.jar是在classpath里的，真正错误原因是CGLIB所依赖的asm.jar不存在。</p>

<p>有什么好方法查出NoClassDefFoundError的root cause吗？我不知道。不用Maven管理依赖的后果啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nike Lunar Run 10公里跑总结]]></title>
    <link href="http://aleung.github.com/blog/2011/11/15/Nike-Lunar-Run-10-/"/>
    <updated>2011-11-15T21:34:00+08:00</updated>
    <id>http://aleung.github.com/blog/2011/11/15/Nike-Lunar-Run-10-</id>
    <content type="html"><![CDATA[<p>11月12日，完成了Nike Lunar Run 10公里跑，这是我第二次参加计时的跑步活动。其实准确的说，只是9.5km跑，因为赛道长度不足10km，多人的GPS测量结果和在Google Maps上面量度距离都证明了这点，但是官方公布的成绩又比实际冲线时计时显示的时间多了大约两分钟，大概是换算出10km的时间。</p>

<p>上一次参加10公里跑是2009年，成绩为58:30，当时定下了目标要提高到55:00（看<a href="http://good-good-study.appspot.com/blog/posts/4216">这篇博客</a>），也就是每公里5分30秒的步速。这次出来的成绩却是意想不到的好，官方公布的成绩是48:29，可能还需要减去过起跑线之前的10来秒，我自己的GPS只记录到8公里处就停止了（<a href="http://runkeeper.com/user/aleung/activity/59561069">RunKeeper</a>），总之步速大约是每公里4分50秒的样子。我之前从来没有想过步速可以迈进5分钟每公里大关的，对这个速度已经非常满意，下次再跑也没有速度目标了，保持这个水平并且不要受伤就好，希望能够尝试一下更长的距离。</p>

<p>虽然名字叫做Lunar Run，比赛是在早上9点进行的。前半程自己感觉状态并不好，步频提不到每分钟170～180步的目标，还不如平常晚上训练的感觉好。也许是早上活动不开，应该热身多一些才行。但跟两年前比较，整个过程跑下来轻松很多，09年那次到最后2公里有点拖着腿熬下来的感觉，最后看着终点在前面都完全没有办法加速了。因为怕最后会跑不动，这次一路上都有点留力，跑到最后一两公里时感觉有余力，还想最后500米可以加速冲一下的，结果一个不留神发现终点已经到了。</p>

<p>成绩提高首先是因为平常的训练增加了，最近一个多月基本保持每周跑两到三次。最重要的因素应该是提高步频的训练，以前习惯低步频大步幅，特别是跑到累的时候脚步沉了更是想靠增大步幅来弥补，最近知道这样不对后才有意识的提高步频，特别是前两个星期做了个Android应用来测量步频，按照180的目标来训练，速度明显提升，膝盖也基本不会怎么痛。我现在还是没办法达到180的步频，一般只能在160～170左右，但已经比以前好不少了。现在跑步的时候基本上就是默念着一件事情：保持步频。只要步频不降下去，速度就不会太慢，也能够压抑着增大步幅的欲望。另外还有些技巧性的因素：上次排在比较后的位置起跑，跑道上人太拥挤了，只能用比走路快不了太多的速度挪动，这次有经验就尽量往起跑区的前面靠，本来在第二区的，后来跟着人穿进了第一区，排在第一区的较前位置起跑，起跑跑出一两百米后就不会受人阻挡了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dump beans information from live Spring application context]]></title>
    <link href="http://aleung.github.com/blog/2011/11/08/Dump-beans-information-from-live-Spring-application-context/"/>
    <updated>2011-11-08T18:42:00+08:00</updated>
    <id>http://aleung.github.com/blog/2011/11/08/Dump-beans-information-from-live-Spring-application-context</id>
    <content type="html"><![CDATA[<p>To maintain the Spring application context in a large application is not an easy job. There may be dozens of beans, whenever you want to make changes, you have to be very clear on there dependency. After serveral rounds of update, some beans might be orphan, they’re unused any more but you don’t know.</p>

<p>Spring IDE provides bean cross reference view and bean graph view that can help to analysis the bean relationship. But what Spring IDE has is a static view of the beans. In our project the application context is complicated: it scans classpath for all bean definition XML files and load them; application context created in WAR package inherits parent application context which is defines in EJB classpath; some beans are marked with annotation and loaded by <context:component-scan>, rather than define in XML file. I doubt Spring IDE can show the dynamic bean view as it is in runtime. What&#8217;s more, Spring IDE isn&#8217;t available at our standard development environment.</context:component-scan></p>

<p>Inspired by a StackOverflow <a href="http://stackoverflow.com/questions/5850639/how-to-keep-track-of-all-the-autowired-stuff-while-using-spring-ioc/5851872#5851872">answer</a>, I created an ApplicationContextDumper. Add it into application context, it will dump all beans and their dependencies in the current context and parent contexts (if any) into log file when the application context initialization finishes. It also lists the beans which aren’t referenced.</p>

<div><script src="https://gist.github.com/1347171.js?file=ApplicationContextDumper.java"></script>
<noscript><pre><code>package leoliang.springtest;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.support.AbstractRefreshableApplicationContext;

public class ApplicationContextDumper implements ApplicationContextAware {

    private Map&lt;String, Integer&gt; beanReferenceCounter = new HashMap&lt;String, Integer&gt;();
    private StringBuilder outputMessage;

    @Override
    public void setApplicationContext(ApplicationContext context) throws BeansException {
        outputMessage = new StringBuilder();
        beanReferenceCounter.clear();
        outputMessage.append(&quot;--- ApplicationContextDumper begin ---\n&quot;);
        dumpApplicationContext(context);
        dumpBeansWithoutReference();
        outputMessage.append(&quot;--- ApplicationContextDumper end ---\n&quot;);
        System.out.print(outputMessage);
    }

    private void dumpBeansWithoutReference() {
        outputMessage.append(&quot;Beans without reference:\n&quot;);
        for (String bean : beanReferenceCounter.keySet()) {
            if (beanReferenceCounter.get(bean) == 0) {
                outputMessage.append(&quot;  &quot;).append(bean).append('\n');
            }
        }
    }

    private void initBeanReferenceIfNotExist(String beanName) {
        Integer count = beanReferenceCounter.get(beanName);
        if (count == null) {
            beanReferenceCounter.put(beanName, 0);
        }
    }

    private void increaseBeanReference(String beanName) {
        Integer count = beanReferenceCounter.get(beanName);
        if (count == null) {
            count = new Integer(0);
        }
        beanReferenceCounter.put(beanName, ++count);
    }

    private void dumpApplicationContext(ApplicationContext context) {
        // Read context id isn't available. https://jira.springsource.org/browse/SPR-8816
        String appContextInfo = String.format(&quot;ApplicationContext %s : %s&quot;, context.getId(), context.getClass()
                .getName());
        ApplicationContext parent = context.getParent();
        if (parent != null) {
            appContextInfo += String.format(&quot; -&gt; %s&quot;, parent.getId());
        }
        outputMessage.append(appContextInfo).append('\n');

        ConfigurableListableBeanFactory factory = ((AbstractRefreshableApplicationContext) context).getBeanFactory();
        for (String beanName : factory.getBeanDefinitionNames()) {
            if (factory.getBeanDefinition(beanName).isAbstract()) {
                continue;
            }
            initBeanReferenceIfNotExist(beanName);
            Object bean = factory.getBean(beanName);
            outputMessage.append(String.format(&quot;  %s : %s\n&quot;, beanName, bean.getClass().getName()));
            for (String dependency : factory.getDependenciesForBean(beanName)) {
                outputMessage.append(String.format(&quot;    -&gt; %s\n&quot;, dependency));
                increaseBeanReference(dependency);
            }
        }

        if (parent != null) {
            outputMessage.append(&quot;Parent:\n&quot;);
            dumpApplicationContext(parent);
        }
    }

}</code></pre></noscript></div>

<p>Here is an example. We have two application contexts. Please be noticed that the ApplicationContextDumper has been added into applicationContext.xml.</p>

<div><script src="https://gist.github.com/1347171.js?file=applicationContext.xml"></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; 
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;
    default-lazy-init=&quot;false&quot; default-autowire=&quot;byName&quot;&gt;

    &lt;!-- Enable @Autowired --&gt;
    &lt;context:annotation-config/&gt;
    
    &lt;!-- Load all beans with @Repository --&gt;
    &lt;context:component-scan base-package=&quot;leoliang.springtest&quot;/&gt;

    &lt;bean id=&quot;aNormalBean&quot; class=&quot;leoliang.springtest.NormalBean&quot;&gt;
        &lt;property name=&quot;anotherBean&quot; ref=&quot;anotherBean&quot;/&gt;
    &lt;/bean&gt;

    &lt;bean class=&quot;leoliang.springtest.ApplicationContextDumper&quot; /&gt;
&lt;/beans&gt;</code></pre></noscript></div>

<div><script src="https://gist.github.com/1347171.js?file=parentContext.xml"></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;
    &lt;bean id=&quot;abstractBean&quot;  abstract=&quot;true&quot; /&gt;
    &lt;bean id=&quot;anotherBean&quot; class=&quot;leoliang.springtest.AnotherBean&quot; parent=&quot;abstractBean&quot; /&gt;
&lt;/beans&gt;</code></pre></noscript></div>

<p>parentBeanFactory is the parent of myBeanFactory:</p>

<div><script src="https://gist.github.com/1347171.js?file=beanRefContext.xml"></script>
<noscript><pre><code>&lt;beans&gt;
    &lt;bean id=&quot;parentBeanFactory&quot; class=&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;&gt;
        &lt;constructor-arg&gt;
            &lt;list&gt;
                &lt;value&gt;classpath:**/parentContext.xml&lt;/value&gt;
            &lt;/list&gt;
        &lt;/constructor-arg&gt;
    &lt;/bean&gt;
    &lt;bean id=&quot;myBeanFactory&quot; class=&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;&gt;
        &lt;constructor-arg&gt;
            &lt;list&gt;
                &lt;value&gt;classpath:**/applicationContext.xml&lt;/value&gt;
            &lt;/list&gt;
        &lt;/constructor-arg&gt;
        &lt;constructor-arg&gt;
            &lt;ref bean=&quot;parentBeanFactory&quot; /&gt;
        &lt;/constructor-arg&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</code></pre></noscript></div>

<p>In main, loads application context from beanRefContext.xml. </p>

<div><script src="https://gist.github.com/1347171.js?file=main.java"></script>
<noscript><pre><code>    public static void main(String[] args) {
        String[] paths = { &quot;classpath:**/beanRefContext.xml&quot; };
        new ClassPathXmlApplicationContext(paths);
    }
</code></pre></noscript></div>

<p>The application context is dumped in log:</p>

<div><script src="https://gist.github.com/1347171.js?file=output"></script>
<noscript><pre><code>--- ApplicationContextDumper begin ---
ApplicationContext org.springframework.context.support.ClassPathXmlApplicationContext@e1d5ea : org.springframework.context.support.ClassPathXmlApplicationContext -&gt; parentBeanFactory
  org.springframework.context.annotation.internalConfigurationAnnotationProcessor : org.springframework.context.annotation.ConfigurationClassPostProcessor
  org.springframework.context.annotation.internalAutowiredAnnotationProcessor : org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor
  org.springframework.context.annotation.internalRequiredAnnotationProcessor : org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor
  org.springframework.context.annotation.internalCommonAnnotationProcessor : org.springframework.context.annotation.CommonAnnotationBeanPostProcessor
  repositoryBean : leoliang.springtest.RepositoryBean
    -&gt; aNormalBean
  aNormalBean : leoliang.springtest.NormalBean
    -&gt; anotherBean
  leoliang.springtest.ApplicationContextDumper#0 : leoliang.springtest.ApplicationContextDumper
Parent:
ApplicationContext parentBeanFactory : org.springframework.context.support.ClassPathXmlApplicationContext
  anotherBean : leoliang.springtest.AnotherBean
Beans without reference:
  repositoryBean
  org.springframework.context.annotation.internalAutowiredAnnotationProcessor
  org.springframework.context.annotation.internalCommonAnnotationProcessor
  org.springframework.context.annotation.internalConfigurationAnnotationProcessor
  org.springframework.context.annotation.internalRequiredAnnotationProcessor
  leoliang.springtest.ApplicationContextDumper#0
--- ApplicationContextDumper end ---</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RAW照片后期处理的常用操作]]></title>
    <link href="http://aleung.github.com/blog/2011/09/27/RAW-/"/>
    <updated>2011-09-27T22:33:00+08:00</updated>
    <id>http://aleung.github.com/blog/2011/09/27/RAW-</id>
    <content type="html"><![CDATA[<p>这里讲的是 Apple Aperture 3 的操作，但其他RAW处理软件（如Photoshop Lightroom）的功能和效果也都类似，可以参考。</p>

<h2 id="exposure">Exposure</h2>

<h3 id="exposure-1">Exposure</h3>

<p>黑位固定，直方图右侧拉伸。相当于相机的曝光量调整。</p>

<p><img src="https://lh6.googleusercontent.com/-fnAGXvmnFJE/ToHQKWlruvI/AAAAAAAAAZ0/O4pdxnS64yY/s800/exposure-1.jpg" alt="" />》<img src="https://lh5.googleusercontent.com/-FP6Vg1nAOWI/ToHQKRFOhtI/AAAAAAAAAZ4/0lESY5sW318/s800/exposure-2.jpg" alt="" /></p>

<h3 id="recovery">Recovery</h3>

<p>利用RAW记录的额外信息恢复高光溢出部分。</p>

<h3 id="black-point">Black Point</h3>

<p>利用RAW记录的额外信息恢复丢失的暗部细节。</p>

<h3 id="brightness">Brightness</h3>

<p>黑位与白位均固定，直方图中间色调左右移动。用于调整图像的整体明暗。与level工具的亮度调节功能类似，但level工具中若只拖动一个锚点时对直方图的影响更加局部，只改变特定色调范围。</p>

<p><img src="https://lh5.googleusercontent.com/-mKyUGov3PCc/ToHQJ9LMS-I/AAAAAAAAAZs/Z7XqqxDgQJk/s800/brightness-1.jpg" alt="" />》<img src="https://lh4.googleusercontent.com/-MWAZLV47es8/ToHQKHGqVNI/AAAAAAAAAZw/B4GjHYLSF_A/s800/brightness-2.jpg" alt="" /></p>

<h2 id="enhance">Enhance</h2>

<h3 id="contrast">Contrast</h3>

<p>中灰不变，直方图向两侧拉伸。（不建议使用，用level工具控制更准确）</p>

<p><img src="https://lh6.googleusercontent.com/-lZY-AgmwRcU/ToHQJ3eBQMI/AAAAAAAAAZo/1lTWE0LHHoA/s800/contrast.jpg" alt="" /></p>

<h3 id="definition">Definition</h3>

<p>增强图像局部的对比度，但不影响整体图像的对比度，直方图无整体性变化。可提高图像明暗交界的细节，例如让云朵更加立体。</p>

<h3 id="saturation">Saturation</h3>

<p>让RGB三原色的直方图趋于重合或者更加离散。用于减弱色彩或者增强色彩(变鲜艳)。饱和度增加时图像细节会丢失。</p>

<p><img src="https://lh6.googleusercontent.com/-EKHur68d4-A/ToHQKvYuHQI/AAAAAAAAAZ8/LRPgisNijDM/s800/saturation-1.jpg" alt="" />》<img src="https://lh3.googleusercontent.com/-NGeEU2MWZwg/ToHQLOXNoBI/AAAAAAAAAaE/hwsr11w3eS0/s800/saturation-2.jpg" alt="" /></p>

<h3 id="vibrancy">Vibrancy</h3>

<p>与saturation类似，但不影响肤色。用于人像照片中的色彩调整，但保持肤色不变。</p>

<h2 id="highlights--shadows">Highlights &amp; Shadows</h2>

<p>降低高光部分亮度，但不影响中间调和暗部；提高暗部亮度，但不影响中间调和亮部。直方图上的效果是高光部分和/或暗部扩展，移向中间调位置，但实际处理并非单纯的直方图映射，运算时会考虑到周边像素的色调的影响。用于对图像中过亮或者过暗的部分进行补偿，增加色调变化细节。</p>

<h2 id="levels">Levels</h2>

<p>将直方图进行映射变换，下横轴是输入，上横轴是输出。Aperture的levels工具可以调节四分之一色调的映射，可以完成部分本来需要使用曲线工具的调节。</p>

<p>Levels调整是在上面几种调整的基础之上进行的，可能会抵消了前面所做的调整的效果。若非必要不应该将它与前面提到的工具混合使用。</p>

<p><img src="https://lh3.googleusercontent.com/-Af7kvdJq3pU/ToHQKit_TwI/AAAAAAAAAaA/1x5cdJ1hZrE/s800/level-1.jpg" alt="" />》<img src="https://lh3.googleusercontent.com/-f0jePRCWRAI/ToHQQCnp4qI/AAAAAAAAAaI/qW_bMiOvGZw/s800/level-2.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apple Aperture 数码照片处理几板斧]]></title>
    <link href="http://aleung.github.com/blog/2011/09/27/Apple-Aperture-/"/>
    <updated>2011-09-27T22:04:00+08:00</updated>
    <id>http://aleung.github.com/blog/2011/09/27/Apple-Aperture-</id>
    <content type="html"><![CDATA[<p><img class="right" src="https://lh5.googleusercontent.com/-MGOVmxQlebs/ToHSOBbvsCI/AAAAAAAAAaQ/ZgUEHwlGelk/s800/aperture3.jpg" /></p>

<p>以前都用Photoshop来处理照片，刚开始用Aperture，还真不太适应，用了几天兼阅读了help，慢慢有些了解了。对于照片的后期处理，其实用什么工具都大同小异，基本上就是几板斧。没拍好的照片也没有必要费心去调，直接删除就得了。</p>

<h2 id="raw">基本原则：使用RAW格式拍摄</h2>

<p>RAW记录了拍摄时的原始信息，而jpg是已经经过相机处理之后的图像。用RAW格式提供了后期处理的更多可能性，例如曝光的增减（当然是小范围内了），白平衡的重新设定。</p>

<h2 id="section">基本调整</h2>

<ul>
  <li><strong>图像倾斜矫正及裁剪</strong>：Viewer下方的工具栏有图标，或者用快捷键G和C。</li>
  <li><strong>色温校准</strong>：相机的自动百平衡经常不太准确，需要在White Balance设置正确色温，常见光源的色温表在<a href="http://good-good-study.appspot.com/blog/posts/152001">这儿</a>；另外用 Enhance － Tint 可以分别调节高光／中间调／暗部的偏色。</li>
  <li><strong>曝光调整</strong>：用快捷键Alt－Shift－H打开暗部与高光溢出显示，调节Exposure让图像曝光正常。Highlights &amp; Shadows可以挽救部分高光、暗部细节。如果要进一步调整，使用Enhance及Level。调整过程中，快捷键M可查看原始图像（Master）作对比。</li>
</ul>

<p>调整方法见<a href="http://good-good-study.appspot.com/blog/posts/153002">RAW照片后期处理的常用操作</a></p>

<h2 id="section-1">其他调整</h2>

<ul>
  <li><strong>色差纠正</strong>（消除紫边）：Chromatic Aberration</li>
  <li><strong>降噪</strong>：Noise Reduction</li>
  <li><strong>图像锐化</strong>：Edge Sharpen</li>
</ul>

<h2 id="section-2">常用快捷键</h2>

<table>
  <thead>
    <tr>
      <th>Key</th>
      <th>Function</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>V</td>
      <td>Switch view mode (browser / split view / viewer)</td>
    </tr>
    <tr>
      <td>I, H</td>
      <td>Show Inspector</td>
    </tr>
    <tr>
      <td>F</td>
      <td>Full screen</td>
    </tr>
    <tr>
      <td>W</td>
      <td>Switch Inspector tab (Library / Metadata / Adjustments)</td>
    </tr>
    <tr>
      <td>Y</td>
      <td>Show metadata</td>
    </tr>
    <tr>
      <td>T</td>
      <td>Show metadata tooltips</td>
    </tr>
    <tr>
      <td>M</td>
      <td>Show master image</td>
    </tr>
    <tr>
      <td>Z</td>
      <td>Zoom 100%</td>
    </tr>
    <tr>
      <td>`</td>
      <td>Loupe</td>
    </tr>
    <tr>
      <td>Alt-Shift-H</td>
      <td>Highlight hot &amp; cold areas</td>
    </tr>
    <tr>
      <td>Alt-F</td>
      <td>Show focus points</td>
    </tr>
    <tr>
      <td>0~5</td>
      <td>Rating</td>
    </tr>
  </tbody>
</table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Color temperature of common light sources]]></title>
    <link href="http://aleung.github.com/blog/2011/09/27/Color-temperature-of-common-light-sources/"/>
    <updated>2011-09-27T19:28:00+08:00</updated>
    <id>http://aleung.github.com/blog/2011/09/27/Color-temperature-of-common-light-sources</id>
    <content type="html"><![CDATA[<p> </p>

<table>
  <thead>
    <tr>
      <th>Temperature</th>
      <th>Typical Sources</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1000K</td>
      <td><strong>Candles</strong>, oil lamps</td>
    </tr>
    <tr>
      <td>2000K</td>
      <td><strong>Very early sunrise</strong>, low effect tungsten lamps</td>
    </tr>
    <tr>
      <td>2500K</td>
      <td><strong>Household light bulbs</strong>(2680K - 40 W incandescent lamp)</td>
    </tr>
    <tr>
      <td>3000K</td>
      <td>Studio lights (continuous), 200 W incandescent lamp, (<strong>3200K - Sunrise/sunset;</strong><strong>3400K - 1 hour from dusk/dawn</strong>, Tungsten lamp)</td>
    </tr>
    <tr>
      <td>4000K</td>
      <td>Clear flashbulbs (now obsolete),<strong>Fluorescent</strong></td>
    </tr>
    <tr>
      <td>5000K</td>
      <td><strong>Typical average daylight</strong>, electronic flash</td>
    </tr>
    <tr>
      <td>5500K</td>
      <td>The sun at noon, (<strong>5500~6000K - vertical daylight</strong>)</td>
    </tr>
    <tr>
      <td>6000K</td>
      <td><strong>Bright sunshine with clear sky</strong></td>
    </tr>
    <tr>
      <td>7000K</td>
      <td><strong>Slightly overcast sky</strong></td>
    </tr>
    <tr>
      <td>8000K</td>
      <td><strong>Hazy sky</strong></td>
    </tr>
    <tr>
      <td>9000K</td>
      <td><strong>Open shade on clear day</strong></td>
    </tr>
    <tr>
      <td>10,000K</td>
      <td><strong>Heavily overcast sky</strong></td>
    </tr>
    <tr>
      <td>11,000K</td>
      <td><strong>Sunless blue skies</strong></td>
    </tr>
    <tr>
      <td>20,000+K</td>
      <td>Open shade in mountains on a really clear day</td>
    </tr>
  </tbody>
</table>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven Lifecycle Concepts]]></title>
    <link href="http://aleung.github.com/blog/2011/08/26/Maven-Lifecycle-Concepts/"/>
    <updated>2011-08-26T11:51:00+08:00</updated>
    <id>http://aleung.github.com/blog/2011/08/26/Maven-Lifecycle-Concepts</id>
    <content type="html"><![CDATA[<p><img src="https://lh5.googleusercontent.com/-d_OZsHIjLe8/TlcV3xzq-DI/AAAAAAAAATE/CGu8uwStu1k/s800/maven-concept.png" alt="" /></p>

<p>(<a href="https://picasaweb.google.com/lh/photo/D_sskYHvn6CgEruCxN6lMdBJO7epb5AqjiUnD_coqoo?feat=directlink">大图链接</a>)</p>

<p>一年前画的，把它电子化方便日后查看。看看有没有空补充些文字说明吧。</p>

<p>Reference:</p>

<ul>
  <li>DZone Refcardz: <a href="http://refcardz.dzone.com/refcardz/apache-maven-2">Apache Maven 2</a></li>
  <li><a href="http://gavin-chen.iteye.com/blog/336607">Maven plugin中的lifecycle、phase、goal、mojo概念及作用的理解</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven artifact repository setup for multiple sites team]]></title>
    <link href="http://aleung.github.com/blog/2011/08/08/Maven-artifact-repository-setup-for-multiple-sites-team/"/>
    <updated>2011-08-08T18:20:00+08:00</updated>
    <id>http://aleung.github.com/blog/2011/08/08/Maven-artifact-repository-setup-for-multiple-sites-team</id>
    <content type="html"><![CDATA[<p>A typical way of adopting Maven to manage artifacts in an organization is to setup a repository manager locally. The repository manager proxies opensource repositories like Maven central from Internet, and hosts release and snapshot repositories for internal artifacts. It works fine in most cases, but when the team locales geographically in more than one site, and the bandwitdth between the sites is limited, or the artifacts are huge in size, the build performance will decrease, because uploading and downloading artifacts to/from the remove repository takes time.</p>

<h2 id="solution-1-pubish-to-master-repository-download-from-local-repository">Solution 1: Pubish to master repository, download from local repository</h2>

<p>Suppose on site A there is already a repository manager A, now site B is setup, what we need is a repository manager on site B that proxies both external repositories and internal repositories. Sonatype Nexus has the capability to aggregate serveral repositories / mirrories and provides download access from a single URL.</p>

<p><img src="https://lh6.googleusercontent.com/-kQ4SwY2UV2s/Tj905hhUlJI/AAAAAAAAASc/hj_0Kxt6CQ0/s800/maven-repo-2sites-solution1.png" alt="" /></p>

<p>By this solution, pom.xml of existing projects aren’t required to be modified. Simply add a <mirror> section with <mirrorof> value set to * into Maven setting.xml for all developers who work in site B. But the publishing of artifacts from site B is still cross sites over slow connection, so mvn deploy is not fully optimized though the download of dependencies is speeded up by cache on local repository manager.</mirrorof></mirror></p>

<h2 id="solution-2-publish-to-local-repository-cross-caching">Solution 2: Publish to local repository, cross caching</h2>

<p>This solution comes from <a href="http://www.sonatype.com/people/2011/07/video-multi-master-configuration-for-nexus/">Sonatype Blog</a>. Artifacts are always publish to repository on local site, each repository is cached by other site’s repository manager.</p>

<p><img src="https://lh4.googleusercontent.com/-XJdyMrSafCM/Tj905psGecI/AAAAAAAAASg/lGJsgsjir7I/s800/maven-repo-2sites-solution2.png" alt="" /></p>

<p>This solution looks good if one artifact is owned by one site. But I’m wondering if it works in the situation that both sites publish the same SNAPSHOT artifact to its local repository manager. For example, foo-1.0.0-SNAPSHOT.jar was already deployed on Repository Manger A, and then on Repository Manager B a newer edition of the jar is deployed, how can site A get the later one?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[确定优先级]]></title>
    <link href="http://aleung.github.com/blog/2011/06/26/Determine-priority/"/>
    <updated>2011-06-26T15:38:00+08:00</updated>
    <id>http://aleung.github.com/blog/2011/06/26/Determine-priority</id>
    <content type="html"><![CDATA[<p>在我们的工作中，不时需要评估工作任务的优先级：例如下个版本的软件应该加入的功能，又或者对之前工作回顾列出的一大堆改进项目，在一轮头脑风暴之后，发现需要做的事情是如此之多，而能投入的资源显得如此至少，怎么挑选出最有价值的事情来做就成了头痛的事。</p>

<p>过往，我们常做的方法是，召集一个会议，大家一起来为每个任务评分：分别评估出任务的工作量级和重要性（1、2、3… 最重要为1），然后将两者相乘得到一个分数，根据这个分数对任务排序。这种做法是期望能找出重要性比较高，但是又不太难完成的任务。但很不幸，越是重要的任务往往工作量越大—-如果有重要而简单的任务，我们早就把它做了，不需要等到这个会议的召开—-得到的分数差距不大。印象中，我参加过的评估会，都没有得出什么有用的结论，最终做的决策似乎跟评估没有太多的关系。</p>

<p>你可能会指出，这个评估模型根本就是不对的，工作量和重要性两者相乘得不出有意义的数字。但我们都不够聪明，没有想到一个足够简单而直观的方法。（回过头来看，应该是我们谁都没有花心思去想过。为什么？为什么？为什么？！）</p>

<p>今天读”<a href="http://book.douban.com/subject/4163938/">More Joel on Software</a>“，第36节介绍了他们用的方法，值得借鉴。</p>

<p>首先评估每项任务的工作量（成本），得到一个数字，其实这个数字是什么单位无所谓，story point也好，$也好，在例子里用的是$，金额。</p>

<table>
  <thead>
    <tr>
      <th>功能</th>
      <th style="text-align: right">成本</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>个性化首页</td>
      <td style="text-align: right">$10</td>
    </tr>
    <tr>
      <td>轻松安排软件开放进程</td>
      <td style="text-align: right">$4</td>
    </tr>
    <tr>
      <td>追踪资金到账时间</td>
      <td style="text-align: right">$5</td>
    </tr>
    <tr>
      <td>允许对bug分叉(fork)</td>
      <td style="text-align: right">$1</td>
    </tr>
  </tbody>
</table>

<p>然后规定每人手上只有限量的资金，例如$20，可以用来购买这些功能。每个人根据自己对功能的重要性判断来决定应该为每个功能分配多少钱。例如：我觉得追踪资金到账时间是没有用的功能，一分钱也不分给它；安排软件开发过程很重要，我愿意出两倍的钱；而允许对bug分叉更重要，出4倍的钱；而个性化首页不是那么重要，所以我只愿意出80%的钱。故此，我的资金这样分配：</p>

<table>
  <thead>
    <tr>
      <th>功能</th>
      <th style="text-align: right">成本</th>
      <th style="text-align: right">销售额</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>个性化首页</td>
      <td style="text-align: right">$10</td>
      <td style="text-align: right">$8</td>
    </tr>
    <tr>
      <td>轻松安排软件开放进程</td>
      <td style="text-align: right">$4</td>
      <td style="text-align: right">$8</td>
    </tr>
    <tr>
      <td>追踪资金到账时间</td>
      <td style="text-align: right">$5</td>
      <td style="text-align: right">$0</td>
    </tr>
    <tr>
      <td>允许对bug分叉(fork)</td>
      <td style="text-align: right">$1</td>
      <td style="text-align: right">$4</td>
    </tr>
  </tbody>
</table>

<p>这个过程其实就是一个已经按照成本加权的优先级评估。每个人在评估时已经综合考虑了成本和重要性。</p>

<p>将每个功能从各人手中获得的资金累加起来，再除以成本，就得到一个投资收益率，很明显，投资收益率最高的功能就是应该最优先做的。</p>

<table>
  <thead>
    <tr>
      <th>功能</th>
      <th style="text-align: right">成本</th>
      <th style="text-align: right">总销售额</th>
      <th style="text-align: right">投资收益率</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>个性化首页</td>
      <td style="text-align: right">$10</td>
      <td style="text-align: right">$45</td>
      <td style="text-align: right">4.5</td>
    </tr>
    <tr>
      <td>轻松安排软件开放进程</td>
      <td style="text-align: right">$4</td>
      <td style="text-align: right">$36</td>
      <td style="text-align: right">9</td>
    </tr>
    <tr>
      <td>追踪资金到账时间</td>
      <td style="text-align: right">$5</td>
      <td style="text-align: right">$12</td>
      <td style="text-align: right">2.4</td>
    </tr>
    <tr>
      <td>允许对bug分叉(fork)</td>
      <td style="text-align: right">$1</td>
      <td style="text-align: right">$7</td>
      <td style="text-align: right">7</td>
    </tr>
  </tbody>
</table>

<p>下次排任务优先级的时候，我们应该尝试一下这种方法。</p>

<p>P.S. 回头再想一下，这个方法其实跟我们以前用的工作量乘以重要性级别的方法本质上是一样的，但是我们过去用的重要性级别1、2、3、4、5没有定量关系，说不出不同级别之间的重要性相差多少倍，因此相乘出来的数字就没有比较价值了。另外，每人手上持有有限量资金进行分配这种方式更接近我们日常的思维模式，调动起人的直觉，类似于planning game。</p>

]]></content>
  </entry>
  
</feed>

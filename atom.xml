<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Good good study, day day up]]></title>
  <link href="http://aleung.github.com/blog/atom.xml" rel="self"/>
  <link href="http://aleung.github.com/blog/"/>
  <updated>2012-12-12T00:50:13+08:00</updated>
  <id>http://aleung.github.com/blog/</id>
  <author>
    <name><![CDATA[Leo Liang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的首個半馬拉松]]></title>
    <link href="http://aleung.github.com/blog/2012/12/11/my-first-half-marathon+%28Autosaved%29/"/>
    <updated>2012-12-11T22:25:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/12/11/my-first-half-marathon (Autosaved)</id>
    <content type="html"><![CDATA[<p>11月18日，廣州首屆馬拉松賽，也是我跑的第一次半馬拉松。過去大半個月了，還是記錄一下吧。</p>

<p>看回以前寫的blog，應該是在2005年底開始跑步的，也不記得當時爲什麼突然有了要經常性跑步的想法。那時傍晚下班後在天河公園跑，跑步是作爲鍛鍊和放鬆，一次跑半小時左右，最多5、6公里，根本不敢想象自己能跑21公里的半馬拉松。雖然跑了好多年，但都是斷斷續續，有時一停就幾個月，跑的頻率也低，最多一週兩次，一直都是維持在只能連續跑5公里左右水平。</p>

<p>2008年下半年腰椎間盤突出，最嚴重時連走路都一瘸一瘸的，當時真害怕恢復不了，沒法再做運動了。幸好恢復得很快，11月起可以慢跑鍛鍊，那兩三個月跑得比較頻密，到年底跑的狀態還不錯，同樣的距離比之前跑得更輕鬆。</p>

<p>2009年開始嘗試跑長一點的距離，跑了幾次8到10公里左右，但也沒堅持訓練。10月份Nike在廣州舉辦10公里跑，第一次參加了正式的長跑活動，成績58:30，完成了自己跑進1小時的目標<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。試過後覺得參加跑步活動很好玩，打算以後都繼續參與。</p>

<p>2010年亞運會，Nike沒有辦跑步活動，2011年11月，Nike又舉辦10公里跑，這次賽前就比較認真的做了兩個月的訓練計劃，專門練習了提高步頻，效果還是比較顯著的，成績比預想的好不少，48:29，步速邁進了5分鐘每公里大關<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<p>那時還報名了2012年2月的香港半程馬拉松，接下來幾個月跑的狀態都很好，週末訓練跑了幾次17、18公里，又跑了上白雲山的路線<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>，感覺信心很足，心中還在盤算着目標定在兩小時還是2:15合適。誰知臨近比賽前兩天開始出現感冒跡象，週六中午到了香港，去領取選手包後就開始發燒，下午晚上都在酒店燒得迷迷糊糊的。週日早上病好了，但也不能去跑步了，第一次半馬拉松就這樣錯過。然後對跑步的興趣又一次陷入低谷，一週跑不了一次。</p>

<p>2012年初就看到廣州11月要舉辦馬拉松賽的消息，但一直到九月初都沒有見到正式籌備工作開展，正在想是否搞不成的時候，官方報名消息就出來了。接下來就維持了一個多月的訓練，11月18日開跑，總的來說比較輕鬆的完成了首次半馬拉松。</p>

<p>跑完時比較興奮，發了好幾條tweets：</p>

<blockquote>
  <p>我的首个半马拉松，官方計時1:51:23，完成了两小时内的目标。前十公里留力比较多，下次可以不用那么保守。</p>
</blockquote>

<blockquote>
  <p>參加大規模長跑活動的感覺跟平常自己跑很不一樣，喜歡跑步的朋友都值得嘗試一下，無所謂速度，能在關門時間前跑完就行了。很多人一起跑，興奮度高很多，超過自己平常速度也會覺得很輕鬆；寬闊的馬路車輛全不見了，讓你暢快的跑在路中心；路旁觀衆的鼓勵讓你心中充滿溫暖。</p>
</blockquote>

<blockquote>
  <p>马拉松赛道上，视障参赛者由引导员陪同赛跑，两人的手用带子系在一起。路上见到好多组，男女都有。看到他们，我觉得很感动，我们跑步，再困难也难不过他们。</p>
</blockquote>

<p>跑完後，又沒有了目標了。不知道以後會不會去跑個全馬，半馬跟全馬的區別還是挺大的，對我來說最重要的是不要把膝蓋跑傷了，享受跑步的樂趣，而不是追求成績。</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://aleung.github.com/blog/2009/09/25/Prepare-10-km-run/">准备10km跑</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://aleung.github.com/blog/2011/11/15/Nike-Lunar-Run-10-/">Nike Lunar Run 10公里跑总结</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://aleung.github.com/blog/2011/12/26/Baiyun-mountain-running/">白云山跑步</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[my-first-half-marathon]]></title>
    <link href="http://aleung.github.com/blog/2012/12/11/my-first-half-marathon/"/>
    <updated>2012-12-11T22:25:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/12/11/my-first-half-marathon</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android: 在應用中設定locale]]></title>
    <link href="http://aleung.github.com/blog/2012/10/06/change-locale-in-android-application/"/>
    <updated>2012-10-06T00:25:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/10/06/change-locale-in-android-application</id>
    <content type="html"><![CDATA[<p>近幾天把以前做的跑步步频训练软件 <a href="https://play.google.com/store/apps/details?id=leoliang.runningcadence">RunningCadence</a> 加上了多語言支持，可以在應用中設定界面以及語音播報所用的語言。</p>

<p>對多語言的支持，Android已經做得很完善，開發者只需要在應用中加入各種locale的資源文件。但是，應用只會使用系統全局設置的locale，而要在應用自己的設定中選擇locale，以及要讓設定立即生效，就需要開發者自己去實現了。</p>

<p>本來，一般應用並沒必要自己提供語言設定，用系統全局設定就好了。但這個 RunningCadence 使用了語音合成(TTS)功能，而一般手機上安裝的TTS引擎支持的語言都有限，如果TTS不支持系統locale的語言，那就聽不到聲音了，所以需要花力氣去搞這個應用內的語言選擇。</p>

<h2 id="localelocale">讓應用啓動時使用自己設定的locale，而非系統locale</h2>

<p>開發應用時要爲不同locale準備不同的資源，在應用中通過 <a href="http://developer.android.com/reference/android/content/res/Resources.html">Resources</a> 類來加載資源，各個界面組件的構建都需要用到資源。而具體資源如何選擇是受 <a href="http://developer.android.com/reference/android/content/res/Configuration.html">Configuration</a> 影響的，Configuration帶有設備的硬件相關配置信息（如屏幕分辨率，屏幕方向）和系統全局配置信息（如locale），由系統底層框架提供。</p>

<p>應用啓動時，Configuration中的locale會被設置爲系統locale。應用若要使用自己的locale，就必須在創建界面之前，將Resources裏的Configuration更改。</p>

<p>這個更改在application的 onCreate() 裏面做最合適，對應用全局生效，因爲它在任何activity創建之前就執行了，不再需要在各個activity裏做任何事情。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="n">setLocale</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setLocale</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="n">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="n">getLocaleFromPref</span><span class="o">();</span>
</span><span class="line">	<span class="n">Locale</span><span class="o">.</span><span class="na">setDefault</span><span class="o">(</span><span class="n">locale</span><span class="o">);</span>
</span><span class="line">	<span class="n">Configuration</span> <span class="n">config</span> <span class="o">=</span> <span class="n">getBaseContext</span><span class="o">().</span><span class="na">getResources</span><span class="o">().</span><span class="na">getConfiguration</span><span class="o">();</span>
</span><span class="line">	<span class="n">overwriteConfigurationLocale</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">overwriteConfigurationLocale</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">config</span><span class="o">,</span> <span class="n">Locale</span> <span class="n">locale</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">	<span class="n">config</span><span class="o">.</span><span class="na">locale</span> <span class="o">=</span> <span class="n">locale</span><span class="o">;</span>
</span><span class="line">	<span class="n">getBaseContext</span><span class="o">().</span><span class="na">getResources</span><span class="o">()</span>
</span><span class="line">			<span class="o">.</span><span class="na">updateConfiguration</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="n">getBaseContext</span><span class="o">().</span><span class="na">getResources</span><span class="o">().</span><span class="na">getDisplayMetrics</span><span class="o">());</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>加了這段代碼後，應用啓動時就會根據 getLocaleFromPref() 返回的語言來顯示了，但是你會發現如果將手機屏幕轉一下，例如豎屏變爲橫屏，界面又會變回系統缺省語言，爲什麼呢？</p>

<p>系統底層框架會在configuration發生了變化時通知應用<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。對application是調用 Application.onConfigurationChanged() 方法。對activity的處理採用那種方式，就與manifest文件中&lt;Activity&gt;的 android:configChanges 屬性配置相關：</p>

<ul>
  <li>如果發生的是configChanges中指定的事件，調用 Activity.onConfigurationChanged()，不重啓activity；</li>
  <li>否則重啓activity。</li>
</ul>

<p>屏幕的旋轉就是一種 runtime change，缺省情況下會觸發activity的重啓，也就是銷毀並重新創建activity<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，重新創建時使用的是新的Configuration，裏面帶的又是系統locale，因此就造成了界面變回系統缺省語言。</p>

<p>爲了避免這種情況，需要在Application的 onConfigurationChanged() 裏面也對Configuration做修改。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@Override</span>
</span><span class="line"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">onConfigurationChanged</span><span class="o">(</span><span class="n">Configuration</span> <span class="n">newConfig</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">	<span class="n">Locale</span> <span class="n">locale</span> <span class="o">=</span> <span class="n">getLocaleFromPref</span><span class="o">();</span>
</span><span class="line">	<span class="n">Locale</span><span class="o">.</span><span class="na">setDefault</span><span class="o">(</span><span class="n">locale</span><span class="o">);</span>
</span><span class="line">	<span class="n">overwriteConfigurationLocale</span><span class="o">(</span><span class="n">newConfig</span><span class="o">,</span> <span class="n">locale</span><span class="o">);</span>
</span><span class="line">	<span class="kd">super</span><span class="o">.</span><span class="na">onConfigurationChanged</span><span class="o">(</span><span class="n">newConfig</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>做了這些後，應用就能使用自己的locale設定，而不是系統locale了。完整代碼例子可以參考RunningCadence源碼 <a href="https://github.com/aleung/RunningCadence/blob/c658e00bd24a23bd95369bf6e3d87254776ae2cb/RunningCadence/src/leoliang/runningcadence/Application.java">Application.java</a>。</p>

<h2 id="preferencelocale">讓應用preference中的locale設定修改立即生效</h2>

<p>應用通常會使用 Preference API 來構造用戶設定界面，在上一步完成後，用戶可以在應用preference裏設置locale，在應用重新啓動時會使用選定的locale。但是用戶在preference裏修改locale後是不會立即生效的，因爲修改沒有反映到 configuration 中去，而且對於已經存在的activity，界面組件都已經創建好了，界面上的文字不可能自動改變。</p>

<p>一種方案是讓整個應用重新啓動，所有資源都重新加載，所有界面都重新創建。我留意了一下，大部分提供應用內語言設定的應用都是這樣做的——在彈出對話框裏選擇語言並確認後，不會返回到設定頁面，而是顯示應用的入口界面——應用已經重啓了。在 RunningCadence 中，我不想用這種方法，因爲用戶體驗會不好——用戶在修改語言後，通常還要選擇另一個選項進行語音合成測試，看看TTS對新選擇的語言能否正常工作——如果應用重啓返回主界面，用戶就得再進入設定界面才能進行測試，一方面是操作麻煩了，另一方面界面無緣無故跳轉也會帶來困惑。</p>

<h3 id="configuration">在用戶修改設定後，更新Configuration</h3>

<p>更新Configuration的方法跟應用啓動時的做法一樣，可以重用 setLocale() 方法，問題是要能在合適的時機去調用。使用SharedPreference的修改通知機制可以做到這點。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PreferenceActivity</span> <span class="kd">extends</span> <span class="n">android</span><span class="o">.</span><span class="na">preference</span><span class="o">.</span><span class="na">PreferenceActivity</span> <span class="kd">implements</span>
</span><span class="line">		<span class="n">OnSharedPreferenceChangeListener</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="c1">// ...</span>
</span><span class="line">
</span><span class="line">	<span class="nd">@Override</span>
</span><span class="line">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSharedPreferenceChanged</span><span class="o">(</span><span class="n">SharedPreferences</span> <span class="n">sharedPreferences</span><span class="o">,</span> <span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;pref_language&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class="line">			<span class="o">((</span><span class="n">Application</span><span class="o">)</span> <span class="n">getApplication</span><span class="o">()).</span><span class="na">setLocale</span><span class="o">();</span>
</span><span class="line">			<span class="n">restartActivity</span><span class="o">();</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="nd">@Override</span>
</span><span class="line">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">savedInstanceState</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">(</span><span class="n">savedInstanceState</span><span class="o">);</span>
</span><span class="line">		<span class="n">addPreferencesFromResource</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">xml</span><span class="o">.</span><span class="na">preferences</span><span class="o">);</span>
</span><span class="line">		<span class="n">getPreferenceScreen</span><span class="o">().</span><span class="na">getSharedPreferences</span><span class="o">().</span><span class="na">registerOnSharedPreferenceChangeListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="nd">@Override</span>
</span><span class="line">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStop</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">		<span class="kd">super</span><span class="o">.</span><span class="na">onStop</span><span class="o">();</span>
</span><span class="line">		<span class="n">getPreferenceScreen</span><span class="o">().</span><span class="na">getSharedPreferences</span><span class="o">().</span><span class="na">unregisterOnSharedPreferenceChangeListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>要注意這個listener的寫法，如果按照通常Android程序風格，使用匿名內部類來實現，就會發生詭異的問題，總是不會被回調。這個問題花了我好長時間，誤打誤撞解決了也沒明白什麼回事，寫這篇文章時才看見StackOverflow上有這個問題的<a href="http://stackoverflow.com/a/3104265/94148">根源解答</a>。</p>

<h3 id="locale">將已經存在的界面按照新locale重新顯示</h3>

<p>先分析哪些activity是需要重新顯示的，這需要對應用的 <a href="http://developer.android.com/guide/components/tasks-and-back-stack.html">task stack</a> 結構有一個審視。要知道在locale更改的時刻，哪些activity還在生存着，會在後續操作中重新變爲可見狀態，這些activity的界面需要重建。在RunningCadence裏比較簡單，就是PreferenceActivity本身和調用它的主activity。</p>

<p>要讓activity的界面按新locale重新顯示，最簡單的方法應該就是讓它重啓，這比起對每個界面元件都用重新加載資源去重設要簡單得多。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">restartActivity</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">	<span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="n">getIntent</span><span class="o">();</span>
</span><span class="line">	<span class="n">finish</span><span class="o">();</span>
</span><span class="line">	<span class="n">startActivity</span><span class="o">(</span><span class="n">intent</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>PreferenceActivity的重啓是在OnSharedPreferenceChangeListener得知設定發生了改變的時候進行，在上面的代碼例子裏已經顯示出來了。而主activity的重啓是在當用戶從PreferenceActivity中返回到主activity時，在onActivityResult() 中觸發。</p>

<p>完整代碼例子可以參考RunningCadence源碼 <a href="https://github.com/aleung/RunningCadence/blob/f0cdb98b42a94caa5c7e2cec1a8aa6abf91e73b9/RunningCadence/src/leoliang/runningcadence/PreferenceActivity.java">PreferenceActivity.java</a>。</p>

<h2 id="section">總結</h2>

<p>現在將思路理清了寫下來，感覺不算複雜，但是在做的過程中費了好多腦筋繞了不少彎路，邊上網查資料邊嘗試。Android的API Guides在ICS發佈後改進了好多，很多內容重寫過更清晰容易理解了，另外一個非常有價值的資源是<a href="StackOverflow.com">StackOverflow.com</a>。</p>

<p>我感覺，對於一般應用沒有太大必要去實現應用內的語言選擇。系統裏所有應用都使用統一的locale本來就挺好的。</p>

<p>如果應用的task stack結構複雜，需要重新顯示的activity很多，可能用重啓整個應用的方法更簡單一些。我不知道重啓應用是怎麼做到的，Android API裏面沒有現成的方法。不過若實現了應用重啓，應用內部各個Activity都不需要做任何額外處理了。</p>

<hr />

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>詳細機制見 <a href="http://developer.android.com/guide/topics/resources/runtime-changes.html">Handling Runtime Changes</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>在 <a href="http://aleung.github.com/blog/2010/12/16/Android-activity-lifecycle-in-UML-state-machine-diagram">Android Activity Lifecycle in UML</a> 文中的狀態圖可以見到configChanged引發的狀態遷移。<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java的volatile关键字的作用]]></title>
    <link href="http://aleung.github.com/blog/2012/09/17/Java-volatile-/"/>
    <updated>2012-09-17T00:00:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/09/17/Java-volatile-</id>
    <content type="html"><![CDATA[<ul>
  <li>Initial: 2008-12-04</li>
  <li>Updated: 2012-9-17</li>
</ul>

<p>Java内存模型中，有主内存和每个线程各自的工作内存，虚拟机和硬件可能会让线程工作内存优先存储于寄存器和高速缓存中，以提高性能。</p>

<p>所有变量都存储在主内存中，线程工作内存中保存了此线程使用到的变量的副本。工作内存在线程之间是隔离的，对其他线程不可见。线程对变量的所有操作都必须在工作内存中进行，修改后的变量副本要写回主内存。这样就会出现同一个变量在某个瞬间，在一个线程的工作内存中的值可能与另外一个线程工作内存中的值，或者主内存中的值不一致的情况。</p>

<p>一个变量声明为volatile，就意味着这个变量被修改时其他所有使用到此变量的线程都立即能见到变化（称之为可见性）。具体是在每次使用前都要先刷新，以保证别的线程中的修改已经反映到本线程工作内存中，因此可以保证执行时的一致性。以下例子展现了volatile的作用：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StoppableTask</span> <span class="kd">extends</span> <span class="n">Thread</span> <span class="o">{</span>
</span><span class="line">  <span class="kd">private</span> <span class="kd">volatile</span> <span class="kt">boolean</span> <span class="n">pleaseStop</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="k">while</span> <span class="o">(!</span><span class="n">pleaseStop</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="c1">// do some stuff...  </span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellMeToStop</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">    <span class="n">pleaseStop</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>假如pleaseStop没有被声明为volatile，线程执行run的时候检查的是自己的副本，就不能及时得知其他线程已经调用tellMeToStop()修改了pleaseStop的值。</p>

<p>Volatile一般情况下并不能代替sychronized，因为volatile不能保证操作的原子性，即使只是i++，实际上也是由多个原子操作组成：read i; inc; write i，假如多个线程同时执行i++，依然可能由于不同线程交替执行而出现写入脏数据的情况。也就是说，如果对变量值的修改需要依赖于变量之前的值，那么volatile不能保证一致性，需要用sychronized，或者使用atomic类型(java.util.concurrent.atomic.*)；而上面的代码例子是可以使用volatile的典型场景。</p>

<p>Volatile的另外一个作用是禁止指令的重排序优化。在一般情况下，Java执行语句的顺序可能会因为自动优化而修改，例如下面的例子，initialized的赋值有可能在doInitialize()之前就执行了，线程B就有可能不会正确的等待初始化完成。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kt">boolean</span> <span class="n">initialized</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">// run in one thread</span>
</span><span class="line"><span class="n">doInitialize</span><span class="o">();</span>
</span><span class="line"><span class="n">initialized</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">// run in another thread</span>
</span><span class="line"><span class="k">while</span> <span class="o">(!</span><span class="n">initialized</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">  <span class="n">sleep</span><span class="o">();</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果将initialized声明为volatile，就能保证它的执行顺序不会被改变（但JavaSE 5之前的版本依然会有问题）。</p>

<p>以前在讲述Java与C++区别的时候，有个著名的例子是double-checked locking在Java中不能使用，就是执行顺序优化造成的问题。但自JavaSE 5起，配合volatile的使用是可以实现double-checked locking的。</p>

<p>Reference：</p>

<ul>
  <li><a href="http://www.javamex.com/tutorials/synchronization_volatile.shtml">http://www.javamex.com/tutorials/synchronization_volatile.shtml</a></li>
  <li><a href="http://www.ibm.com/developerworks/cn/java/j-jtp06197.html">http://www.ibm.com/developerworks/cn/java/j-jtp06197.html</a></li>
  <li><a href="http://book.douban.com/subject/6522893/">深入理解Java虚拟机</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[色彩管理 (2)]]></title>
    <link href="http://aleung.github.com/blog/2012/09/15/color-management-2/"/>
    <updated>2012-09-15T00:56:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/09/15/color-management-2</id>
    <content type="html"><![CDATA[<p>色彩管理的<a href="http://aleung.github.com/blog/2004/11/12/Color-management-1">第一篇</a>是在2004年写的，当时本来想连续写，可写了一篇就没有下文了。现在再来继续色彩的话题，不过这次的主题其实不算色彩管理，而是看看色彩的本质是什么。</p>

<p>颜色是什么？学物理的时候说太阳光通过菱镜会分离成彩色的光带，不同颜色的光的波长是不一样的。这给我们一个印象：颜色就是可见光波长这个物理量的反映。但是问题来了，白色对应什么波长的光？为什么红光和绿光混合在一起变成了黄光，难道混合后波长产生变化了？原因在于，颜色并不是某一個物理量的直接反映，而是人对光线的心理反映，称之为色觉。</p>

<p><img class="right" src="http://aleung.github.com/blog/attachments/2012/9/eye.jpg" /> </p>

<p>人眼有三种色彩感受器（视锥细胞），每种感受器可以感应不同波长范围的光，分别的感受峰值波长为：420nm，534nm，564nm，差不多相当于蓝、绿、红三色光的波长。对于某一种光谱，三种感受器得到三组信号送往大脑，大脑根据这三组信号值的不同组合感知到不同的色彩。</p>

<p>现实世界中的光线通常都不会是单一波长的（只有激光光源产生的才是单一波长的光吧，要么是经过分光镜得到的），而是不同波长组合的混合光。视觉感受器并不能区分这些光谱，反正各种感受器只对自己能感应的波长范围内的光作出反应，最后大脑拿到的就是三组信号而已。不同的光谱组合的光线，可能对三种视觉感受器产生的刺激恰好是一样的，这样大脑就会将它们感受为同一种颜色，术语称为“异谱同色”。例如波长600nm左右的光线人感受是黄色，而波长540nm绿光和700nm红光一定强度比例的混合，人感觉到的也是黄色。</p>

<p>我曾经在之乎问过一个问题：人眼若多一种新的视椎细胞可感应可见光范围内的另外一个波长的光，人看到的色彩会有什么变化吗？看到的颜色更多？ 后来我想明白了，是会看到更多的颜色的，准确的说，是能够分辨出更多不同的颜色。在只有三种感受器时，有些不同波长组合的混合光产生的刺激是一样的，大脑区分不出，将它们当作同样的颜色，但假若增加另一种波长的感受器后，这个感受器感应到的刺激不同，就能够分辨为不同色彩了。至于这个颜色是什么？我们不可能知道，因为颜色仅仅是一种心理反应。如此类推，不同动物看到的色彩也是不一样的，因为不同动物眼睛的视锥细胞的波长响应曲线不同，而且数量也不一定一样。假如有某种外星人有四种甚至更多的色彩感受器，那他们会认为地球人全是色盲，地球人到他们的世界里可能连分辨交通灯都有问题——如果他们还用交通灯。另外，所谓三原色，也是针对人而言的。</p>

<p>既然色彩只是种心理反应（感觉），那为了准确描述色彩和进行分析，就需要建立色彩模型。根据关注的角度不同，不同的研究者拿出了不同的色彩模型，例如孟塞尔颜色立体模型、CIE L* a* b* 模型。其中 CIE XYZ 模型应该是最能反映人的颜色视觉的，因为它的制定就是通过大量实验来测定人对三种特定波长光线S、M、L（约对应于红绿蓝）的刺激值X，Y，Z。实验方式是让人同时观察目标色光线和SML三组标准光的混合光，调节S/M/L的光强，使得人眼感觉混合光和目标色光线的颜色完全一样，从而得出目标色的XYZ值。CIE XYZ色彩空间是色彩管理的基础。</p>

<p>CIE XYZ定义了一个三维空间，展现起来不如二维图形直观。经常用来表示色彩空间大小的二维马蹄型图称为CIE xy色度图，如下图。它的纵横座标xy是根据XYZ推导出来的，x=X/(X+Y+Z), y=Y/(X+Y+Z), z=Z/(X+Y+Z), x+y+z=1。彩色的马蹄形范围表示人眼可见的全部色彩范围。在数码相机和电脑显示中使用的RGB色彩空间在CIE xy色度图中反映为三角形范围，三个顶点分别为R/G/B三原色。</p>

<p><img src="http://aleung.github.com/blog/attachments/2012/9/gamut.jpg" alt="" /></p>

<p>不考虑印刷，摄影爱好者一般会接触到的色彩空间也就是AdobeRGB和sRGB。从图中可见，AdobeRGB的色域比sRGB广，特别是在蓝绿色系方面，AdobeRGB能够表现的色彩比sRGB丰富很多。我查找不到资料描述各种数码相机的感光元件能够记录下来的色域有多大，但一般的说法是一般数码单反所能记录的色彩范围都比sRGB广，接近或大于AdobeRGB。因此，专业的摄影都会选择AdobeRGB色彩空间来保存图像文档。但问题是，我们的显示器并不能展现这么广的色域，民用型号通常都只能再现sRGB色彩空间或更小一点（广色域显示器会比sRGB大，但一般还是达不到AdobeRGB），因此照片中记录的部分颜色是无法在显示器上原汁原味的再现出来的（这里先不考虑显示器没有校准导致偏色问题），超出设备色彩空间的颜色只能用接近的来替换，例如翠绿色的海水就没有那么漂亮了。另外一个问题是有些软件，例如不是最新版本的浏览器，是不支持色彩管理的，它不会将照片的色彩空间映射到显示器的色彩空间以保持在可显示范围内的颜色一致，而是将照片中的RGB值当作设备色彩空间的值来直接显示。如果照片用的是sRGB还好，因为显示器本身大致符合sRGB，颜色偏差不会太多，但若照片是用色域更广的AdobeRGB的，色彩偏差就严重了。所以数码相机的说明书上一般会建议如果照片仅在电脑上观看最好选择sRGB。</p>

<p>不过，数码相机的色彩空间设置仅仅是针对JPG格式的，如果用RAW格式，保存的是传感器得到的原始值，实际上是数码相机设备色彩空间，而不是任何标准色彩空间。当在电脑中用RAW处理软件打开时，会将照片由设备色彩空间映射到软件设定的工作空间。我用Apple Aperture打开Nikon的RAW，看到它是被标识为AdobeRGB色彩空间。用数码单反的话，最好还是选择RAW格式，因为记录的信息多，后期处理的余地就大很多。</p>

<p>See also:</p>

<p><a href="http://aleung.github.com/blog/2004/11/12/Color-management-1">色彩管理(1)</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[广州跑步路线：二沙岛]]></title>
    <link href="http://aleung.github.com/blog/2012/09/10/running-route-ersha/"/>
    <updated>2012-09-10T22:13:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/09/10/running-route-ersha</id>
    <content type="html"><![CDATA[<p><img src="http://aleung.github.com/blog/attachments/2012/9/ersha_sat.jpg" alt="" /></p>

<p>环岛一周约4.4km，其实只能算环半岛，因为岛西面一大段的沿江堤岸是公众不能进入的。车道大部分是沥青路面，晴澜路段水泥路面，人行道是铺石路面。环岛道路汽车不多，在注意安全的前提下可以靠边跑车道。</p>

<p>虽然算不上有什么景观，但二沙岛上的都是别墅和高级会所，环境幽静，江边视野开阔，跑起来挺舒服。</p>

<p>晚上晴波路音乐厅美术馆一段江边比较热闹点，有游客、玩单车和玩音乐的，其他路段都比较僻静，特别的北面晴澜路段。但每隔一段距离就有保安坐在路旁，毕竟这里是富人区，治安有保障。</p>

<p>岛中央是几个大草坪，上面有橡胶铺设的步道，跑步也不错，但就是拐弯多，断断续续，总长度也不够长。</p>

<p>岛中央大通路/烟雨路有公交车途经。往东过广州大桥可以接着跑珠江新城临江大道，往西沿大通路过桥也可以接着沿江边跑，因此二沙岛可以作为沿珠江跑路线的一段。</p>

<p>总体来说也是可以推荐的跑步路线。</p>

<p><img src="http://aleung.github.com/blog/attachments/2012/9/ersha_map.jpg" alt="" /></p>

<p>其他跑步路线介绍：<a href="http://aleung.github.com/blog/2012/09/09/running-route">广州跑步路线：索引</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[广州跑步路线: 麓湖]]></title>
    <link href="http://aleung.github.com/blog/2012/09/09/running-route-luhu/"/>
    <updated>2012-09-09T21:13:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/09/09/running-route-luhu</id>
    <content type="html"><![CDATA[<p><img src="http://aleung.github.com/blog/attachments/2012/9/luhu_sat.jpg" alt="" /></p>

<p>麓湖的跑步路线是环绕着湖一周的路。路面包括木栈道、柏油车道、砖铺人行道，麓湖路属于绿道系统的部分有木栈道，其余环湖路线的人行道很窄，可以跑到车道边上，但有来车时需要注意安全。</p>

<p>麓湖是广州为数不多的大湖泊，比一般公园的湖要大很多，周边都是山头绿地，环境和景色都不错。可惜环湖的车道虽然不是主干道，但来往车辆还是不少，汽车尾气导致空气还是一般。</p>

<p>虽然周边环境偏僻些，但白天游人不少，路上也不时会见到跑友，安全不成问题。我没有晚上去跑过，估计会比较僻静，安全上需要小心。附近麓景路、麓湖路都有公交车站。</p>

<p>环湖一圈约3.5km，总上升59m，基本上不算多大起伏。</p>

<p><img src="http://aleung.github.com/blog/attachments/2012/9/luhu_elevation.jpg" alt="" /></p>

<p>总体来说是不错的跑步路线，推荐。</p>

<p><img src="http://aleung.github.com/blog/attachments/2012/9/luhu_map.jpg" alt="" /></p>

<p>其他跑步路线介绍：<a href="http://aleung.github.com/blog/2012/09/09/running-route">广州跑步路线：索引</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[广州跑步路线：索引]]></title>
    <link href="http://aleung.github.com/blog/2012/09/09/running-route/"/>
    <updated>2012-09-09T21:09:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/09/09/running-route</id>
    <content type="html"><![CDATA[<p>这一系列博文记录我跑过的路线。</p>

<ul>
  <li><a href="http://aleung.github.com/blog/2012/09/09/running-route-luhu/">麓湖</a></li>
  <li><a href="http://aleung.github.com/blog/2012/09/10/running-route-ersha/">二沙岛</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding WebLogic WorkManager]]></title>
    <link href="http://aleung.github.com/blog/2012/08/10/understanding-weblogic-workmanager/"/>
    <updated>2012-08-10T22:54:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/08/10/understanding-weblogic-workmanager</id>
    <content type="html"><![CDATA[<p>Since WebLogic Server 9.0, new concepts for workload management is introduced. WorkManager replaces execute queue as defined in earlier releases.</p>

<p>All WorkManagers share a common thread pool and a priority-based queue. The size of the thread pool is determined automatically by the kernel and resized as needed.  Priority of the requests is dynamic and computed internally to meet the stated goals. </p>

<p>The thread pool is so-called self-tunning. It monitors the overall throughput every two seconds and uses the collected data to determine if thread count needs to change. Present thread count, the measured throughput, and the past history is taken into account by the algorithm to determine if the thread count needs to increase or decrease, and new threads are automatically added to the pool or removed, as needed.</p>

<p>It’s no longer have to (and is unable to) configure thread counts on a WorkManager nor the common thread pool. However, it’s possible to affect how server prioritizes work and allocates threads by parameters defined in WorkManager. Each WorkManager can contain following types of components:</p>

<ul>
  <li>Request class 
    <ul>
      <li>Fair-share</li>
      <li>Response-time goal</li>
      <li>Context based</li>
    </ul>
  </li>
  <li>Constraints
    <ul>
      <li>Minimum threads constraint</li>
      <li>Maximum threads constraint</li>
      <li>Capacity</li>
    </ul>
  </li>
</ul>

<p>Request class affects how requests are prioritized. Fair-share request class changes thread usage weight of a WorkManage, which is by default 50. Response-time goal request class specifies the response-time goal in milliseconds. Context-based request class is a compound request class that provides a mapping between the request context and the above two request classes. With context-based request class, it’s possible to specify different request classes for the same servlet invocation depending on the user associated with the invocation.</p>

<p>A constraint defines minimum and maximum numbers of threads allocated to execute requests and the total number of requests that can be queued or executing before WebLogic Server begins rejecting requests. Constraint is referenced in WorkManager by constraint name. So a constraint can be shared by several WorkManagers and set the common limit.</p>

<p>Minimum threads constraint makes sure that during periods of high workloads, there would still be a certain number of threads from the self-tuning thread pool available to process work requests for all work managers that reference the minimum threads constraint. Using the minimum threads constraint could result in some side-effects. Users should consider adding a minimum threads constraint to a work manager configuration when it is critical that progress must be made for an application even when the WLS server is under very heavy load, such as work that would have resulted in server-to-server deadlock if not being processed promptly. It is not to be used as a mean of prioritizing workload among different work managers. </p>

<p>The maximum threads constraint limits the number of threads in the self-tuning thread pool that can be used for executing work for all work managers that references the same constraint. The maximum threads constraint is not designed as a mean to prioritize workloads among different work managers. It is most useful when there are other known limitations where a hard upper limit should be put on the number of threads that should be assigned for processing work requests, and that allocating more threads for processing the workload would not increase the overall throughput.</p>

<p>A typical use case of maximum threads constraint is to take a data source connection pool size as the max constraint.</p>

<pre><code>&lt;max-threads-constraint&gt;
  &lt;name&gt;MyConstraint&lt;/name&gt;
  &lt;pool-name&gt;MyDataSource&lt;/pool-name&gt;
&lt;/max-threads-constraint&gt;
</code></pre>

<p>The capacity constraint defines the maximum number of requests that can be queued (waiting for thread) or are executing. Overload action, e.g. refuse with HTTP response code 503, is taken after the capacity is reached. </p>

<p>I draw a picture to show the threadpool and queue. Requests dispatched with different WorkManager are in different color.</p>

<p><img src="http://aleung.github.com/blog/attachments/2012/8/workmanager.jpg" alt="" /></p>

<ul>
  <li>Self-tuning thread pool thread allocation ratio amoung WorkManagers is affected by request class. </li>
  <li>Minimum threads constraint limits: never queue request, unless <code>executing &gt;= min-threads-constraint.count</code></li>
  <li>Maximum threads constraint limits: <code>executing &lt;= max-threads-constraint.count</code></li>
  <li>capacity contraint limits: <code>executing + queued &lt;= capacity.count</code></li>
</ul>

<p>WorkManager can be created for a specific application or module (ejb/war), which is called application-scoped WorkManager. If there is no special requirement on individual application or module, you can create global Work Managers that are available to all applications and modules. An application uses a globally-defined Work Manager as a template. Each application creates its own instance, this means that each application has its own default WorkManager that is not shared with other applications. WebLogic Server provides a built-in default Work Manager which may be sufficient for most application requirements.</p>

<p>Reference:</p>

<ul>
  <li><a href="http://www.oracle.com/technetwork/articles/entarch/workload-management-088692.html">Workload Management in WebLogic Server 9.0</a></li>
  <li><a href="https://blogs.oracle.com/WebLogicServer/entry/threads_constraints_in_work_ma">Threads Constraints in Work Managers</a></li>
  <li><a href="http://docs.oracle.com/cd/E15051_01/wls/docs103/config_wls/self_tuned.html">Using Work Managers to Optimize Scheduled Work</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[apigee]]></title>
    <link href="http://aleung.github.com/blog/2012/07/31/apigee/"/>
    <updated>2012-07-31T23:20:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/07/31/apigee</id>
    <content type="html"><![CDATA[<p><a href="http://apigee.com/">Apigee</a> is hot recently. It has raised $20 million in its fifth round of funding. What magic it has? I spent some time today to have a look at it.</p>

<p>Apigee is an API management platform and services company. It benefits both API providers and developers who build their apps with APIs.</p>

<h2 id="apigee-enterprise">Apigee Enterprise</h2>

<p>Apigee Enterprise product is an API proxy plus developer portal.</p>

<p>Usually when an organization open its internal services or data to external, it develops the API and exposure it, with necessary document published. Application developers learn the API by reading the document, and then code to use the API.</p>

<p><img src="http://aleung.github.com/blog/attachments/2012/7/api.png" alt="" /></p>

<p>Apigee helps API provider by providing API management, security, analytics etc. It provides developer portal for API provider to management developer onboarding, and also help developer to learn the API by playing with it.</p>

<p><img src="http://aleung.github.com/blog/attachments/2012/7/api_with_apigee.png" alt="" /></p>

<h2 id="console-to-go">Console To-Go</h2>

<p>Apigee Enterprise features are not available to free subscriber of Apigee, excepts the console that let developer learn an API by playing with it. Apigee opens this service to free subscriber as Console To-Go.</p>

<p>I try to create my own Console To-Go:</p>

<p>Create an API on Google Application Engine: <a href="http://api-playground.appspot.com/time">time API</a> , it simply return the current time since epoch.</p>

<p>Write the WADL for the API.</p>
<div><script src="https://gist.github.com/3214300.js?file="></script>
<noscript><pre><code>&lt;application xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
             xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;
             xmlns:apigee=&quot;http://api.apigee.com/wadl/2010/07/&quot;
             xmlns=&quot;http://wadl.dev.java.net/2009/02&quot;
             xsi:schemaLocation=&quot;http://wadl.dev.java.net/2009/02 http://apigee.com/schemas/wadl-schema.xsd http://api.apigee.com/wadl/2010/07/ http://apigee.com/schemas/apigee-wadl-extensions.xsd&quot;&gt;

    &lt;resources base=&quot;http://api-playground.appspot.com&quot;&gt;

        &lt;resource path=&quot;/time&quot;&gt;
            &lt;method id=&quot;getTime&quot; name=&quot;GET&quot; apigee:displayName=&quot;Get time since epoch&quot;&gt;
                &lt;apigee:tags&gt;
                    &lt;apigee:tag primary=&quot;true&quot;&gt;Time&lt;/apigee:tag&gt;
                &lt;/apigee:tags&gt;            
                &lt;apigee:authentication required=&quot;false&quot;/&gt;
                &lt;apigee:example url=&quot;/time&quot;/&gt;
            &lt;/method&gt;
        &lt;/resource&gt;

    &lt;/resources&gt;

&lt;/application&gt;
</code></pre></noscript></div>

<p>Create a new console on <a href="https://apigee.com/togo">Apigee Console To-Go</a>, upload the WADL file for my playground API.</p>

<p>That’s all I need to do. Now the console is ready and anyone can try my time API on the console. This is a snapshot of API request-response:</p>

<iframe src="https://snap.apigee.com/NRNmNb" width="800" height="300" frameborder="0" scrolling="no"></iframe>

<h2 id="usergrid">Usergrid</h2>

<p>A cloud-based <strong>data service</strong> for application developer, especially for mobile application developer. It provides a core set of <em>commonly used social media application objects</em>, including a rich user model, as well as the ability to create new objects. </p>

<p>REST API is provided, with data model in JSON.  </p>

<p>Features includes:</p>

<ul>
  <li>
    <p><em>User model</em>. Organize users into groups, teams or other structures. User authentication via Facebook, Twitter or other OAuth services. User profile synchronization.</p>
  </li>
  <li>
    <p><em>Collections</em>. Any type of application data in JSON. Data sharing between users and applications.</p>
  </li>
  <li>
    <p><em>Messages and activities</em>. Automates user interaction e.g. status updates, check-ins, comments in the form of activity streams. Support messaging (application internal) and notifications by delivering activities to connected users.</p>
  </li>
  <li>
    <p><em>Data analytics</em>. Log events generated by application. Store, search and analyze at any level of scale.</p>
  </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xperia U 上手]]></title>
    <link href="http://aleung.github.com/blog/2012/07/22/xperia-u/"/>
    <updated>2012-07-22T18:22:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/07/22/xperia-u</id>
    <content type="html"><![CDATA[<p><img src="http://aleung.github.com/blog/attachments/2012/7/xperia-u.png" /></p>

<p><a href="http://en.wikipedia.org/wiki/Nexus_One">Nexus One</a> 手机用了两年多，升过几次系统，到现在用起来还是挺满意，但唯一的问题是内部存储(ROM)太小了，只有512M，留给安装应用的空间不足200M，而现在的应用又越来越大，已经到了当想装新应用必须先卸载其他一些的地步了。尝试过A2SD，效果不大理想，卡顿感比较明显，也可能因为我的TF卡速度不够高。</p>

<p>现在换的这个 <a href="http://www.sonymobile.com/global-en/products/phones/xperia-u/">Sony Xperia U</a> 属于 <a href="http://www.xperiablog.net/2012/03/07/xperia-nxt-specifications-compared-%E2%80%93-xperia-p-vs-xperia-s-vs-xperia-u/">Xperia NXT</a> 系列，称为Sony下一代智能手机，包括 Xperia S, Xperia P 和 Xperia U，档次由高至低。Xperia U 在配置上其实跟 Nexus One 变化不算大（<a href="http://geekaphone.com/compare/Sony-Xperia-U-vs-HTC-Nexus-One">对比</a>），主要区别是CPU双核(频率相同)，内部存储容量4G，而其他的如屏幕之类都不相上下。不过，两个产品发布时间差了2年，Nexus One在当年算是旗舰级别，而现在Xperia U只是中端机型，在现在的手机大混战中一点都不起眼。这也正符合我目前的需要，相当于一个内存升级版的Nexus One。之前考虑过人称Google三儿子的Galaxy Nexus，样样都满意，不过有些特性我倒用不着，例如4.6寸大屏幕。</p>

<p>玩了几天，跟我的期望比较一致，总体满意。有些经验记录下来。</p>

<h2 id="section">刷机</h2>

<p>参考前一篇 <a href="http://aleung.github.com/blog/2012/07/21/flashing-xperia-u/">Xperia U 刷机</a>。</p>

<h2 id="section-1">透明发光条</h2>

<p>在屏幕下方软按键处有一条称为 illuminating transparent band 的发光条，晚上环境光线暗的时候，那条光带有点刺眼，干脆不要亮好了，找到一个应用 <a href="https://play.google.com/store/apps/details?id=com.haxor">Screen Filter</a> 可以将soft-key backlight关闭。另外，在 Google Play 搜索“illumination bar”可以找到一些应用能够将这个发光条用作未接来电、未读短信、邮件的提醒灯。</p>

<h2 id="usb">USB连接电脑</h2>

<p>Xperia NXT 系列的USB连接采用<a href="http://en.wikipedia.org/wiki/Media_Transfer_Protocol">MTP</a> (Media Transfer Protocol) 模式，而不是通常的MSC(Mass Storage)模式。在Windows里，USB连上后，会显示成一个没有盘符的设备，可以在explorer中访问，但在Mac OS X中，就根本看不到。XDA上有人做了个应用<a href="http://forum.xda-developers.com/showthread.php?t=1606940">SDCARD Mounter</a>，装在手机上后（需要root），能够将Xperia S/U/P的内部存储空间用MSC模式mount起来，这样在电脑上就能够像U盘一样访问了。</p>

<p>如果手机没有root，那么Mac OS X还可以安装<a href="http://www.android.com/filetransfer/">Android File Transfer</a>来访问手机存储，不过我没有试过是否可行。重要的是，Android File Transfer只能在它的窗口中看到手机的文件，而不是挂载在文件系统上，在finder和shell中都访问不了，这是因为MTP模式下文件系统并不是由电脑端管理，而是在设备端管理。我需要用script来控制传输文件，因此只能用MSC模式。</p>

<h2 id="dlna">DLNA</h2>

<p>用Xperia自带应用播放音乐、视频或者浏览照片时，菜单里有一个选项叫做”Play on device”，说明是 find &amp; connect to DLNA device。</p>

<p>DLNA是什么呢，上网查了一通，原来这是一个类似Apple的AirPlay的规范，通过网络在设备之间共享数字媒体播放。准确的说，<a href="http://en.wikipedia.org/wiki/Digital_Living_Network_Alliance">DLNA</a>的功能集比AirPlay要广很多，定义了 media server，media player，media renderer，media controller 等多种设备（实际上一种设备可以身兼多职），现在应用广泛的有两种模式：</p>

<ul>
  <li>
    <p><strong>播放媒体服务器上的音频视频（pull）</strong>。在一个设备(media player)上，浏览和播放另外一台设备(media server)上的资源。这时，用户是在播放设备上进行操作的，例如在手机上播放电脑里保存的视频。</p>
  </li>
  <li>
    <p><strong>将媒体推送到另外一个设备远程播放（push）</strong>。如将在手机上正在看的视频推送到大电视上播放，这时手机是media controller，电视机是media renderer，media server看情况，可能是手机也可能是其他设备，要看媒体源在哪里。跟另一种模式的区别是，用户并不是在播放设备上进行操作的，手上的设备就像一个遥控器。这也是AirPlay能做的事情。</p>
  </li>
</ul>

<p>Xperia U 的 play on device 就是push模式。但我家里没有支持DLNA的电视机，有没有办法推送到电脑，用电脑的显示器来播放呢？如果是Win7就很好办，Win7带的Media Player内置支持DLNA，将媒体库菜单里的“允许远程控制我的播放器”选中就可以了。但是我的电脑用的是Mac OS X，这种办法走不通。后来发现大名鼎鼎的<a href="http://xbmc.org/">XBMC</a>也支持 DLNA renderer 功能，在network setting里面将 Allow control of XBMC via UPnP 选上，手机 play on device 菜单里果然就出现了XBMC可供选择。另外，还惊喜的发现 XBMC 还有 Allow XBMC to receive AirPlay content 选项，测试过能够将iPad的视频推送到XBMC中播放。太好了，那就可以用 Thunderbolt Display 来看了。</p>

<p>Xperia U 还可以充当 DLNA media server，试过在电脑上用<a href="http://www.videolan.org/vlc/">VLC</a>可以浏览手机上的所有视频、音乐、照片。需要在手机的 Connected devices 应用中enable。</p>

<h3 id="reference">Reference:</h3>

<ul>
  <li><a href="http://aleung.github.com/blog/2010/05/11/Nexus-One-/">Nexus One 到手，以及刷机过程</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xperia U 刷机]]></title>
    <link href="http://aleung.github.com/blog/2012/07/21/flashing-xperia-u/"/>
    <updated>2012-07-21T23:20:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/07/21/flashing-xperia-u</id>
    <content type="html"><![CDATA[<p>昨天中午拿到国行 <a href="http://www.sonymobile.com/global-en/products/phones/xperia-u/">Sony Xperia U</a> (ST25i) 手机，开机试了一下，索尼(原来的索尼爱立信)在Android 2.3基础上的定制系统做得还可以，但大陆行货里好多功能都被阉割得不成样子。Google系列的任何东西都去掉了就不用说了，很奇怪的是居然系统里没有自带任何应用市场，国内的山寨市场也没有。可以想象一个不熟悉IT的用户买到手机后就会局限在预装的那几个应用，连升级都没有途径。比较一下SonyMobile英文与中文网站对这款手机的介绍，就会发现中文产品介绍缩水不少，好多卖点都没有了。</p>

<p>这样的智能手机简直就是残废，于是下班后就开始研究怎么刷机。先是在国内的一些论坛上搜索，但国内论坛真是很没有营养，里面的信息的价值很低。Android hacker的大本营在XDA，相关问题还是要到<a href="http://www.xda-developers.com/">XDA论坛</a>找靠谱。</p>

<p>关于Xperia系列刷机需要了解的基础知识，这篇 <a href="http://forum.xda-developers.com/showthread.php?t=1526866">All that u need to know before u begin</a> 讲得比较清楚。</p>

<p>无论要刷什么，前提条件是先将 bootloader 解锁。关于解锁的教程很多，SonyMobile网站上就有详细步骤，XDA上的 <a href="http://forum.xda-developers.com/showthread.php?t=1527159">Xperia S/P/U/Sola Bootloader Unlocking &amp; Relocking</a> 附带了所需工具的下载。还有一个国产软件，号称是一键自动解锁。</p>

<p>但是，就在第一步，将手机boot到fastboot模式，就花了我好几个小时。按教程，手机在关机状态按着音量+键的同时将USB连接上电脑，就会进入fastboot模式，并且亮起蓝灯。但是无论我怎么反复重试，手机都不会亮起蓝灯，电脑上弹出对话框提示安装驱动程序，但当我选择操作时它又说USB设备已经断开，显示这样的错误信息：s1boot fastboot device unplugged。网上搜索，有人说是驱动没有装好的原因，最后还是从XDA里找到了<a href="http://forum.xda-developers.com/showthread.php?t=1554632">解决方案</a>。原来，Xperia手机在进入fastboot模式时，会检测电脑是否已经装上了正确的驱动程序，如果没有，就会退出fastboot模式。而电脑端刚刚提示用户安装驱动，就发现手机已经关闭了连接，就取消了驱动的安装。这种问题可以用来做经典反面案例了。XDA帖子里的解决方法还是要拼手快：预先打开设备管理器，一插上手机后，里面会出现s1boot这个设备，赶紧鼠标右键选择升级驱动，升级驱动的对话框打开后，即使设备断开了还是可以继续进行驱动程序的安装。终于看到传说中的蓝灯了，原来是在下面透明发光条发出很亮的蓝光，我之前还一直以为是右上角摄像头旁边的小灯。</p>

<p>接下来就非常顺利了，解锁bootloader后，用fastboot安装了ROM和Kernel。我都没有另外用其他工具了，感觉fastboot用起来就很简单，很多人不喜欢可能是因为命令行操作吧。关于fastboot使用，推荐看cyanogenmod的wiki里的<a href="http://wiki.cyanogenmod.com/wiki/Fastboot">介绍</a>。</p>

<p>我刷的ROM是<a href="http://forum.xda-developers.com/showthread.php?t=1684062">KA02 Xperia SSpeed</a>， 还是Android 2.3.7，Sony还没有为Xperia U 提供Android 4.0 ICS。Kernel是<a href="http://forum.xda-developers.com/showthread.php?t=1688147">Advanced Stock Kernel</a>。刷完开机，见到熟悉Google账号绑定，然后Gmail、通信录、日历同步、Google Play都回来了。Root也有了，收工。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《简约至上》读书笔记]]></title>
    <link href="http://aleung.github.com/blog/2012/07/14/simple-first/"/>
    <updated>2012-07-14T10:43:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/07/14/simple-first</id>
    <content type="html"><![CDATA[<p><a href="http://book.douban.com/subject/5394309/">简约至上</a>，原作名为 Simple and Usable Web,Mobile,and Interaction Design，不错的关于交互设计的书籍。</p>

<iframe id="xmindshare_embedviewer" src="http://www.xmind.net/share/_embed/aleung/simple-first/" width="900px" height="300px" frameborder="0" scrolling="no"></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring bean reference injection definition by external configuration]]></title>
    <link href="http://aleung.github.com/blog/2012/07/07/spring-bean-reference-injection-definition-by-external-configuration/"/>
    <updated>2012-07-07T21:38:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/07/07/spring-bean-reference-injection-definition-by-external-configuration</id>
    <content type="html"><![CDATA[<p>当使用 Spring 作为 IoC framework 的时候，有时会利用 property placeholder 来将bean的注入属性做成可配置化。但是，一般很少会将 reference bean id 也用 property placeholder 代替，有人甚至以为这是不允许的。</p>

<p>利用Spring Framework的property placeholder，将bean依赖关系配置抽离Spring XML文件，就能在产品发布部署后，通过配置选项来选定不同的实现，可用于集成接口、特定业务逻辑打开关闭等。</p>

<p><a href="http://www.oodesign.com/adapter-pattern.html">Adaptor pattern</a> is widely used at the point where our product integrates with external system. Product will provide several adapters to adapt to different external system interface.
We deliver our product in uniform installation package for all customers. A mechanism is required to configure which adapter to be used after system is installed.</p>

<p><a href="http://www.oodesign.com/factory-pattern.html">Factory pattern</a> can be used to create the specific adapter by configuration property. But by this way we need to create factory for each kind of adapters.</p>

<p>Actually Spring Framework already supports it. With property placeholder, it is able to use placeholder in bean reference and resolve the bean name from properties. The bean definition XML file is not allowed to be modified when product is released, because it’s packaged in war/ear. But properties can be modified as long as it’s store outside of the package, e.g. on file system or in configuration management (extend the PropertyPlaceholderConfigurer class).</p>

<p>Here is a sample code snippet:</p>
<div><script src="https://gist.github.com/2934603.js?file="></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; 
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;
    default-autowire=&quot;byType&quot;&gt;

    &lt;context:property-placeholder location=&quot;file:bin/leoliang/spring/test1/bean.properties&quot;/&gt;

    &lt;bean id=&quot;fooA&quot; class=&quot;leoliang.spring.test1.FooImplA&quot; /&gt;
    &lt;bean id=&quot;fooB&quot; class=&quot;leoliang.spring.test1.FooImplB&quot; /&gt;
    
    &lt;bean id=&quot;bar&quot; class=&quot;leoliang.spring.test1.Bar&quot;&gt;
        &lt;property name=&quot;foo&quot; ref=&quot;${foo_bean_id}&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</code></pre></noscript></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件团队工作空间再设计]]></title>
    <link href="http://aleung.github.com/blog/2012/06/30/redesign-of-software-development-workspace/"/>
    <updated>2012-06-30T22:24:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/06/30/redesign-of-software-development-workspace</id>
    <content type="html"><![CDATA[<p>软件团队的办公室空间可以分为三大类：团队工作空间，会议空间，公共区域。</p>

<p>敏捷团队在工作过程中需要有比较多沟通，团队工作空间需要为此准备必要的设施，例如带有白板的讨论区域，这样就不需要讨论一些事情都要跑很远找会议室；供张贴东西的墙面；公共信息显示屏，显示CI状态之类。</p>

<p>每个人的座位当然是越宽敞越好，即使条件限制，最低限度也需要保证可以增加一个人并排坐一起结对编程或讨论问题。因此应该用长条型的桌子，而不是曲尺型的桌子。</p>

<p>不同团队之间的空间有一定的隔离，减少相互影响，因为团队内的讨论对他人是噪音。并且，空间的尺度对心理也有影响，需要合适的尺度，过大的大厅一排排整齐排列的桌子的心理效果不好。</p>

<p>将公共区域，例如休息区、茶水间、打印机等，放在各个区域空间的交汇点，一方面是方便各个区域的人的到达，另外是形成汇聚点，成为人们的交流场所。公司里面需要创造让不同团队成员见面交流的机会。公共区域特别应该是开放性的，不带有物理边界，才能彰显公共属性，例如茶水间休息区与走廊不应该设墙，让它们融合起来，这样大家路过的时候就能够打个招呼聊上几句。休息家具款式可以多样化，颜色也可选择鲜明多彩的，让空间生动有活力。</p>

<p>其实不仅是公共区域，团队区域之间也应该是柔性边界。柔性边界会鼓励人们进入不同的区域，在软件公司里并没有什么理由要为员工进入一个普通区域造成障碍。人从一个大厅进入另一个大厅，心理不会有异样感，但如果要穿过一个门进入一个坐了人的封闭的房间，那他必须是有专门目的才会这样做。</p>

<p>会议室相对团队空间来说，私密性会强一些。在软件公司里开会，白板是很重要的，会议室的白板（或者用玻璃）的面积应该尽量的大，越大越好，画不下要擦掉影响思路，有可能的话将整面墙都做白版。会议室面积小，密闭空间的压抑感会特别严重，用玻璃做墙面可以改善空间感。由于团队工作空间是开放性的，需要多留一些小会议室(quite room)，或者半开放小隔间作为不受干扰的环境来临时使用。</p>

<p>人喜欢在窗户旁边工作：与外界空间的连通感，扩大心理空间，不会有幽闭压抑感；自然采光与通风。因此有窗的空间应该留作给人长时间活动的空间，而不是用作偶然才有人使用的用途，如果用作储物、机房就更浪费了。</p>

<p><em>后记：</em></p>

<p><em>差不多两年前在荷兰工作的时候，对于欧洲的办公环境深有感触，回到国内后就有了这些想法，不过一直没有动笔写下来。期望在国内有类似欧洲的环境在目前显然是不现实的，但如果是在一开始设计办公环境的时候考虑更多人的因素，其实在不增加成本的情况下也能有所改善。最重要的是观念。</em></p>

<p><em>另外还有更早的一篇<a href="http://aleung.github.com/blog/2006/05/12/Each-have-independent-office-with-the-Windows">每人都有带窗户的独立办公室</a>，是在瑞典工作的时候写的。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[migrate my blog to github]]></title>
    <link href="http://aleung.github.com/blog/2012/06/25/migrate-my-blog-to-github/"/>
    <updated>2012-06-25T23:40:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/06/25/migrate-my-blog-to-github</id>
    <content type="html"><![CDATA[<p>个人blog再一次搬家，从 Google Application Engine (GAE) 搬到 github 上来。原来的<a href="http://good-good-study.appspot.com/">地址</a>依然能够访问，但是不会再更新了，新文章都发到这里。Feed订阅地址不变，建议使用Google Reader订阅本站。</p>

<h2 id="section">搬迁原因</h2>

<p>上一次从blogbus搬到GAE，是因为忍受不了审查制度。GAE后来也被墙了，但是即使如此，我也不会为了读者数量而再使用国内的blog服务，在被审查的状态下写东西。</p>

<p>这次搬到github，最主要的动机是为了使用<a href="http://octopress.org/">Octopress</a>这个blog framework。</p>

<h3 id="section-1">好玩</h3>

<p>这个是最重要的原因。写blog不是什么正事，本来就是兴趣而已。之前搬离blogbus，选择了GAE的原因就是尝试一下GAE和PlayFramework编程。这次就是为了尝试Octopress。</p>

<h3 id="markdown">使用markdown写作</h3>

<p>Octopress使用markdown语法。接触markdown语法是在github项目的README页面上，还有<a href="http://stackoverflow.com">StackOverflow</a>里发帖用的也是markdown。刚开始觉得又是另一种wiki语法，但慢慢习惯了发现很好用：语法不太复杂，常用的格式不难记住；基本上常用的格式都覆盖了，实在不行还可以直接写HTML；原始文本的阅读性很好，不像HTML没法直接看；排版容易，文本编辑器就可以，而HTML的WYSIWYG编辑器生成的内容经常格式错乱需要手工再编辑。</p>

<h3 id="section-2">访问速度提高</h3>

<p>原来在GAE上的blog因为访问量少，服务进程闲置一段时间就会关闭，新请求进来要实例化新服务进程。我用的是PlayFramework，每次初始化都要等上十来秒左右，因此打开首个页面一定要等，体验很不好。</p>

<p>Octopress是在本地生成HTML页面后静态发布，速度自然不慢。不过缺省页面模版有些引用的资源下载速度不快，也有些可能被墙了，影响页面加载时间，下一步需要优化一下。</p>

<h3 id="section-3">版本管理与备份</h3>

<p>Octopress最好用的特性就是跟github集成，发布到github上。整个blog就是一个git project，天然就有版本管理了。放在github上，我也不需要考虑备份问题了。</p>

<h3 id="section-4">目前没有被墙</h3>

<p>目前github是可以直接访问的，因此可以方便大陆读者。不过这个是最次要的原因了，因为作为一个优秀的网络服务，github说不定哪天就被GFW给认证了。另外，前面说过页面里面嵌入的某些资源是被墙的，我还没有测试过对访问会带来什么影响。</p>

<h2 id="section-5">搬迁过程</h2>

<p>Octopress的搭建不算难，需要安装ruby和一些gem，按照文档指导，再Google一下就能搞掂。按照文档做了一些配置，也没什么问题。缺省不支持tag，找了两个<a href="https://github.com/robbyedwards/octopress-tag-pages">插件</a>装上去。模版和theme都用缺省的，稍微改了一点点，反正不在乎有没有个性了，我自己做也不一定好看，以后再说吧。缺省style显示不出表格，也需要改一点css。网上的资料不少，遇到问题Google一下大都能找到答案。</p>

<p>然后就是旧文章的迁移了，我原来的blog能够将所有数据用json格式导出，现在就要将它转换成新系统的文件格式；原来的文章正文是HTML，需要转换成markdown语法。不懂ruby，于是找了个python写的转换工具<a href="http://www.aaronsw.com/2002/html2text/">html2txt</a>，自己再写点脚本就好了。</p>

<p>问题还是有一些的：</p>

<p>Post的时间很奇怪：如果精确到秒，Octopress(其实是Jekyll)会认为这是UTC时间，在generate的时候变换为本地时区，页面里的帖子时间就加了8个小时；如果不精确到秒，只是分钟，那它就会当做本地时间而不做变换。我都不知道这是by design还是bug，不懂ruby看了下代码不得要领。后来我就把时间全部都改成只保留到分钟，绕开这个问题算了。</p>

<p>Ruby不支持中文URL，因此有几个问题：</p>

<ol>
  <li>文章URL不能是中文</li>
  <li>tag URL不能是中文</li>
  <li>文章中不能带有中文URL的链接。</li>
</ol>

<p>对于1，可以不用标题而只是用id来做post URL，但我觉得permalink还是用标题更cool一些，将中文翻译成英文好了。Google translate的API不公开了，本来想用Bing translate的API，但它要用OAuth2认证，我嫌要写太多代码了，后来找到有道翻译的API，效果还行。</p>

<p>对于2，因为tag的URL与显示是一致的，不能象post permalink那样做。网上的一些解决方法都比较复杂，不能保证日后升级兼容性，我干脆全部用英文做tag算了。</p>

<p>对于3，搜索了一遍旧文章，只有一个链接是中文的，而且已经失效了，故此也不需要花功夫了。</p>

<p>最后，就是还需要人工去check一遍老文章，看看自动转换的格式有没有问题，顺便回顾一下以前写的东西，有需要修改补充的就更新一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[试验 Octopress 的各种特性]]></title>
    <link href="http://aleung.github.com/blog/2012/06/24/try-octopress-markdown-features/"/>
    <updated>2012-06-24T23:08:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/06/24/try-octopress-markdown-features</id>
    <content type="html"><![CDATA[<p>这个blog使用的markdown解释器是<a href="http://kramdown.rubyforge.org/quickref.html">kramdown</a>，比起标准markdown有所增强。再加上Jekyll的一些插件特供的特殊功能。</p>

<h2 id="markdown">Markdown基本语法</h2>

<h3 id="section">标题</h3>

<p>标题用<code>#</code>开头，一个井号是一级标题，两个井号是二级标题，井号越多字体越小。</p>

<p>一级标题也可以通过在标题的下一行用<code>========</code>来标注，二级标题就是<code>---------</code>。更小的标题就不能用这种方式了。</p>

<h3 id="section-1">链接</h3>

<p>格式：</p>

<pre><code>[text](link)
</code></pre>

<h3 id="section-2">图片</h3>

<p>与链接类似，区别是前面增加叹号<code>!</code>：</p>

<pre><code>![text](link)
</code></pre>

<p>另一种图片语法是由插件支持的，用<code>{</code> <code>%</code>包围的img标签，后面跟着图片URL，在URL前可以加入可选的css class名称，如：<code>left</code>, <code>right</code>，得到文字环绕效果。</p>

<h3 id="blockquote">引用 (blockquote)</h3>

<p>用<code>&gt;</code>开头的一个段落：</p>

<blockquote>
  <p>Stay hungry…
stay foolish.</p>
</blockquote>

<p>用四个空格缩进的段落，会按原始格式显示，相当于HTML的<code>&lt;pre&gt;</code>的效果：</p>

<pre><code>+----+
|    |
+----+
</code></pre>

<p>也可以通过在原始格式引用段落的前后各加一行波浪号<code>~~~~~~</code>来实现。(这是kramdown特有的语法)</p>

<h3 id="section-3">显示效果</h3>

<p>用<code>*</code>或<code>_</code>包围的文字会用斜体显示：</p>

<p>Some of these words <em>are emphasized</em>.</p>

<p>如果双重符号<code>**</code>或<code>__</code>则会用粗体显示：</p>

<p>Use two asterisks for <strong>strong emphasis</strong>.</p>

<p>用<code>`</code>包围的文字按代码格式显示。</p>

<h3 id="section-4">列表</h3>

<p>用<code>*</code>, <code>+</code>, <code>-</code>开头的行都会作为列表项。子项缩进两个空格。</p>

<ul>
  <li>加号开头的段落
    <ul>
      <li>缩进两个空格，加号开头
        <ul>
          <li>再缩进两个空格，三级项目</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>其次</li>
</ul>

<h2 id="section-5">表格</h2>

<p>注意第二行的分割线的冒号位置，决定了这一列的对齐方式。</p>

<pre><code>No.   | Name    | Status  |
-----:|:--------|:-------:|
1     | Alaph   | done    |
2     | Beta    | ongoing |
10000 | Release | n/a     | 
</code></pre>

<p>效果：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: right">No.</th>
      <th style="text-align: left">Name</th>
      <th style="text-align: center">Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">1</td>
      <td style="text-align: left">Alaph</td>
      <td style="text-align: center">done</td>
    </tr>
    <tr>
      <td style="text-align: right">2</td>
      <td style="text-align: left">Beta</td>
      <td style="text-align: center">ongoing</td>
    </tr>
    <tr>
      <td style="text-align: right">10000</td>
      <td style="text-align: left">Release</td>
      <td style="text-align: center">n/a</td>
    </tr>
  </tbody>
</table>

<h3 id="section-6">脚注</h3>

<p>增加脚注<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>很简单，就是这样：<code>[^1]</code></p>

<p>脚注定义的写法是以<code>[^1]: </code>开头，后面跟着定义。</p>

<h2 id="section-7">嵌入代码</h2>

<p>下面的嵌入代码的方式都是由插件提供的，并非markdown语法。</p>

<h3 id="section-8">代码高亮</h3>

<pre><code> ``` [language] [title] [url] [link text]
 code snippet
 ```
</code></pre>

<p>效果：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>HelloWorld.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
</span><span class="line">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello, World&quot;</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="gist">嵌入Gist</h3>

<div><script src="https://gist.github.com/2934603.js?file="></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; 
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;
    default-autowire=&quot;byType&quot;&gt;

    &lt;context:property-placeholder location=&quot;file:bin/leoliang/spring/test1/bean.properties&quot;/&gt;

    &lt;bean id=&quot;fooA&quot; class=&quot;leoliang.spring.test1.FooImplA&quot; /&gt;
    &lt;bean id=&quot;fooB&quot; class=&quot;leoliang.spring.test1.FooImplB&quot; /&gt;
    
    &lt;bean id=&quot;bar&quot; class=&quot;leoliang.spring.test1.Bar&quot;&gt;
        &lt;property name=&quot;foo&quot; ref=&quot;${foo_bean_id}&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</code></pre></noscript></div>

<p>方法是写一个用<code>{</code> <code>%</code>包围的gist标签，后面带上id。</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>脚注一定会显示在最末尾。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些读书记录]]></title>
    <link href="http://aleung.github.com/blog/2012/06/09/Some-reading-record/"/>
    <updated>2012-06-09T11:56:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/06/09/Some-reading-record</id>
    <content type="html"><![CDATA[<p>前几个月看了些软件开发相关的书，读的时候有时有感悟就发条tweet，在这里备份一下。  </p>

<h3 id="httpbookdoubancomsubject6526454"><a href="http://book.douban.com/subject/6526454/">梦断代码</a></h3>

<p>开始阅读《梦断代码》，一个历时多年的软件项目惨败的故事。其实类似的案例很多很多，不过大家都不愿意承认失败，或者将失败轻描淡写而已。</p>

<p>可复用软件之梦有一悖论：几乎总能找到一段满足大部分需要的代码，但这些拿来的代码所不能做到的部分，恰是本项目与众不同的创新之处。</p>

<p>软件开发的时间估算始终是恒久难题，敏捷方法能做到的只是对于短期估算有改善：通过任务切分和开发团队亲自估算让数值看起来可靠些，通过计算迭代速率等手段让估算值反映团队近期状态；但对于长期估算，答案依然是：你丫别问了，到时自然就知道。</p>

<p>《梦断代码》讲了一帮聪明人是怎么把事情搞砸的。因此我非常感兴趣Linux项目是怎么运作的，Linus怎么把这么多聪明人弄到一起合作，而且似乎成效相当不错。</p>

<p>在周五下班的地铁上看完了《梦断代码》，没有做计划也没有刻意定目标，但已经是在周五读完的第三本书，每周一本。就像连续三个叠代都准时交付。</p>

<h3 id="httpbookdoubancomsubject5406042"><a href="http://book.douban.com/subject/5406042/">设计原本</a></h3>

<p>一个设计，一个人能完成就不要让其他人参与，增加的人手会削弱设计的一致性，概念的完整性。一个职责，一个部门负责就好，多部门合作带来各自的利益考虑和冲突。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《程序员的思维修炼》读书笔记]]></title>
    <link href="http://aleung.github.com/blog/2012/06/05/The-programmer-thought-of-uniting-the-reading-notes/"/>
    <updated>2012-06-05T22:27:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/06/05/The-programmer-thought-of-uniting-the-reading-notes</id>
    <content type="html"><![CDATA[<p>《<a href="http://book.douban.com/subject/5372651/">程序员的思维修炼—-开发认知潜能的九堂课</a>》，国内书商起个怪名字，其实重点在副标题。 原书标题根本不是这样的。</p>

<h2 id="dreyfus">德雷福斯(Dreyfus)技能模型</h2>

<h3 id="novice">新手(Novice)</h3>

<p>新手缺乏经验，完成任务时需要操作指引。</p>

<p>即使某人在一个领域上工作了十年，对所有指引已经了然于心，但他只是不断重复执行指令，也依然是新手。</p>

<h3 id="advanced-beginner">高级新手(Advanced beginner)</h3>

<p>能执行要做的任务并根据需求学习新任务，但没对任务环境获得更广泛的概念上的理解，缺乏全局思维。</p>

<p>高级新手占了绝大部分比例，但他们常高估自己，因为不知道自己不知道什么。</p>

<h3 id="competent">胜任者(Competent)</h3>

<p>胜任者能够独立解决问题。</p>

<h3 id="proficient-practitioner">精通者(Proficient practitioner)</h3>

<p>精通者懂得反思，自我纠正，从自己和他人的经验中学习。</p>

<h3 id="expert">专家(Expert)</h3>

<p>专家凭直觉工作，基于他们在领域中的丰富经验，在恰当的情景中选取和应用这些经验。</p>

<p>专家对问题思考时将所有方面作为一个完整和独特的整体来考虑，而不仅是关注相关方面。</p>

<p>处理问题时，新手需要指引(instruction)，专家依靠直觉。不给新手指引，或者要求专家跟随指引，都会降低生产力。</p>

<p><em>按照前面说那个技能模型的定义，看看自己，在大部分领域都只是高级新手，少量能到胜任者，连精通都算不上。</em></p>

<h2 id="section">隐性思维</h2>

<p><em>原文中为R型思维，R指右脑，但作者认为左右脑区分并非真实情况，将L解释为线性(linear)模式R解释为富(rich)模式。我按照自己的理解将R型思维看成隐性思维。</em></p>

<p>发挥隐性思维，捕获闪现灵感，随时准备着记录下来。</p>

<p>隐性思维会被压抑，在一种思维不受控制的状态下，隐性思维才会发挥作用。</p>

<p>重视你的直觉，但要去验证它，而不是盲目在第一时间跟随直觉行动。</p>

<p>隐性思维是非线性的，它从你的记忆库中匹配关联，多学习接触不同类别的东西，为隐性思维累积素材。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用手机遥控Linux后台播放豆瓣电台]]></title>
    <link href="http://aleung.github.com/blog/2012/03/10/By-mobile-phone-remote-control-Linux-backstage-radio-broadcast-requirements/"/>
    <updated>2012-03-10T00:35:00+08:00</updated>
    <id>http://aleung.github.com/blog/2012/03/10/By-mobile-phone-remote-control-Linux-backstage-radio-broadcast-requirements</id>
    <content type="html"><![CDATA[<p>最近买了一个<a href="http://en.wikipedia.org/wiki/Asus_EeeBox_PC">EeeBox</a>来做home server，装Ubuntu操作系统，有不少东西可以玩。</p>

<p>其中一个用途是连接到音响播放音乐。我比较喜欢听豆瓣电台，于是找一个豆瓣电台的客户端。Home server平常不接显示器，也不启动图形界面，常见的浏览器客户端、桌面客户端都不能用，要找命令行的。在github上找到Johnny Huang开发的<a href="https://github.com/hzqtc/fmd">fmd</a>（Douban FM daemon），启动后在后台运行，正合我意。Fork下来给它增加了个安装脚本，能够安装为服务，开机就自动运行了。但fmd只是个后台进程，只有telnet命令接口，没法对它进行直接控制的，作者另外做了个命令行工具，叫做fmc（FMD client），用来控制fmd。但命令行工具在我这里也还是不能用—-没有显示器没有键盘—-必须能遥控才行。于是我在fmc基础上给它增加了一个web UI，称为<a href="https://github.com/aleung/fmweb">fmweb</a>，通过手机浏览器访问，就可以控制播放了。于是，我现在在家里任何地方，都可以控制我的豆瓣电台的播放，不喜欢听，跳下一首歌。</p>

<p>这是在Android浏览器上的截图，在iPhone、iPad上也可以用。</p>

<p><img src="https://lh6.googleusercontent.com/-ishGby7lpTk/T1ove7Z0-rI/AAAAAAAAAoU/94_iFdmfSKw/s400/Screenshot_2012-03-09-23-41-13.png" alt="" /><img src="https://lh5.googleusercontent.com/-zXp_XdbbgNk/T1ovfpnkxbI/AAAAAAAAAoc/CN-7dV4U4Xg/s400/Screenshot_2012-03-09-23-55-39.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Good good study, day day up]]></title>
  <link href="http://aleung.github.io/blog/atom.xml" rel="self"/>
  <link href="http://aleung.github.io/blog/"/>
  <updated>2014-06-21T18:41:21+08:00</updated>
  <id>http://aleung.github.io/blog/</id>
  <author>
    <name><![CDATA[Leo Liang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[跑步日記]]></title>
    <link href="http://aleung.github.io/blog/2014/06/21/run/"/>
    <updated>2014-06-21T18:19:08+08:00</updated>
    <id>http://aleung.github.io/blog/2014/06/21/run</id>
    <content type="html"><![CDATA[<p>今天難得的陰天，早上下過雨，溫度30℃出頭，沒有早幾天那麽酷熱，也有點風。
磨磨蹭蹭，早上10點半才出發。熱身段過後，按5’30”配速，從江灣橋過河南，沿江邊一直往東跑。</p>

<p>過了廣州塔，就到獵德大橋，大概10km位置。這時我面臨著一個艱難的選擇：上橋，就過到珠江新城然後沿江邊往回走，穿過二沙島回家，這是跑過好多次的路線，大概十七八公里左右。如果直走，就一直要到琶洲大橋才能過橋，到了北岸往回跑，要到家路程估計有近30公里，這時我從沒有跑過的距離。在我的大腦還在激烈思想鬥爭的時候，雙腿肌肉已經作出了決定——直走。</p>

<p>考慮到前路漫漫，將速度下降到5’50”。這時接近正午時分，雖然沒有太陽直射，人也比較熱，心率上升到接近160。找賣水的地方，但琶洲一帶很荒蕪，估算著也撐到過了琶洲橋後也沒問題。</p>

<p>13.5km處上橋，這橋真長，足足一公里。過了琶洲大橋下來，14.6km，去超市買運動飲料喝，停了幾分鐘。這麽一停下來，就沒法重新跑起來了，完全不想動。繼續跑後氣喘得很厲害，隔夜風爐都吹得著，腳擡不起，步頻下降了很多。將速度下降到6’30”了，希望能夠慢慢適應過來。堅持了一段，毫無起色，終於在過了華南大橋底，到了17km處放棄了。不清楚為什麼買水停了一下後狀態會突然變得那麽差，看回數據，過橋前的速度還是保持得比較平穩的5’50”左右。以前我也有經驗是不能停，一旦停下就很難重新回復狀態，但慢慢適應一段時間後還是可以的，這次完全不行。</p>

<p>找不到廁所，鑽進樹叢裏面尿尿。舒暢完後渾身酥軟，一轉身沒站穩跟身後樹幹長滿刺的木棉樹來了個親密接觸。</p>

<p>沿著江邊走，中午很寧靜，人不多，只有知了在不知疲倦的叫。突然覺得這個環境很舒服，享受一下時光吧，在榕樹陰下的石凳坐下，冰冷的石頭冷卻著大腿的肌肉，涼風吹拂身上的汗水。出來跑步什麼都沒有帶，不用再習慣性的拿手機來看，就讓時間的碎片留白，就是那樣靜坐著，看著開闊的江面，感覺那TMD不就是幸福麽。所以人都是自己感動自己的，要不哪來那麽多感人的事情。</p>

<p>歇了一會，將運動飲料全喝完了，感覺恢復了一些，起來繼續跑一下，邊跑盤算著後面還能再跑多遠。但是，跑累了的時候就是靠內心去堅持的，原來一直習慣了喘著氣的狀態，可以一直跑下去，一旦享受過停下休息的舒服後就承受不了之前那種苦了。最後跑到珠江新城地鐵站收官，累計20.5km。後面這段其實心率還在正常範圍，肌肉沒有不適，就是步頻慢了，按理說這個狀態還可以繼續跑上好一段距離的。</p>

<p>另一方面，今天跑的狀態看來確實不是那麽好，跑完幾個小時的感覺比以往跑這個距離要累。
回來看數據，感覺步頻似乎是反應體力狀態的一個直觀指標，從8.4km起步頻明顯下降了一個台階，而14.6km買水後步頻更是嚴重下降。另一方面，心率跟狀態有什麼關聯也還不是很清晰，每次跑步隨著疲勞累積，心率都是不斷升高的。但看以往的記錄，心率到160多速度依然保持的也有。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[中國電子地圖偏移]]></title>
    <link href="http://aleung.github.io/blog/2014/04/03/zhong-guo-di-tu-pian-yi/"/>
    <updated>2014-04-03T07:43:45+08:00</updated>
    <id>http://aleung.github.io/blog/2014/04/03/zhong-guo-di-tu-pian-yi</id>
    <content type="html"><![CDATA[<p>幾年前我寫過對Google中國地圖偏移規律的分析(<a href="http://aleung.github.io/blog/2009/12/26/Google-China-Map-offset-1/">1</a>)(<a href="http://aleung.github.io/blog/2009/12/27/Google-China-Map-offset-2/">2</a>)，根據抓取到的偏移量數據，大概看出呈現了<code>sin(a)+sin(3a)</code>這樣的函數曲線規律，並且這個函數以不同頻率和幅度疊加了兩次。當時我推導出函數及其係數，利用它去校正偏移，在百公里範圍的區域內已經非常理想，但是在全國大範圍的不同區域，係數需要有點不同，也就是擬合函數還是差了一些低頻率的細節。不過當時的分析細節我也不敢在博客裏面寫，後來我也沒有再搞地圖方面的應用開發了，就把這個放下。</p>

<p>實際上這個地圖偏移並不是Google自己搞的算法，而是國家測繪局以立法的形式統一要求加的，稱為地形图非线性保密处理，所有從事國內電子地圖的廠商應該都得到了這個算法，實際上並起不到什麼所謂保護國家安全和國家利益的作用（保護行業壟斷者利益倒是真的），但是這個地圖偏移對地理信息處理和GPS技術的民用化起到了巨大的阻礙作用，近年各種與地理位置相關的應用如雨後春筍般湧現，但都為中國地圖的偏移而頭痛不已，後來由於下面提到的算法的流傳，問題得以解決，但增加很多不必要的複雜性和浪費開發、數據處理的人力。在我看來，這個地圖非線性加密處理在地理信息領域就像GFW在互聯網信息領域一樣，浪費了大量社會財富來對技術發展與應用進行封鎖。<a href="http://baike.baidu.com/view/2356807.htm#2_2">李成名</a>，你真的成名了。</p>

<p>感謝Internet，感謝open source，現在這個偏移算法在網上已經可以輕松找到了。</p>

<p>網上流傳的原始算法是<a href="http://emq.googlecode.com/svn/emq/src/Algorithm/Coords/Converter.java">這個Java文件</a>，然後有人整理過代碼，接力開發出多種語言版本。在『A Fork of Stuffs』博客裏，<a href="http://blog.csdn.net/coolypf/article/details/8686588">地球坐标系 (WGS-84) 到火星坐标系 (GCJ-02) 的转换算法</a>給出了C#實現，這個博客另外一篇<a href="http://blog.csdn.net/coolypf/article/details/8569813">火星坐标系 (GCJ-02) 与百度坐标系 (BD-09) 的转换算法</a>也很有用。而使用比較方便應該是下面的github代碼庫：</p>

<ul>
  <li><a href="https://github.com/googollee/eviltransform">googollee/eviltransform</a>: C, go, JavaScript, php語言版本</li>
  <li><a href="https://github.com/Leask/EvilTransform">Leask/EvilTransform</a>: Java和C#語言版本，似乎就是將前面介紹的代碼收集到github裏面，沒有改動。</li>
</ul>

<p>另外，github裏還有一個項目 <a href="https://github.com/fourcels/lbs">fourcels/lbs</a> 是用查表法來糾偏的，裏面的偏移數據（共9M）說不定就是早期從Google地圖服務上抓下來的。但現在有了算法，查表法的價值就不大了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pebble]]></title>
    <link href="http://aleung.github.io/blog/2014/03/15/pebble/"/>
    <updated>2014-03-15T21:52:22+08:00</updated>
    <id>http://aleung.github.io/blog/2014/03/15/pebble</id>
    <content type="html"><![CDATA[<p><a href="http://getpebble.com/">Pebble手錶</a>戴了兩個星期，如果用一句話來總結感受，那就是：基本滿意，但還沒到愛不釋手的程度，沒有帶來驚喜。</p>

<p>首先，Pebble真的是一隻手錶，可以看時間。如果你有幸用過各種『智能手環』，就會明白為什麼這麽說了。我戴過<a href="https://jawbone.com/up">Jawbone UP</a>一段時間，試過好多次下意識的擡起手腕來看，然後才想起那貨是沒有任何顯示的。</p>

<p><img class="right" src="http://aleung.github.io/blog/attachments/2014/3/pebbles.jpg" /></p>

<p>佩戴舒適度上說，Pebble還過得去，塑料錶帶的柔軟度不錯，反正我已經習慣了24小時戴在手腕上的感覺。在這之前，我都有十幾年沒有戴過手錶了吧。</p>

<p>外形應該是我最不在意的一項了，但不得不說 Pebble 外形上太普通。我的黑色版本，正面看弧形表面，與黑白顯示屏融為一體，還算有點現代感，但側面看就很『薯鈍』的樣子 —— 厚，按鈕粗曠，左邊還有很突兀的幾個充電觸點。</p>

<p>手錶用的是 144x168 的低分辨率黑白e-paper屏幕，在現在手機電腦都視網膜屏的時代，這個分辨率真是超低了。E-paper的對比度很高，無論什麼光線條件下都非常清晰，雖然分辨率低，實際顯示文字的效果還是不差的。圖像？就算了吧，除了像素少，這個屏還連灰度都顯示不了。不知道這個e-paper跟Kindle之類閱讀器的屏是不是同樣的技術，但看起來還是有區別：Pebble屏的像素邊緣很銳利，顯示直接改變沒有殘影，不像Kindle要全屏反色刷一次。</p>

<p>Pebble 可以安裝 app，當然了，否則就對不起 smart watch 這個名字。App 分為 watchface 和 watchapp 兩大類，無論是那種也不管大小，總共最多安裝8個，不知道它內部怎麼管理空間的。Watchface 只有一屏顯示信息，不能接受按鍵控制，最常見用途是顯示時間，當然也可以顯示其他信息，例如天氣、日曆之類。Watchapp就是可以與用戶交互的應用，可以有多屏，用戶通過菜單、控制按鈕來操作。</p>

<p>Pebble 的方便之處是它作爲手機的一個延伸的信息終端，手機可以將實時的信息推送到手表上，或者是在手表上顯示濃縮的手機應用的某些信息。前者例如，我以前經常會漏接電話或者漏看短信，因爲手機放袋裏聽不到聲音，現在戴著 Pebble 就不會了，因爲手表會振動提醒。後者例如一些跑步應用，能在 Pebble 上顯示速度、距離等關鍵信息，就不用拿手機出來看。</p>

<p>Pebble 最大的問題是操控不方便。表上有四個按鈕：上/下/Enter/ESC，沒有觸摸屏，任何操作都只能靠按鍵選擇菜單項，因此經常要按好多次按鈕才能完全想要的操作。而 Pebble 的按鈕按起來又不算是特別方便，總之我是不會想在手表上做按超過一兩次按鈕的操作的。這種操控的不方便限制了app可以做的事情，感覺這個比起屏幕和表的硬件處理能力的限制還要大。Pebble 也不支持 app 後台運行，要求在手錶上跑多任務，電池撐不住吧，但沒有多任務也造成一些類型的 app 沒法做了。</p>

<p>至于耗電，目前還不至于很大問題。官方宣傳可以用5-7天，我實際用下來只有3天，也不知道是軟件問題還是硬件問題。但3天其實還是可以接受的。</p>

<p>最後介紹一下我現在常用的app：</p>

<h5 id="watchface">Watchface</h5>

<p><img class="right" src="http://aleung.github.io/blog/attachments/2014/3/postage_watchface.png" />
<img class="right" src="http://aleung.github.io/blog/attachments/2014/3/agenda_watchface.png" /></p>

<dl>
  <dt>Agenda Watchface</dt>
  <dd>
    <p>在辦公室或者需要按日程做事的時候會用這個watchface，一眼就能看到當前時間和接下來的日程安排。</p>
  </dd>
  <dt>Postage</dt>
  <dd>
    <p>當我不需要看日程安排的時候，喜歡用這個face，夠簡潔，外圍的黑色與黑色表身融為一體。實際看起來比截圖好看很多。</p>
  </dd>
</dl>

<h5 id="watchapp">Watchapp</h5>

<p><img class="right" src="http://aleung.github.io/blog/attachments/2014/3/pebbleauth.png" /></p>

<dl>
  <dt>PebbleAuth </dt>
  <dd>
    <p>二步認證的token生成器，相當於 Google Authenticator 運行在手錶上，這樣更加安全啦。現在除了 Google，LastPass 和 EverNote 都支持二步認證了。</p>
  </dd>
  <dt>Sleep as Android</dt>
  <dd>
    <p>我買 Pebble 就是因為看到 Sleep as Android 支持 Pebble 了，才動了心的。這個應用利用 Pebble 上的運動傳感器監控睡眠的深淺度，早上能夠在合適的淺睡眠週期通過振動叫醒。我以前就在用 Sleep as Android，但要用手機的運動傳感器，所以手機要放在床墊上，現在戴著手錶就行了，手機可以放遠一些。</p>
  </dd>
</dl>

<p><img src="http://aleung.github.io/blog/attachments/2014/3/sleepaspebble.png" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text to UML diagram]]></title>
    <link href="http://aleung.github.io/blog/2014/01/20/text-to-uml-diagram/"/>
    <updated>2014-01-20T22:10:00+08:00</updated>
    <id>http://aleung.github.io/blog/2014/01/20/text-to-uml-diagram</id>
    <content type="html"><![CDATA[<p>Usually I used <a href="http://astah.net/">Astah</a> to draw UML diagram to put into design document in MS Word or PowerPoint format. The separation of the source and generated file making management of the UML model file a problem. And also it’s annoying to adjust a large amount of elements by dragging with mouse whenever you add something in the diagram. For a coder, typing on keyboard is faster than drawing with mouse.</p>

<p>Now I switch to <a href="http://plantuml.com/">PlantUML</a>. Just write UML in its <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> and PlantUML generates the diagram. It supports most of the frequent used UML diagrams, which I use most are sequence diagram, class diagram and state diagram. Then I paste the generated diagram into slides (design document) and keep the “source” in note. No need to wonder where to find original UML model file when I need to update the diagram.</p>

<p>The core of PlantUML is simply a jar file. It parses the text input and depends on <em>dot</em> tool from <a href="http://www.graphviz.org/">Graphviz</a> for graph generation (except sequence diagram). </p>

<p>There are <a href="http://www.plantuml.com/running.html">a bunch of ways</a> to run PlantUML. I highlight some of them I prefer:</p>

<ul>
  <li>Online editor. Best choice if you’re too lazy to install anything on your computer.</li>
  <li>Desktop (Windows): <a href="https://code.google.com/p/plant-uml-file-watcher/">PlantUML File Watcher</a></li>
  <li>Embedded into Octopress blog platform. The below examples are using it.</li>
  <li>IDE plugin. Easy way to keep UML together with source code.</li>
</ul>

<p>The syntax of PlantUML’s DSL is quite intuitional, you can start to use it by following example.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">package ConsentObject &lt;&lt;Rect&gt;&gt; {
</span><span class="line">  Consent : id
</span><span class="line">  Scope : key
</span><span class="line">}
</span><span class="line"> 
</span><span class="line">Client - User
</span><span class="line">(Client, User) . Consent
</span><span class="line"> 
</span><span class="line">Consent - "*" Scope
</span><span class="line"> 
</span><span class="line">Consent "1" -- "1..*" AccessToken</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The generated diagram:</p>

<p><img src="http://aleung.github.io/blog/images/plantuml/ffe2231fbbf2c03843a63167a4e1057a.png" /> </p>

<p>A sequence diagram example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class=""><span class="line">title OAuth 2.0 Authorization Code Grant
</span><span class="line">
</span><span class="line">actor    UserAgent       as UA
</span><span class="line">participant Application     as APP
</span><span class="line">participant OAuthServer     as OAuth
</span><span class="line">participant ResourceServer  as RS
</span><span class="line">
</span><span class="line">== Application requests authorization from user ==
</span><span class="line">UA-&gt;APP: 
</span><span class="line">APP--&gt;UA:redirect to OAuth Server
</span><span class="line">UA-&gt;OAuth: GET /authorize?response_type=code
</span><span class="line">ref over UA, OAuth: user authentication\nuser confirms reqest
</span><span class="line">OAuth--&gt;UA: redirect to App with authorization_code
</span><span class="line">UA-&gt;APP: authorization_code
</span><span class="line">
</span><span class="line">== Application retrieve access token ==
</span><span class="line">APP-&gt;OAuth: POST /token with authorization_code
</span><span class="line">ref over APP, OAuth: client authentication
</span><span class="line">APP&lt;--OAuth: access_token
</span><span class="line">
</span><span class="line">== Application access protected resource ==
</span><span class="line">APP-&gt;RS: getResource with access_token
</span><span class="line">RS-&gt;OAuth: validateToken(access_token)
</span><span class="line">RS--&gt;APP: result</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://aleung.github.io/blog/images/plantuml/a73e1bc6787042a73befa2944361b18c.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[拦截Android应用HTTPS通讯内容]]></title>
    <link href="http://aleung.github.io/blog/2013/12/08/intercept-android-https-traffic/"/>
    <updated>2013-12-08T15:03:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/12/08/intercept-android-https-traffic</id>
    <content type="html"><![CDATA[<p>昨天在捣弄 <a href="http://micoach.adidas.com/">miCoach</a> 到 <a href="http://nikeplus.nike.com/">Nike+</a> 的数据迁移，到了最后一步发现调用 Nike+ API 需要传送client_id和client_secret，这两个信息是用来认证客户端的，但Nike并没有公开开放API，因此无法申请到client_id。看 <a href="https://github.com/angusws/tcx2nikeplus">tcx2nikeplus</a> 的作者说他是通过查看iPhone应用发送的请求来拿到这两个信息的。但是 Nike+ API 都是走HTTPS的，普通方式的截包看不到加密传输的数据。</p>

<p>要嗅探加密传输，必须通过<a href="http://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">中间人攻击</a>的方式才行。上网搜索一下看看有没有现成工具，果然一搜就找到了：<a href="http://portswigger.net/burp/">Burp Suite</a>。它是一个安全测试工具，功能好像有不少，我这里用它做代理，从中监控应用到服务器的通讯内容。</p>

<p>下面记录大致操作过程。</p>

<p>在PC上安装运行Burp，设置 Proxy - Options - Proxy Listeners，让它监听合适的地址和端口，并且选择 “Generate CA-signed per-host certificates”。</p>

<p>将浏览器代理指向Burp proxy，访问任意一个https地址，Burp这时是中间人，它会用自己的根证书(PortSwiggerCA)签发一个目标服务器的证书，替换了真正服务器的证书。浏览器应该会有安全报警，因为系统并不信任签发这个证书的CA。查看证书详细信息，选择根证书并且信任这个根证书，就会把PortSwiggerCA的证书加入到系统的信任列表中。</p>

<p>要将这个根证书装进Android，需要先从系统 key chain 里将它导出到文件（.pem格式），然后执行下面的命令将它转换为DER格式后缀为.crt的文件。</p>

<pre><code>openssl x509 -in PortSwiggerCA.pem -inform PEM –out PortSwiggerCA.crt -outform DER
</code></pre>

<p>接下来，将 PortSwiggerCA.crt 放入Android的sdcard，在系统安全菜单中安装证书。证书安装后，Android系统就会信任所有Burp签发的证书了。</p>

<p>在Android的WLAN设置代理指向Burp。但很多Android应用都不理会系统的代理设置，不使用系统指定代理，遇到这种情况就要用 <a href="https://play.google.com/store/apps/details?id=org.proxydroid">ProxyDroid</a> 来设置GlobalProxry（手机要root）。设置好了，在Burp里面就能够拦截到Android应用的HTTPS通信明文了。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/12/burp.png" /></p>

<p><em>注意：为确保安全，测试完之后要将 PortSwiggerCA 这个根证书从PC和Android系统信任列表中删除。如果不是临时使用，应该要用自己的证书代替Burp提供的证书。</em></p>

<p>这个故事告诉我们，中间人攻击并不是那么复杂的事情。特别是终端应用开发者，不可寄望于通过加密传输来隐藏应用到服务器的协议细节，要逆向工程是很容易的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013广州马拉松半程小结]]></title>
    <link href="http://aleung.github.io/blog/2013/12/01/2013-gz-half-marathon/"/>
    <updated>2013-12-01T20:03:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/12/01/2013-gz-half-marathon</id>
    <content type="html"><![CDATA[<p>11月23日，参加了2013广州马拉松的半程赛事，这是我第二次跑半程马拉松，赛会成绩1:55:11，自己按过出发点的计时是1:52:50。这个成绩比上一年要差了一些，2012广州半马的自己计时是1:49:57。但还是完成目标了，我赛前预订的是两小时内完成。</p>

<p>今年的训练是从7月中旬开始的（见：<a href="2013/07/27/first-long-run">今年首次长跑训练</a>），最开始的目标是全程马拉松，但是训练断断续续了好多回：八月初去大辣甲岛坐快艇颠伤了腰；九月中旬肠胃炎病了一回体重一下掉了两公斤；十月中旬出差；十月中旬到十一月中旬咳嗽了一个月。总之一直都没有跟上训练计划，训练强度没有上去，跑全马没有可能了，报名时还是选择半马。咳嗽延续了很长时间，严重到胸口肋骨痛，虽然训练没有完全停止，但很担心这样的身体状态连半马都跑不下来了，幸好到了十一月中旬，赛前两周咳嗽逐步好转。一直都没有怎么跑长距离，都是平常的30分钟，十一月开始才将每次跑量增加到12km左右。11月16日（赛前一周）晚遇上Nike的夜跑活动，那次跑得非常轻松，13km步速5:27，就对完赛非常有信心了。赛前一周内减量，周二周四跑了两次慢速短时间维持运动状态。</p>

<p>从周训练量图上看得出来：太少了，很多时候每周2小时都不够。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/12/run-history-weekly.png" /></p>

<p>今年的路线比去年好多了，都是沿着江边跑。半程路线没有经过老城区，时间也早，观众没有那么多，但气氛也还是比去年好，观众都在热情的叫喊，特别是跑到路边跟一溜的观众一一击掌，兴奋度立马提高，特别有动力。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/12/marathon-route.png" /></p>

<p>早上七点半起跑，我6:40到珠江新城地铁站，一出站到处都是跑手，看到这个场景人就开始有点兴奋了，虽然平日这个时间还在床上呼呼大睡。在歌剧院外面的广场脱了外套和长裤，当天气温比较暖和，没有热身也不怎么冷。跟朋友回合，时间已到7:10，看着出发区密密麻麻的人群，有点心急。幸好今年的存包工作做得很好，不需要排队，然后上厕所，倒是排了上十分钟，一切妥当已经接近起跑时间。广马的出发点空间过于狭窄，只有一条半车道的宽度，早就已经挤满了人。有人在人堆里往前钻，我也跟在他后面钻，好歹往前挪了几十米。离起跑线还是很远很远，也不知道是什么时候鸣枪的，总之听到前面有人欢呼，然后又等了好一会发现人群开始往前移动了。人群基本还是走，我已经是尽量在人缝中钻了，走走停停，到起跑线时已经两分半钟。过了起跑线，还是跑不起来，跑了一小段前面又堵住了，又得走。一直过了大半公里，路面宽了之后，才可以真正跑起来。</p>

<p>起跑后几公里都没有把握好速度。按照2小时内完赛的目标，我给自己预定的配速是5’20”~5’30”之间。路面宽阔后，大家的速度都加上去了，一听 miCoach pacer 报速度，步速已经到 5’10” 左右了，于是就把速度降下来。在赛事中跟自己平常训练很不一样，平常起跑的速度都比较慢，要跑上十来分钟速度才加得上去，而在赛事中兴奋度高了，跟着其他人一下子就跑得比较快，自己一点感觉都没有，还以为慢。怕跑快，控制速度后，又压得太慢了，降到了5’40”。在四五公里左右还感觉右小腿肌肉有点僵硬感。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/12/first5k.png" /></p>

<p>过了前半小时，大概跑顺了进入状态。特别是车陂路第一个折返点后，一路都跑得很顺畅，步速基本上都在5’20”以上。回到珠江新城路段，沿路观众也多起来，我也喜欢回应一下观众，跑近路旁，挥挥手，甚至击掌，观众喝彩得更热烈，自己也更加兴奋，明显速度会跑快一点。五公里开始有水站，以前跑我不喜欢拿运动饮料，觉得甜了反而不解渴，但这次还是都选择了喝运动饮料，因为可以补充点能量。跟去年不一样，今年饮料是用纸杯分发的，确实这样更合理不浪费，只不过一边跑一边喝的难度不小，估计是喝一半撒了一半。实际上并不感觉渴，喝一两口感觉就可以了，但每5公里的饮料站我都去拿了，而且都全喝完，以保证不缺水，毕竟当天的温度对长跑来说比较高。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/12/6-12km.png" /></p>

<p>10km处有计时显示，已经忘了是多少，当时估算了一下，2小时内完成没什么问题了。12km开始进入猎德大桥路段，感觉依然很轻松。我记到去年到10km时也是感觉非常轻松的，但过了不久就开始疲累，因此也不敢大意。后面这一段路的速度在图上看波动比较大：12~13km猎德大道这短短一段路几个小上下坡：过猎德涌两次；13.5km左右路段是爬猎德大桥的上坡，14km左右是冲下坡；15.5km处磨碟沙隧道下坡又是一轮猛冲，16km是隧道上坡。速度下降得很厉害的地方都是饮水站或者降温海绵站。</p>

<p>在猎德-花城大道折返处拐弯的时候突然听到有人喊我的名字，一看是小春天，举着写上『Leo加油』的一张纸。有点惊喜，没想到她在这里，原来我是让她们在过桥后15、16km路段等的。因为是在拐弯处，当我看到她的时候已经几乎跑过了，匆匆一眼印象中一身很灰的衣服，所以啦啦队也要穿抢眼的衣服啊。然后开始上猎德大桥，虽然比较高，坡度还算是平缓的，减速保持步频上坡，终于过了最高点了，前面有大堆摄影师拦在路上拍照，很多人经过时都摆些pose好上镜，我当时没有意识到这里是一个官方摄影点，只是一心想着下坡可以冲快些。绕过了那群摄影师，突然又听到有人喊我的名字，一看是清风在旁边，也只是来得及挥挥手就冲过去了。一长段下坡，放开脚步狂奔。</p>

<p>疲累感大概是在16km后出现的，冲完磨碟沙隧道下坡后上坡感觉有点吃力了，然后后面的路程就开始没有轻松的感觉，不过这时剩下的路程已经没有多少，看着对面折返的跑全马的跑手，心想：我再跑几公里就完成了，要跑全马的话还要再跑一倍多的距离，多痛苦啊。后面的路程开始一边跑一边默算着剩下的公里数，不过状态也还是不差，可能就是心理上觉得差不多到了失去了动力。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/12/13-18km.png" /></p>

<p>琶洲大桥脚折返后，剩下最后两公里，开始加速做最后冲刺。因为最后有个小弯，一直没有看到终点门楼，有点觉得维持不住速度，直到最后一两百米左右看到终点，这时来劲了还猛冲了一下。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/12/sprint.png" /></p>

<p>全程的心率在缓慢的上升，大概10km后进入黄区(159-165BPM)，除了最后冲刺，基本维持在黄区内。冲线时最高心率175BPM。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/12/heart-rate.png" /></p>

<p>下面是全程的步速与步频曲线，粗线是步频。可以看出速度虽然有波动但全程平均差别不是太大，但前半程的步频基本在180以上，而后半程就下降到180以下了，说明体力下降步伐没有那么轻快了。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/12/stride-rate.png" /></p>

<p>几点总结：</p>

<ul>
  <li>训练量不足；</li>
  <li>体能储备上，半程没有问题，但跑更长距离估计余量不多了，需要增加长距离训练；</li>
  <li>配速不够平稳。miCoach pacer 只能靠语音播报，不像手表可以随时看到数值，定时播报的间隔时间有点长，在没有把握时应该多让它报一下步速。</li>
</ul>

<p>最后感谢亲友团的支持鼓励！希望明年一起跑！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件设计之度]]></title>
    <link href="http://aleung.github.io/blog/2013/10/21/du-of-software-design/"/>
    <updated>2013-10-21T22:30:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/10/21/du-of-software-design</id>
    <content type="html"><![CDATA[<p>上个月在公司里分享的主题。Slideshare上看不到页面的动画效果，页面里的东西混一起了，要下载原PowerPoint文件看才行。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/26482993" width="595" height="487" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen=""></iframe>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今年首次长跑训练]]></title>
    <link href="http://aleung.github.io/blog/2013/07/27/first-long-run/"/>
    <updated>2013-07-27T20:24:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/07/27/first-long-run</id>
    <content type="html"><![CDATA[<p>去年底跑完广州马拉松半程后，一直都没有怎么认真跑步，经常一停就几个星期。转眼间到了7月中，算一下离今年广州马拉松不够四个月了，是时候开始训练。用miCoach做训练计划，选择了全程马拉松，居然第一次训练就是要2小时long run，太狠了。想着之前已经隔天跑，跑了一个半星期，身体应该能承受，那就按计划来吧。</p>

<p>半小时左右，跑到二沙岛过广州大桥，开始有累感。然后是各种累各种想停下的感觉，但好歹步速还在五分多六分多左右。</p>

<p>经过广州塔，江堤上很多游人，景色不错。五十多分钟时过猎德桥，过完桥就开始回程了。
猎德大桥上竟然铺了橡胶，但太软了跑起来反而不好用力。</p>

<p>下桥后停下来吃了根蕉，这一停不得了，再也跑不动了，真是宁可慢不可停。跑了几百米，虽然很慢，但都还是恢复不了跑步状态，大腿小腿都动不起来。才刚回程这样的状态不是办法，只好再停下来做了一轮腿部拉伸。拉伸完之后跑步的状态恢复了，虽然腿还是累。</p>

<p>然后水袋饮水软管和耳机线又在胸前晃来晃去，每跑一步就拍一下身体，很不舒服。前半程卡在背包带上好好的，后面就总卡不稳了，可能是累了后身体晃动厉害了。又得停下来倒弄一番，还不小心把软件弄停了，后面都没有了记录。</p>

<p>这时候刚好跑了一小时。手机不再有跑速语音提醒了，不知道自己的速度。但即使软件不断提醒我要提高速度到绿区，也加不了速了。这时候把步伐稳定下来，控制着小步幅，自我感觉姿态还是保持住的，但步频就提不上去了。一路跑一路在默念着：宁可慢，不可停。一旦停下来，就很难很难再恢复回跑的状态了。我的目标只是时间，不是距离。</p>

<p>就这样默念着，不知不觉也就跑完了花城广场到广州大桥一段，上广州大桥到二沙岛。其实也不远，就两公里。跑着跑着就开始考虑起路线的问题了。先是想：一定要按计划跑够两小时！然后想，按这速度，两小时估计回不到家了，大概到江湾酒店。那么就跑到江湾就停吧。随着疲劳感一波一波袭来，思想斗争不断：看来跑不了这么远了；不行！起码也要到江湾；就到海印吧；现在先别想，撑过下一个路口再说！天啊，这么累，怎么可能跑马拉松啊。在差不多到音乐厅的前一个路口，思想还是放弃了，就坚持跑到二沙中医院的公交车站吧。</p>

<p>当我跑步时，我在想些什么——哪有那么多人生哲理思考，想得只有一件事：什么时候可以停下来！</p>

<p>其实最后步姿还不错，膝盖等关节状态良好，呼吸也还可以，就是大腿抬不起，要坚持在身体上应该还可以的，就是没有战胜自己。有人跑完马拉松后总结：在你感觉已经崩溃的时候，其实至少还可以再跑已经跑过的一半的距离。如果不是出现伤痛，唯一决定性的就是自己的意志。</p>

<p>回家在地图上测了路线距离，大约13.5公里，1小时30分钟，算下来pace 6’40”。同以前的成绩比慢了不少。但这是恢复训练一周半后的第一次long run，算正常，本应该先跑个一小时循序渐进的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[看老罗的锤子发布会]]></title>
    <link href="http://aleung.github.io/blog/2013/04/03/my-opinion-on-smartisan-os/"/>
    <updated>2013-04-03T13:05:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/04/03/my-opinion-on-smartisan-os</id>
    <content type="html"><![CDATA[<p>两个小时，演讲太啰嗦，时间压缩一半可能会精炼很多，乔布斯有这么多废话吗？另外就是老罗一贯的自恋。我突然想找小米首次发布会来看看，看雷布斯的表现如何。老罗已经是名嘴，雷布斯更惨不忍睹？</p>

<p>从发布会的信息上看，锤子是一个做了UI / HI (Human Interface) 优化的Android系统：</p>

<ol>
  <li>更换了System UI（风格基调是iOS的）</li>
  <li>提供以九宫格无背景为特色的Launcher（Android UI优点之一的widget无处容身了）</li>
  <li>替换了所有应用自带的图标</li>
  <li>提供了一些重新设计的系统自带应用，如相机、通讯录、拨号等（里面加入不少体贴用户的细节）</li>
  <li>语音控制功能的整合（还没做好）</li>
</ol>

<p>这样看来，锤子做的事情跟很多基于Android的定制系统是一个层面的，类似的系统太多太多了：最早但死掉的中国移动OMS，各手机厂商为自己手机定制的系统（HTC SenseUI，联想乐OS，魅族Flyme），已经放弃的点心OS，很火的MIUI……。顺便说一下，MIUI为应用图标硬加的圆角矩形背景极为难看，希望被老罗炮轰一下后能改过来。</p>

<p>从整体设计风格来说，锤子追随的是iOS的UI风格和人机界面设计规范，从各个UI组件的样子可以看得出来，还有交互操作的方式，也包括拟物化的设计、仿真的视觉反馈等。</p>

<p>对于一些操作细节的打磨，带来更人性化的体验，是很多人对锤子称道的地方。的确是做得不错，但演示到的几乎每一个改进／做法，都能够在其他系统／第三方应用中找到已经真实应用的范本。老罗团队做得好是在于关注到需要改进的地方，将它们集中到一起。发现哪里操作细节需要改进比起作出改进更难。</p>

<p>因此，看完两个小时的发布会，这个锤子系统没有带来什么耳目一新的感觉。老罗太高调了，说什么要做最好的手机系统，吹嘘的跟现实的落差太大。也许这是营销手段，反正我就不喜欢这种营销了。</p>

<p>发布会最后一段，老罗说得很清楚：锤子将会是一个极其封闭的系统，因为只有封闭，才能为小白用户提供最完美、一致的用户体验。听起来很耳熟是不？这不就是苹果说的吗？但是，智能手机系统更重要的角色是一个平台，各种应用才是上面的主角。应用的图标跟系统风格不搭配，锤子给出的解决方案是给你换掉，可是进入应用后，应用的UI、操作方式呢？这才是更重要的。UX不仅仅是美工，是整个人机交互。苹果是怎么做到的？苹果制定了一套系统详尽的人机界面设计规范(HIG)，苹果有很强的控制力，它可以通过App Store发布审核制度强制要求只有符合的应用才能上架。我看不到锤子能有这样的能力去控制第三方应用，也不觉得一个团队有能力(和有必要)在系统里自带所有主要的功能而抛弃第三方应用，因此觉得锤子找的这个提供更佳用户界面的切入点恐怕走不了多远。</p>

<p>在手机平台这个层面的用户体验上，要作出革新，非小打小闹可以做到。我虽然不做用户交互端的开发，但也有关注移动应用的UX的发展。真正意义的智能手机应用自iPhone革命性发布开始，并没有好多年的时间，这些年来，UX design在迅猛发展。iOS以高度拟物仿真的特点一直独领风骚，但走入了过分繁杂的极端；Android一路在摸索，历年Google IO都带出新的UI/UX design pattern，每次都推翻之前的方案，但可以看到一路在改善，到了Android 4.x，已经有一整套成熟的设计规范；微软的Metro UI可以称得上是一个大的革新。近年的设计趋势都是简约化，去年底苹果工业设计师的更替后，苹果的设计理念也许也会往这个方向走。在我看来，大气的设计是定义出一整套设计语汇，自成体系，并且背后要有设计哲学所支撑（Metro的定位是一种设计语言）。读完iOS的HIG，Android SDK文档里的设计指南，Windows phone的设计指南，就有所体会。另外顺便说说Android应用，普遍比较丑的原因不在于Android自己的设计理念，而是应用开发者没有跟随这个理念，不少依照Android 4.x的设计风格的应用都很漂亮很好用的。</p>

<p>最后总结我看到的锤子：老罗崇尚苹果的整套理念，另外也看到了一些可以改进的地方（例如他说的iPhone设计上的妥协），于是要将它搬到Android平台上来，按照自己的理解重现实现一遍。这将是一个很有趣的尝试，期望能为国内手机应用UX僵化老土的设计带来新鲜的风气。只是别把自己过分拔高就好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[笔记本充满电后，是否应该拔掉电源]]></title>
    <link href="http://aleung.github.io/blog/2013/03/30/should-i-keep-plugged-in-after-my-notebook-is-fully-charged/"/>
    <updated>2013-03-30T00:34:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/03/30/should-i-keep-plugged-in-after-my-notebook-is-fully-charged</id>
    <content type="html"><![CDATA[<p>在豆瓣小组里，有人问笔记本充满电后，是否应该拔掉电源用电池。我的回答是“否”，在有电源时应该插着电源，以延长电池寿命。我的回答遭到了某些疑似文科生的质疑（抱歉我对文科生的不敬）。现在很多中文网站、论坛的东西都是东抄西抄，以讹传讹。为此我科普了一把。</p>

<hr />

<p>看看Apple的网站吧： </p>

<ul>
  <li>http://www.apple.com/batteries/ </li>
  <li>http://www.apple.com/batteries/notebooks.html </li>
</ul>

<blockquote>
  <p>A charge cycle means using all of the battery’s power, but that doesn’t necessarily mean a single charge. For instance, you could listen to your iPod for a few hours one day, using half its power, and then recharge it fully. If you did the same thing the next day, it would count as one charge cycle, not two, so you may take several days to complete a cycle. </p>
</blockquote>

<blockquote>
  <p>Lithium-ion polymer batteries need to be used for maximum performance. If you don’t use your device often, be sure to complete a charge cycle at least once a month. </p>
</blockquote>

<p>电池的放电循环是累计的（原文里有图），不是说要一次性用光所有的电。 </p>

<p>如果你一个月用电池用不够一个放电循环，那就需要专门去把电池的电耗掉再充满。但如果你平常不时需要移动使用电脑的话，一般一个月都能用够一个电池放电循环，就没有必要专门去耗用电池的电了。 </p>

<p>锂电池的正常使用寿命大概在500～1000次放电循环左右。<a href="http://support.apple.com/kb/ht1519">这里</a>有Apple官方声称的电池寿命数值，新款MBP，MBA都是1000次。 </p>

<p>而且有说法是浅放电比起深放电有利于延长电池寿命[<a href="http://batteryuniversity.com/learn/article/how_to_prolong_lithium_based_batteries">来源</a>] 。特别是，过放电会严重损害电池。电脑有保护，不会让电池过放，电量低到一定程度就自动关机，但是若关机后依然长期不充电，电池的自放电也会最终使电池过放电。 </p>

<p>我的MBP用了接近两年，按照有电源时就插电源的用法，现在电池也已经用了131个周期了。要知道，电脑休眠也是耗电的。 </p>

<p>还有<a href="http://forums.macrumors.com/showpost.php?p=9875442&amp;postcount=23">这里</a>也整理了很多与Apple Notebook电池相关的知识。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving Maven unique and non-unique snapshot conflict]]></title>
    <link href="http://aleung.github.io/blog/2013/03/30/maven-unique-non-unique-snapshot-conflict/"/>
    <updated>2013-03-30T00:04:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/03/30/maven-unique-non-unique-snapshot-conflict</id>
    <content type="html"><![CDATA[<p>Recently I changed an Artifactory repository configuration from storing non-unique snapshots to unique snapshots (as described <a href="http://wiki.jfrog.org/confluence/display/RTF/Local+Repositories">here</a>). After that, “Unable to download the artifact” error happened on some artifacts.</p>

<p>When both unique snapshot and non-unique snapshot of the same version of an artifact exists, there will be problem to download it. For example, in a repository if under folder <code>/com/mycompany/test/foo/1.0.0-SNAPSHOT/</code> there are <code>foo-1.0.0-SNAPSHOT.pom</code> and <code>foo-1.0.0-20130329-231102-1.pom</code>, then downloading <code>com.mycompany.test:foo:1.0.0-SNAPSHOT:pom</code> will get error. You have to delete either the file with SNAPSHOT in name or all the files with time stamp in name.</p>

<p>Before I changed the configuration, there were SNAPSHOT artifacts in the repository. After configuration changed, the continuous integration jobs running on CI server redeployed artifacts to the repository, and those new files have time stamp in file names, and the version is the same. That caused the problem.</p>

<p>To solve the problem, I should delete the *-SNAPSHOT file, if and only if there are both unique snapshot and non-unique snapshot of the same version.</p>

<p>I wrote a Ruby script to do that. It scans all recent deployed artifacts (they have time stamp in file name because of the new configuration) and try to delete the same version non-unique snapshot (-SNAPSHOT) file if any. It uses Artifactory’s REST API. This script need to be run periodically till all artifacts have been rebuilt and deployed to repository. </p>

<div><script src="https://gist.github.com/5260512.js"></script>
<noscript><pre><code /></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clean aged artifacts from Artifactory]]></title>
    <link href="http://aleung.github.io/blog/2013/03/22/clean-aged-artifacts-from-artifactory/"/>
    <updated>2013-03-22T23:21:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/03/22/clean-aged-artifacts-from-artifactory</id>
    <content type="html"><![CDATA[<p><a href="http://www.jfrog.com/home/v_artifactory_opensource_overview">Artifactory</a> has no feature to automatically remove old artifacts from local repository. Once the disk is full, manually remove unused artifacts is painful. Moveover, you’re not sure which artifacts are unused and can be safely deleted.</p>

<p>Artifactory has a set of <a href="http://wiki.jfrog.org/confluence/display/RTF/Artifactory's+REST+API">REST API</a>. One of the API is to search artifacts not downloaded since a specified date. In our projects, there are CI jobs which keep building the software for each branch. If a SNAPSHOT artifact hasn’t been downloaded for a time, we can make sure that this artifact is no use any more, a newer version should be existing.</p>

<p>I made a Ruby script to do the clean up job automatically. It searches artifacts which weren’t downloaded in specific days and deletes them. It can be invoked in a CI job to run periodically. </p>

<div><script src="https://gist.github.com/5203736.js"></script>
<noscript><pre><code /></pre></noscript></div>

<p>The script can also be used to clean unused release (non-SNAPSHOT) artifacts. However a good practice is to keep releases forever. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batch deploy artifacts to Maven repository]]></title>
    <link href="http://aleung.github.io/blog/2013/03/19/maven-batch-deploy-artifacts/"/>
    <updated>2013-03-19T21:32:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/03/19/maven-batch-deploy-artifacts</id>
    <content type="html"><![CDATA[<p>I need to migrate a Maven repository from <a href="http://www.jfrog.com/home/v_artifactory_opensource_overview">Artifactory</a> to <a href="http://www.sonatype.org/nexus/">Nexus</a>. Nexus’s migration <a href="http://www.sonatype.com/people/2009/03/migrating-from-artifactory-to-nexus/">solution</a> uses its migration plugin. But our Nexus service is managed by IT team and I don’t want to bother to ask them to install a plugin.</p>

<p>Artifactory is able to export a whole repository into file system as local repository layout (like .m2/repository folder). So I looked for import feature in Nexus, but failed.</p>

<p>Searched on Google then I found <a href="http://stackoverflow.com/a/3304212/94148">this answer</a> on StackOverflow. Sean provided a pom with embedded Groovy script to upload (deploy) a hierarchy of files to a Maven repository. However Sean’s solution handles groupId, artifactId and version in a way differ to what I want. It requires to specify groupId and version in pom as fixed value.</p>

<p>I modify the Groovy script a bit to handle local repository folder layout. GroupId, artifactId and version are parsed from path of file. Here is my modified version:</p>

<div><script src="https://gist.github.com/5194777.js"></script>
<noscript><pre><code /></pre></noscript></div>

<p>Before using it, modify the setting in &lt;deploy.basefolder&gt; and &lt;distributionManagement&gt;. Make sure you have removed all non-artifact files e.g. *.sha1, *.lastUpdated from your import directory. Or you may enhance the script to filter those files out.</p>

<p>Suppose your import folder is ~/.m2/repository, put this pom.xml at ~/.m2. Run <code>cd ~/.m2; mvn install</code> then everything is done.</p>

<p>Usually you should configure your repository to allow redeploy of an existing artifact. Otherwise you’ll get error if an artifact you want to import already exist in repository.</p>

<p><strong>Update</strong> 2013-3-29:</p>

<p>There is a more simple way to import artifacts into Nexus, if you have privilege to access its data folder. Just copy the files into the storage location of the repository (the path can be found in repository configuration tab on Nexus web UI), change owner and group of the copied directories and files. After that, on Nexus web UI right click the folder and choose rebuild metadata. After a while everything will be ready.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[站立工作环境]]></title>
    <link href="http://aleung.github.io/blog/2013/03/18/stand-up-desk/"/>
    <updated>2013-03-18T23:44:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/03/18/stand-up-desk</id>
    <content type="html"><![CDATA[<p>坐姿，特别是不正确的坐姿，对腰椎间盘的压力是站姿的2到3倍，长期在电脑前工作的人很容易得腰椎间盘突出等腰椎疾病。因此现在IT工作者逐渐流行站立工作。但是，长期站立也会带来其他的问题，如下肢静脉曲张等。一个比较理想的方案是使用可升降的办公桌，坐姿站姿交替。</p>

<p>2011年我花了不少时间寻找国内哪里可以买到可升降办公桌，但都没有找到。网上搜索倒是有不少信息，但都是厂家寻求批发订货的，电话问过几个本地厂商，基本都说不做，做的也没有现货不零售。唯一的是淘宝上有个泠泠岛，做个人客户，当时价格很高，外地购买也不方便，而且我对它的质量不是很放心。最终放弃了购买升降桌的念头，改为自行DIY站立工作桌。</p>

<p>2012年初用IKEA的BRODER系统加一个VIKA桌面搭建了一个站立工作桌。BRODER归属在重型储物系列里，本来用途是储物架，钢柱杆和钢网搁板很牢固，最大的搁板深度基本足够做桌面了，在上面垫上一块木桌面刚刚好。用IKEA的东西好处是你有很大发挥的空间，这个<a href="http://www.wretch.cc/blog/ikeameatball/12392137">IKEA的居家生活部落格</a>里就有不少BRODER各种应用的照片。但刚刚查IKEA中国网站，已经找不到BRODER，不知是否不卖了。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/3/desk.jpg" /></p>

<p>就这样用了一年，但长期站立工作也不好，于是想配一张高脚凳也许就差不多了。桌面高度是按站立工作而定的，按照我的身高桌面高度也偏高，一般市面上卖的高脚凳（酒吧凳）座高都不够。最后在淘宝上找到了一款，高度比较合适。今天到货刚刚装起来了。其实这凳子做工、质量都不算很好，组装也不够方便，如果IKEA有合适的我绝对不会选择它的（虽然说IKEA的东西质量也只算一般，但还是要比这淘宝货强）。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/3/desk_chair.jpg" /></p>

<p>关于工作台面、座椅以及显示器的合适高度，在<a href="http://book.douban.com/subject/11652185/">Human Factors in Engineering and Design</a>一书的 chapter 13. Applied Anthropometry, Work-Space Design and Seating 中对站姿与坐姿工作环境有很好的描述。我在决定台面高度与椅子高度的时候参考了此书中给出的研究数据。</p>

<p>顺便说说，上面提到那本书是<a href="http://zh.wikipedia.org/wiki/%E4%BA%BA%E5%9B%A0%E5%B7%A5%E7%A8%8B%E5%AD%A6">人因学</a>的经典好书，国内有<a href="http://book.douban.com/subject/3746065/">中文翻译版</a>。</p>

<p>另外再推荐阅读：美国职业健康和安全管理局(OSHA)工作区健康与安全指南<a href="http://www.youliv.com/ErgoStandard/WSGoodPositions.aspx">中文翻译</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎么处理Android耗电严重的问题]]></title>
    <link href="http://aleung.github.io/blog/2013/03/10/which-app-is-draining-your-android-bettery/"/>
    <updated>2013-03-10T21:49:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/03/10/which-app-is-draining-your-android-bettery</id>
    <content type="html"><![CDATA[<p>Android用户常常会被耗电问题困扰，明明手机没怎么使用，电量却不停的掉，半天就耗光了。有些人会寻求kill应用的方法——而Android系统的设计原则是用户不需要关心进程的启停的。其实大多数情况下，这都跟系统无关，而是安装的某些应用的问题。合理设计的应用，即使有后台进程，也只会在必要的时候唤醒进行短时间工作。但有些应用开发者不懂怎么合理设计应用后台任务，造成耗电问题。</p>

<p>要解决耗电问题，首先得找出是那个应用耗电。Android 4.0以上系统已经能够显示出系统各模块以及各个应用的耗电比例（设置－电量使用情况），不过细节信息还是不够多，往往不足以判定是什么原因耗电严重，这时候就要用到这个应用：<a href="https://play.google.com/store/apps/details?id=com.gsamlabs.bbm">GSam Battery Monitor</a>。就像Android系统的电量使用情况，GSam可以列出系统各模块（系统、电话、屏幕、Wifi等）以及各应用的耗电比例，但它可以看到每项更细节的信息，如某一应用使用各传感器的时间、屏幕不同亮度分布使用时间等等，可以帮助判断是什么模块／应用耗电严重，以及耗电的具体原因。GSam还有更多的功能，用起来也不太复杂，自己摸索一下就行。</p>

<p>找到罪魁祸首后，最简单处理手段就是卸载它。但如果这个应用非装不可没有替代品，怎么办？Kill不是办法，若应用因后台服务而耗电，后台服务kill掉也能自动重启的。每次用完都要去kill用起来也不方便。这时 <a href="https://play.google.com/store/apps/details?id=com.oasisfeng.greenify">Greenify</a> 就派上用场了，当你将一个应用加入greenify列表中，它能够在你不使用这个应用时将它进入冬眠状态，但又不影响其正常使用。除了用来对付耗电应用，对付耗内存应用也不错，当应用冬眠时，也不会占用内存(RAM)。至于它的工作原理，作者没有透露过，我还没有见到有解释。Greenify只能用于Android 3.1+，需要root。Android手机要玩好，root基本上是不可少的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R初略学习笔记]]></title>
    <link href="http://aleung.github.io/blog/2013/02/09/beginning-r/"/>
    <updated>2013-02-09T14:18:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/02/09/beginning-r</id>
    <content type="html"><![CDATA[<h2 id="section">包管理</h2>

<p>从CRAN安装一个包：<code>install.packages("pkg_name")</code></p>

<p>加载包：<code>library(package)</code></p>

<h2 id="r">R的基本数据类型</h2>

<p>在R里面一个元素的基本数据类型称为 mode。每个对象都有mode属性。</p>

<p>基本数据类型包括：数值(实数) numeric，复数 complex，字符(串) character，逻辑(布尔) logical 和 raw。NA表示没有值。</p>

<p>基本数据类型之间的转换通过 as.<em>something</em>() 函数进行，例如 <code>as.character()</code>, <code>as.integer()</code>。</p>

<h2 id="r-1">R的数据对象类型</h2>

<h3 id="vector">向量 vector</h3>

<p>向量由一组相同类型的元素组成。</p>

<p>用函数 c() 可以构造出向量：</p>

<pre><code>x &lt;- c(10.4, 5.6, 3.1, 21.7)
</code></pre>

<p>如果要生成元素为序列的向量，简单的方法是用冒号，如 1:7，复杂的方法是函数 seq()。另外，函数 rep() 可以根据已有向量的元素重复来生成新向量。</p>

<p>向量中的某个元素通过 [] 访问，如 <code>x[3]</code>，注意，下标从1开始！方括号中下标位置放的可以是向量，称为索引向量 index vector，这时候会根据索引取出特定元素构成新的向量。例如 <code>x[1:10]</code> 取出x的前10个元素。</p>

<p>对向量做运算，是对向量的每个元素做独立运算，结果是一个相同元素个数的新向量。</p>

<h3 id="factor">因子 factor</h3>

<p><strong>TODO</strong>：没懂</p>

<h3 id="array">数组 array</h3>

<p>数组是多维的一组相同类型数据。特别地，二维数组称为矩阵 matrix。</p>

<p>通过指定维度属性 dim，向量可以转换为数组。例如z为有1500个元素的向量，<code>dim(z) &lt;- c(3, 5, 100)</code> 将z变作3<em>5</em>100的三维数组。另外一种构造数组的方法是用函数 array()： <code>Z &lt;- array(data_vector, dim_vector)</code>。向量中元素是按照首下标优先的顺序来遍历的，如 <code>z[1,1,1], z[2,1,1], …, z[2,5,100], z[3,5,100]</code>。</p>

<p>可以通过 <code>a[2,,]</code> 这样的方法访问子数组，得到的是指定了第一维为2后剩余维数的数组。正如可以用向量为下标来访问向量，也可以用索引矩阵 index matrix 作为下标来访问数组，这样可以根据索引矩阵的值为下标取出数组中的特定一组元素。</p>

<p>通过 <code>as.vector(X)</code> 或者 <code>c(X)</code> 可以将数组X变回向量。</p>

<h3 id="list">列表 list</h3>

<p>文档里叫list，但实际上更象其他语言里的map，或者叫hash。列表里的每个元素是一个对象，称为组件 componet，列表里的组件的类型不需要一致。</p>

<p>生成列表的方法：<code>Lst &lt;- list(name_1=object_1, …, name_m=object_m)</code>。组件名字是可忽略的。构成列表的对象会复制一个副本到列表里面，而不是引用。</p>

<p>用 <code>[[n]]</code> 来访问列表中的第n个组件。如果组件有名字，用 <code>list$component_name</code> 的方法更简便。组件名可以简写为名字的前几个字母，只要不引起歧义就行。</p>

<h3 id="data-frame">数据帧 data frame</h3>

<p>数据帧是特殊的列表：</p>

<ul>
  <li>组件为向量(数值型,字符形,逻辑型)，因子，数值矩阵，列表或其他数据帧</li>
  <li>数据帧中作为变量的向量结构必须具有相同的长度,而矩阵结构应当具有相同的行大小</li>
</ul>

<p>很多情况下,数据帧会被当作各列具有不同模式和属性的矩阵。</p>

<p>数据帧同样可以用下标来获取子集，例如看前三行数据：<code>data[1:3,]</code>，根据某列的值做过滤：<code>filtered_frame &lt;- full_frame[full_frame$country=="cn",]</code></p>

<p>通过 <code>as.matrix(X)</code> 将数据帧转换为矩阵。</p>

<h2 id="section-1">读取数据</h2>

<p>函数 <code>read.table()</code> 读取文本文件的数据，产生一个数据帧。更常用的是 <code>read.csv()</code> 和 <code>read.delim()</code>，它们是 read.table() 的缺省参数版本，后者读取tab分隔的文件。文件的每个列被保存到数据帧的一个组件中，组件名字就是列的名字，如果列名里有空格会被转换成句点。</p>

<h2 id="section-2">绘图</h2>

<h3 id="section-3">高级绘图函数</h3>

<p>下面是R中高级绘图函数的概括:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">函数</th>
      <th style="text-align: left">说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">plot(x)</td>
      <td style="text-align: left">以x的元素值为纵坐标、以序号为横坐标绘图</td>
    </tr>
    <tr>
      <td style="text-align: left">plot(x, y)</td>
      <td style="text-align: left">x(在x-轴上)与y(在y-轴上)的二元作图。根据type参数可以画出多种类型的图。</td>
    </tr>
    <tr>
      <td style="text-align: left">sunflowerplot(x,y)</td>
      <td style="text-align: left">同上 但是以相似坐标的点作为花朵,其花瓣数目为点的个数</td>
    </tr>
    <tr>
      <td style="text-align: left">pie(x)</td>
      <td style="text-align: left">饼图</td>
    </tr>
    <tr>
      <td style="text-align: left">boxplot(x)</td>
      <td style="text-align: left">盒形图(“box-and-whiskers”)</td>
    </tr>
    <tr>
      <td style="text-align: left">stripchart(x)</td>
      <td style="text-align: left">把x的值画在一条线段上,样本量较小时可作为盒形图的替代</td>
    </tr>
    <tr>
      <td style="text-align: left">coplot(x~y|z)</td>
      <td style="text-align: left">关于z的每个数值(或数值区间)绘制x与y的二元图</td>
    </tr>
    <tr>
      <td style="text-align: left">interaction.plot(f1, f2, y)</td>
      <td style="text-align: left">如果f1和f2是因子,作y的均值图,以f1的不同值作为x轴, 而f2的不同值对应不同曲线;可以用选项fun指定y的其他的统计量(缺省计算均值,fun=mean)</td>
    </tr>
    <tr>
      <td style="text-align: left">matplot(x,y)</td>
      <td style="text-align: left">二元图,其中x的第一列对应y的第一列,x的第二列对应y的第二 列,依次类推。</td>
    </tr>
    <tr>
      <td style="text-align: left">dotchart(x)</td>
      <td style="text-align: left">如果x是数据框,作Cleveland点图(逐行逐列累加图)</td>
    </tr>
    <tr>
      <td style="text-align: left">fourfoldplot(x)</td>
      <td style="text-align: left">用四个四分之一圆显示2X2列联表情况(x必须是dim=c(2, 2, k)的数组,或者是dim=c(2, 2)的矩阵,如果k = 1)</td>
    </tr>
    <tr>
      <td style="text-align: left">assocplot(x)</td>
      <td style="text-align: left">Cohen–Friendly图,显示在二维列联表中行、列变量偏离独立性 的程度</td>
    </tr>
    <tr>
      <td style="text-align: left">mosaicplot(x)</td>
      <td style="text-align: left">列联表的对数线性回归残差的马赛克图</td>
    </tr>
    <tr>
      <td style="text-align: left">pairs(x)</td>
      <td style="text-align: left">如果x是矩阵或是数据框,作x的各列之间的二元图</td>
    </tr>
    <tr>
      <td style="text-align: left">plot.ts(x)</td>
      <td style="text-align: left">如果x是类”ts”的对象,作x的时间序列曲线,x可以是多元的, 但是序列必须有相同的频率和时间</td>
    </tr>
    <tr>
      <td style="text-align: left">ts.plot(x)</td>
      <td style="text-align: left">同上,但如果x是多元的,序列可有不同的时间但须有相同的频 率</td>
    </tr>
    <tr>
      <td style="text-align: left">hist(x)</td>
      <td style="text-align: left">x的频率直方图</td>
    </tr>
    <tr>
      <td style="text-align: left">barplot(x)</td>
      <td style="text-align: left">x的值的条形图</td>
    </tr>
    <tr>
      <td style="text-align: left">qqnorm(x)</td>
      <td style="text-align: left">正态分位数-分位数图</td>
    </tr>
    <tr>
      <td style="text-align: left">qqplot(x, y)</td>
      <td style="text-align: left">y对x的分位数-分位数图</td>
    </tr>
    <tr>
      <td style="text-align: left">contour(x, y, z)</td>
      <td style="text-align: left">等高线图(画曲线时用内插补充空白的值),x和y必须为向量 ,z必须为矩阵 , 使得dim(z)=c(length(x), length(y))(x和y可以省略)</td>
    </tr>
    <tr>
      <td style="text-align: left">filled.contour (x,y, z)</td>
      <td style="text-align: left">同上,等高线之间的区域是彩色的,并且绘制彩色对应的值的图 例</td>
    </tr>
    <tr>
      <td style="text-align: left">image(x, y, z)</td>
      <td style="text-align: left">同上,但是实际数据大小用不同色彩表示</td>
    </tr>
    <tr>
      <td style="text-align: left">persp(x, y, z)</td>
      <td style="text-align: left">同上,但为透视图</td>
    </tr>
    <tr>
      <td style="text-align: left">stars(x)</td>
      <td style="text-align: left">如果x是矩阵或者数据框,用星形和线段画出</td>
    </tr>
    <tr>
      <td style="text-align: left">symbols(x, y, …)</td>
      <td style="text-align: left">在由x和y给定坐标画符号(圆,正方形,长方形,星,温度计式 或者盒形图),符号的类型、大小、颜色等由另外的变量指定</td>
    </tr>
    <tr>
      <td style="text-align: left">termplot(mod.obj)</td>
      <td style="text-align: left">回归模型(mod.obj)的(偏)影响图</td>
    </tr>
    <tr>
      <td style="text-align: left">heatmap(x)</td>
      <td style="text-align: left">热度图</td>
    </tr>
  </tbody>
</table>

<h4 id="section-4">需要工具包支持的高级绘图</h4>

<p><strong>板块层级图 tree map</strong></p>

<p>用矩形面积来表示数值，可用于分析磁盘空间占用</p>

<pre><code>library(portfolio)
map.market(id, area, group, color)
</code></pre>

<p><strong>平行坐标图</strong></p>

<pre><code>library(lattice)
parallel(data)
</code></pre>

<h3 id="section-5">低级绘图命令</h3>

<p>R里面有一套绘图函数是作用于现存的图形上的:称为低级作图命 令(low-level plotting commands)。下面有一些主要的:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">函数</th>
      <th style="text-align: left">说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">scatter.smooth(x, y, …)</td>
      <td style="text-align: left">LOESS(局部加权散点平滑)拟合曲线</td>
    </tr>
    <tr>
      <td style="text-align: left">points(x, y)</td>
      <td style="text-align: left">添加点(可以使用选项type=)</td>
    </tr>
    <tr>
      <td style="text-align: left">lines(x, y)</td>
      <td style="text-align: left">同上,但是添加线</td>
    </tr>
    <tr>
      <td style="text-align: left">text(x, y, labels,…)</td>
      <td style="text-align: left">在(x,y)处添加用labels指定的文字;典型的用法是: plot(x, y, type=”n”); text(x, y, names)</td>
    </tr>
    <tr>
      <td style="text-align: left">mtext(text,side=3, line=0,…)</td>
      <td style="text-align: left">在边空添加用text指定的文字,用side指定添加到哪一边(参照 下面的axis());line指定添加的文字距离绘图区域的行数</td>
    </tr>
    <tr>
      <td style="text-align: left">segments(x0, y0,x1, y1)</td>
      <td style="text-align: left">从(x0,y0)各点到(x1,y1)各点画线段</td>
    </tr>
    <tr>
      <td style="text-align: left">arrows(x0, y0,x1, y1, angle= 30,code=2)</td>
      <td style="text-align: left">同上但加画箭头,如果code=2则在各(x0,y0)处画箭头,如 果code=1则在各(x1,y1)处画箭头,如果code=3则在两端都画箭头; angle控制箭头轴到箭头边的角度</td>
    </tr>
    <tr>
      <td style="text-align: left">abline(a,b)</td>
      <td style="text-align: left">绘制斜率为b和截距为a的直线</td>
    </tr>
    <tr>
      <td style="text-align: left">abline(h=y)</td>
      <td style="text-align: left">在纵坐标y处画水平线</td>
    </tr>
    <tr>
      <td style="text-align: left">abline(v=x)</td>
      <td style="text-align: left">在横坐标x处画垂直线</td>
    </tr>
    <tr>
      <td style="text-align: left">abline(lm.obj)</td>
      <td style="text-align: left">画由lm.obj确定的回归线(参照第五章)</td>
    </tr>
    <tr>
      <td style="text-align: left">rect(x1, y1, x2, y2)</td>
      <td style="text-align: left">绘制长方形,(x1, y1)为左下角,(x2,y2)为右上角</td>
    </tr>
    <tr>
      <td style="text-align: left">polygon(x, y)</td>
      <td style="text-align: left">绘制连接各x,y坐标确定的点的多边形</td>
    </tr>
    <tr>
      <td style="text-align: left">legend(x, y, legend)</td>
      <td style="text-align: left">在点(x,y)处添加图例,说明内容由legend给定</td>
    </tr>
    <tr>
      <td style="text-align: left">title()</td>
      <td style="text-align: left">添加标题,也可添加一个副标题</td>
    </tr>
    <tr>
      <td style="text-align: left">axis(side, vect)</td>
      <td style="text-align: left">画坐标轴,side=1时画在下边,side=2时画在左边,side=3时画在上边,side=4时画在右边。可选参数at指定画刻度线的位置坐标</td>
    </tr>
    <tr>
      <td style="text-align: left">box()</td>
      <td style="text-align: left">在当前的图上加上边框</td>
    </tr>
    <tr>
      <td style="text-align: left">rug(x)</td>
      <td style="text-align: left">在x-轴上用短线画出x数据的位置</td>
    </tr>
    <tr>
      <td style="text-align: left">locator(n, type=”n”, …)</td>
      <td style="text-align: left">在用户用鼠标在图上点击n次后返回n次点击的坐标(x, y);并可以在点击处绘制符号(type=”p”时)或连线(type=”l”时),缺省情 况下不画符号或连线</td>
    </tr>
  </tbody>
</table>

<h2 id="reference">Reference</h2>

<ul>
  <li>R for Beginners</li>
  <li>An Introduction to R</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[人體工學鍵盤鼠標組合]]></title>
    <link href="http://aleung.github.io/blog/2013/01/08/keyboard-and-mouse/"/>
    <updated>2013-01-08T23:00:00+08:00</updated>
    <id>http://aleung.github.io/blog/2013/01/08/keyboard-and-mouse</id>
    <content type="html"><![CDATA[<p>作為悲催的程序猿，每天的大部份時間都是陪伴鼠標鍵盤度過的，一套合適的鼠標鍵盤非常重要，可以降低得職業病的機率。尋找人體工學的鼠標鍵盤並不容易，現在這套用了好些時間了，感覺很滿意。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/1/keyboard_mouse.jpg" /></p>

<p>先說鍵盤，普通鍵盤其實並不符合雙手自然的角度，如果要能讓雙手自然，左右手鍵盤需要分離。因此，理想的鍵盤大概是這個樣子的：</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/1/kb_adv-pro.jpg" /></p>

<p>這個是Kinesis Advantage Pro，我在荷蘭公司見過有同事用，在網上程序員社區也受到推薦。</p>

<p>還有這個怪樣子的DataHand，手指已經不僅是向下敲鍵盤了，而是每個手指上下左右各個方向都是不同的鍵。</p>

<p><img src="http://aleung.github.io/blog/attachments/2013/1/datahand.jpg" /></p>

<p>上面說的鍵盤不僅僅怪異，也买不起。前者$359，後者更是近千美元。更何況即使有錢，在國內也買不到。因此我只能選擇還算中規中矩的<a href="http://www.microsoft.com/hardware/en-us/p/natural-ergonomic-keyboard-4000">微軟人體工學鍵盤4000</a>，這款鍵盤算是評價不錯，價錢也可接受，國內可以直接買到。它的左右手鍵盤區並沒有分離得很遠，但剛好分開一個夾角，跟雙手自然擺放時的角度一樣。左右手分開鍵盤區要求指法一定要正確，還好我到手後在一個下午裏就已經適應了。</p>

<p><img class="right" src="http://aleung.github.io/blog/attachments/2013/1/microsoft-mouse-6000.jpg" /> 鼠標我開始用的是<a href="http://www.microsoft.com/hardware/en-us/d/natural-wireless-laser-mouse-6000">微軟人體工學霸雷鯊6000</a>（已經停產），它的好處是傾斜的表面讓手腕不需要向內旋轉。但是用了一段時間感覺還是未達理想程度，主要問題是我移動鼠標時通常前臂放在桌面上是不動的，僅靠手腕的活動，時間長了手腕還是覺得累。</p>

<p>後來在網上看了不少資料，軌跡球可能可以解決這個問題，不需要手腕的動作，依靠手指移動就可以了。但是，對於軌跡球的評價好壞很極端，要麼說很好用要麼說根本沒用，估計這個東西的適應比較困難。但要真正用起來才會知道是否適合，最後還是下定決心買一個來試一下。軌跡球始終屬於小眾產品沒有推廣開來，產品甚至越出越少，市場上現在可買到的沒幾款，相對鼠標來說價錢也貴不少（其實結構、元件都差不多）。最終買的是<a href="http://www.kensington.com/kensington/us/us/p/1444/K64325/expert-mouse%C2%AE.aspx">Kensington Expert Mouse</a>（淘寶有售），明明是trackball要叫做mouse，可見trackball不受落。選擇這個是因為球體夠大，而且是可以用食指中指來滾動球體。Logitech M570 本來也不錯，但聽說拇指球用起來不夠靈活，拇指也容易累。中置球體的另外一個好處是左右手通用，我本來習慣用右手的，但那個鍵盤實在太霸氣了，把軌跡球放右邊，手在鍵盤和軌跡球間切換要移動很遠，於是就換用左手了。剛買回來，球滾動不大順滑，有點澀的感覺，真有些失望，但用了一兩個星期後就好很多了，現在操作起來絲柔順滑，阻尼感恰到好處，應該是球的三個支撐點需要一段時間磨合。軌跡球剛用起來確實不是那麼容易上手，操作會比較笨拙，比用鼠標慢很多，但是多花些時間適應，大概幾天到一周就可以上手了。</p>

<p>總之，現在對這套組合非常滿意。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怎样在OSX上adb连接小米2]]></title>
    <link href="http://aleung.github.io/blog/2012/12/30/mi2-usb-debug-on-osx/"/>
    <updated>2012-12-30T20:24:00+08:00</updated>
    <id>http://aleung.github.io/blog/2012/12/30/mi2-usb-debug-on-osx</id>
    <content type="html"><![CDATA[<p>小米2手机在Mac OSX上，adb识别不到设备，Eclipse的DDMS也连不上设备，这样手机就不能用来开发了。实际上，只有在Windows上才需要安装USB驱动程序，在Linux、OSX上并不需要，设别不到小米2手机是因为adb不知道这手机的USB Vendor ID。Android SDK<a href="http://developer.android.com/tools/device.html">文档</a>里就列出了一些Android设备厂商的vendor ID，不过当然不包括小米，因此要自己找出小米的vendor ID。用IORegistryExplorer（据说是包含在Developer Tool里，反正我的机器上装了）可以查看连接上的USB设备的信息。选择IOUSB，可以看到名为“MI 2”的设备，idVendor是0x2717。</p>

<p>将这个Vendor ID作为独立一行加进文件 ~/.android/adb_usb.ini 中。装了Android SDK这个目录和文件应该就存在的，如果不存在就自己创建。修改完adb_usb.ini后执行 adb kill-server 重启adb，再执行 adb devices，就能看到小米2手机了。再打开Eclipse，也能够正常设别到手机，一切OK。</p>

<p><img src="http://aleung.github.io/blog/attachments/2012/12/osx_usb.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[四儿子无望，粗粮也好吧]]></title>
    <link href="http://aleung.github.io/blog/2012/12/23/mi2/"/>
    <updated>2012-12-23T14:03:00+08:00</updated>
    <id>http://aleung.github.io/blog/2012/12/23/mi2</id>
    <content type="html"><![CDATA[<p><img src="http://aleung.github.io/blog/attachments/2012/12/mi2_focus_01s.jpg" /></p>

<p>Xperia U 手機用了半年，<a href="http://aleung.github.io/blog/2012/07/22/xperia-u/">開始感覺</a>還不錯，可是升級到ICS之後就慢得不行，歸咎下來應該還是因為RAM太小只有512M。於是動了換機的念頭。本來看中的是人稱Google四兒子的 Nexus 4，高配置白菜價，還有Google最新系統的保證，可是開賣以來奇貨可居，市場價炒到上三千。幾個月內都是沒什麼希望買到了。本來我是沒有關注小米2的，偶然的機會朋友可以買到現貨，問我要不要，上網查了一輪，發現小米2也不錯，於是就買了。用了10天，感覺挺滿意。</p>

<p>對於國產手機，最關心的是能不能用Google服務，有沒有ROM可以刷。行貨的閹割系統對於我來說是根本不能用的。小米做得還不錯，保留了Google Service Framework，可以添加Google帳號同步，Google Play等應用自己裝上就可以了。小米手機不算開放，沒有找到任何第三方的ROM，但好在小米除了MIUI外還是提供了原生Android系統ROM，如果不喜歡MIUI還是可以用回native Android。小米2的操作系统已經超越了ICS，是Android 4.1 Jelly Bean，除了四儿子是4.2，小米2也算是版本最高的一款Android手机了吧。手機到手後，刷了個MIUI開發版，因為穩定版不提供root權限。個人感覺MIUI的定製的度把握得比較合適，把很多系統級的有用的功能集成進去了，例如來電短信攔截，LBE的權限管理，通知欄開關等等，而又沒有像其他廠商那樣內置一大堆用不著又刪不掉的應用。因此我試了一下還是決定保留MIUI。</p>

<p>唯一不喜欢的是MIUI的launcher。仿照iOS将图标全平铺在桌面上，用起来不方便；它为第三方应用的图标都缩小并加上一块灰绿色背景，难看死了，本来应用精心设计的透明背景图标都被它搞成一块块牛粪。MIUI的设计风格不错的，真不知道为什么这个launcher会搭配得那么丑，即使自己创建主题将那个灰绿背景改成透明，图标还是被缩小了不好看。我另外找到了一個launcher：<a href="https://play.google.com/store/apps/details?id=com.dlto.atom.launcher">Atom Launcher</a>，界面風格簡潔，功能細節也很好，這下就完美了。</p>

<p>小米2給我最大的感受是显示非常细腻，特别是低磅数的Roboto字体特别干净秀气。342ppi的屏幕达到视网膜屏的标准，其实现在新出的好多手机都是视网膜屏了，只不过现在已经不再新鲜，厂商也不会拿这来做特别宣传。Android从ICS起缺省的是Holo蓝色主题，MIUI换成了自己标志性的亮橙色，大片白色背景，黑色/灰色字体加上亮橙的点缀，整个风格很现代和清新。</p>

<p>剛到手時，對尺寸不太適應，讓我覺得蘋果說的3.5寸是最適合的手機屏幕尺寸不無道理。現在慢慢有些習慣了，但是單手操作始終還是有些彆扭，比如用右手操作，左上角和右下角的按鈕都不容易按到，還是雙手會方便些。</p>

<p>當然啦，新手機最爽的事情就是2G的RAM，運行的順暢程度跟舊手機比真是一個天一個地，看到什麼應用都想裝就裝啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的首個半馬拉松]]></title>
    <link href="http://aleung.github.io/blog/2012/12/11/my-first-half-marathon/"/>
    <updated>2012-12-11T22:25:00+08:00</updated>
    <id>http://aleung.github.io/blog/2012/12/11/my-first-half-marathon</id>
    <content type="html"><![CDATA[<p>11月18日，廣州首屆馬拉松賽，也是我跑的第一次半馬拉松。過去大半個月了，還是記錄一下吧。</p>

<p>看回以前寫的blog，應該是在2005年底開始跑步的，也不記得當時爲什麼突然有了要經常性跑步的想法。那時傍晚下班後在天河公園跑，跑步是作爲鍛鍊和放鬆，一次跑半小時左右，最多5、6公里，根本不敢想象自己能跑21公里的半馬拉松。雖然跑了好多年，但都是斷斷續續，有時一停就幾個月，跑的頻率也低，最多一週兩次，一直都是維持在只能連續跑5公里左右水平。</p>

<p>2008年下半年腰椎間盤突出，最嚴重時連走路都一瘸一瘸的，當時真害怕恢復不了，沒法再做運動了。幸好恢復得很快，11月起可以慢跑鍛鍊，那兩三個月跑得比較頻密，到年底跑的狀態還不錯，同樣的距離比之前跑得更輕鬆。</p>

<p>2009年開始嘗試跑長一點的距離，跑了幾次8到10公里左右，但也沒堅持訓練。10月份Nike在廣州舉辦10公里跑，第一次參加了正式的長跑活動，成績58:30，完成了自己跑進1小時的目標<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。試過後覺得參加跑步活動很好玩，打算以後都繼續參與。</p>

<p>2010年亞運會，Nike沒有辦跑步活動，2011年11月，Nike又舉辦10公里跑，這次賽前就比較認真的做了兩個月的訓練計劃，專門練習了提高步頻，效果還是比較顯著的，成績比預想的好不少，48:29，步速邁進了5分鐘每公里大關<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<p>那時還報名了2012年2月的香港半程馬拉松，接下來幾個月跑的狀態都很好，週末訓練跑了幾次17、18公里，又跑了上白雲山的路線<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>，感覺信心很足，心中還在盤算着目標定在兩小時還是2:15合適。誰知臨近比賽前兩天開始出現感冒跡象，週六中午到了香港，去領取選手包後就開始發燒，下午晚上都在酒店燒得迷迷糊糊的。週日早上病好了，但也不能去跑步了，第一次半馬拉松就這樣錯過。然後對跑步的興趣又一次陷入低谷，一週跑不了一次。</p>

<p>2012年初就看到廣州11月要舉辦馬拉松賽的消息，但一直到九月初都沒有見到正式籌備工作開展，正在想是否搞不成的時候，官方報名消息就出來了。接下來就維持了一個多月的訓練，11月18日開跑，總的來說比較輕鬆的完成了首次半馬拉松。</p>

<p>跑完時比較興奮，發了好幾條tweets：</p>

<blockquote>
  <p>我的首个半马拉松，官方計時1:51:23，完成了两小时内的目标。前十公里留力比较多，下次可以不用那么保守。</p>
</blockquote>

<blockquote>
  <p>參加大規模長跑活動的感覺跟平常自己跑很不一樣，喜歡跑步的朋友都值得嘗試一下，無所謂速度，能在關門時間前跑完就行了。很多人一起跑，興奮度高很多，超過自己平常速度也會覺得很輕鬆；寬闊的馬路車輛全不見了，讓你暢快的跑在路中心；路旁觀衆的鼓勵讓你心中充滿溫暖。</p>
</blockquote>

<blockquote>
  <p>马拉松赛道上，视障参赛者由引导员陪同赛跑，两人的手用带子系在一起。路上见到好多组，男女都有。看到他们，我觉得很感动，我们跑步，再困难也难不过他们。</p>
</blockquote>

<p>跑完後，又沒有了目標了。不知道以後會不會去跑個全馬，半馬跟全馬的區別還是挺大的，對我來說最重要的是不要把膝蓋跑傷了，享受跑步的樂趣，而不是追求成績。</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://aleung.github.io/blog/2009/09/25/Prepare-10-km-run/">准备10km跑</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://aleung.github.io/blog/2011/11/15/Nike-Lunar-Run-10-/">Nike Lunar Run 10公里跑总结</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://aleung.github.io/blog/2011/12/26/Baiyun-mountain-running/">白云山跑步</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>

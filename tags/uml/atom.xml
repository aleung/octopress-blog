<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: UML | Good good study, day day up]]></title>
  <link href="http://aleung.github.io/blog/tags/uml/atom.xml" rel="self"/>
  <link href="http://aleung.github.io/blog/"/>
  <updated>2014-09-17T00:12:55+08:00</updated>
  <id>http://aleung.github.io/blog/</id>
  <author>
    <name><![CDATA[Leo Liang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PlantUML 简介]]></title>
    <link href="http://aleung.github.io/blog/2014/08/23/plantuml/"/>
    <updated>2014-08-23T16:57:33+08:00</updated>
    <id>http://aleung.github.io/blog/2014/08/23/plantuml</id>
    <content type="html"><![CDATA[<p>关于PlantUML的简介。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/38238529" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/aleung/plantuml" title="PlantUML" target="_blank">PlantUML</a> </strong> from <strong><a href="http://www.slideshare.net/aleung" target="_blank">aleung</a></strong> </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text to UML diagram]]></title>
    <link href="http://aleung.github.io/blog/2014/01/20/text-to-uml-diagram/"/>
    <updated>2014-01-20T22:10:00+08:00</updated>
    <id>http://aleung.github.io/blog/2014/01/20/text-to-uml-diagram</id>
    <content type="html"><![CDATA[<p>Usually I used <a href="http://astah.net/">Astah</a> to draw UML diagram to put into design document in MS Word or PowerPoint format. The separation of the source and generated file making management of the UML model file a problem. And also it’s annoying to adjust a large amount of elements by dragging with mouse whenever you add something in the diagram. For a coder, typing on keyboard is faster than drawing with mouse.</p>

<p>Now I switch to <a href="http://plantuml.com/">PlantUML</a>. Just write UML in its <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> and PlantUML generates the diagram. It supports most of the frequent used UML diagrams, which I use most are sequence diagram, class diagram and state diagram. Then I paste the generated diagram into slides (design document) and keep the “source” in note. No need to wonder where to find original UML model file when I need to update the diagram.</p>

<p>The core of PlantUML is simply a jar file. It parses the text input and depends on <em>dot</em> tool from <a href="http://www.graphviz.org/">Graphviz</a> for graph generation (except sequence diagram). </p>

<p>There are <a href="http://www.plantuml.com/running.html">a bunch of ways</a> to run PlantUML. I highlight some of them I prefer:</p>

<ul>
  <li>Online editor. Best choice if you’re too lazy to install anything on your computer.</li>
  <li>Desktop (Windows): <a href="https://code.google.com/p/plant-uml-file-watcher/">PlantUML File Watcher</a></li>
  <li>Embedded into Octopress blog platform. The below examples are using it.</li>
  <li>IDE plugin. Easy way to keep UML together with source code.</li>
</ul>

<p>The syntax of PlantUML’s DSL is quite intuitional, you can start to use it by following example.</p>

<p>```
package ConsentObject «Rect» {
  Consent : id
  Scope : key
}</p>

<p>Client - User
(Client, User) . Consent</p>

<p>Consent - “*” Scope</p>

<p>Consent “1” – “1..*” AccessToken
```</p>

<p>The generated diagram:</p>

<p><img src='/images/plantuml/aa654ab10cd77969eaef52fa8b70576f.png'> </p>

<p>A sequence diagram example:</p>

<p>```
title OAuth 2.0 Authorization Code Grant</p>

<p>actor    UserAgent       as UA
participant Application     as APP
participant OAuthServer     as OAuth
participant ResourceServer  as RS</p>

<p>== Application requests authorization from user ==
UA-&gt;APP: 
APP–&gt;UA:redirect to OAuth Server
UA-&gt;OAuth: GET /authorize?response_type=code
ref over UA, OAuth: user authentication\nuser confirms reqest
OAuth–&gt;UA: redirect to App with authorization_code
UA-&gt;APP: authorization_code</p>

<p>== Application retrieve access token ==
APP-&gt;OAuth: POST /token with authorization_code
ref over APP, OAuth: client authentication
APP&lt;–OAuth: access_token</p>

<p>== Application access protected resource ==
APP-&gt;RS: getResource with access_token
RS-&gt;OAuth: validateToken(access_token)
RS–&gt;APP: result
```</p>

<p><img src='/images/plantuml/be23d4813dfec870f068ecda2f4ba44f.png'></p>
]]></content>
  </entry>
  
</feed>

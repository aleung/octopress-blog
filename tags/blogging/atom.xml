<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Blogging | Good good study, day day up]]></title>
  <link href="http://aleung.github.io/blog/tags/blogging/atom.xml" rel="self"/>
  <link href="http://aleung.github.io/blog/"/>
  <updated>2015-08-29T05:15:42+08:00</updated>
  <id>http://aleung.github.io/blog/</id>
  <author>
    <name><![CDATA[Leo Liang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[几条基础排版规则，让文档显得专业]]></title>
    <link href="http://aleung.github.io/blog/2015/02/05/typesetting-basic+copy/"/>
    <updated>2015-02-05T00:00:00+08:00</updated>
    <id>http://aleung.github.io/blog/2015/02/05/typesetting-basic copy</id>
    <content type="html"><![CDATA[<p>虽然我不是处女座的，但在有些事情上会表现得比较处女座，例如对于文档格式，我常会跟各种细节纠缠不休，为的是看起来显得完美一些。</p>

<p>作为软件开发者，写文档是必备的技能，而且文档里常常会出现大量英文。这里介绍一些很基本的规则，使得文档的显得专业一些。这些规则在其他类型的文章里也是适用的。</p>

<h2 id="section">规则</h2>

<h3 id="section-1">用段落，不要强制换行</h3>

<p>在我看来，禁止使用强制换行，是没有特例的（我们不写诗歌）。在必须保留原始换行的地方，应该作为 preformatted text block（HTML 的 <code>PRE</code>，markdown 的 4 空格缩进段落）出现。</p>

<h3 id="section-2">保持一致性</h3>

<p>保持标点、字体等元素的一致性，整篇文档看起来清晰整齐，可读性高。</p>

<p>在这方面常见问题有：</p>

<dl>
  <dt>中文英文标点混用</dt>
  <dd>
    <p>写技术文章，经常会出现中文英文（西文）混合的场景。原则应该是在中文句子中使用中文标点，西文句子中使用西文标点。至于中文句子中嵌入西文引文，那么嵌入的西文内容中应该遵循西文引文这个“亚环境”的规则，用西文标点，但用来包裹嵌入内容的引号或者括号还是属于中文句子的环境，因此用中文标点。</p>
  </dd>
  <dt>简体繁体中文混用</dt>
  <dd>这个如果不考虑海外用户，问题也不算大，对大陆读者来说，混合简体繁体阅读起来基本上没有违和感。</dd>
  <dt>全角半角混用</dt>
  <dd>除了中文标点外，西文字母和数字这些字符是不应该出现全角的。</dd>
  <dt>成对的符号没有对称</dt>
  <dd>例如引号，是区分左引号和右引号的，一般输入法会正确识别方向，但在拷贝粘贴或者插入编辑的时候要小心方向不要弄错。</dd>
</dl>

<h3 id="section-3">空格的使用</h3>

<p>中文标点不需要加空格。西文标点后需要加一个空格；成对的符号，开始的要在前面加空格，结束的在后面加空格。</p>

<p>西文单词之间要用空格分隔，这个不容易错。但是单词与数字之间也要加空格，例如“iPhone 6”。</p>

<p>中文与西文混排时，中文与西文之间可能要添加空格，以保证有一定间距，具体视乎显示效果而定。有人习惯一律加空格。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<h3 id="section-4">西文大小写不要误用</h3>

<p>强调以下的规则似乎有点小题大做，但确实还是经常会见到这样的错误。</p>

<ul>
  <li>句子首字母大写，句子内不应该用大写，除非下面的情况；</li>
  <li>有些专有名词首字母大写的，即使用在句子中间也要保留大写；</li>
  <li>全部大写的缩写，放在哪里都不能变成小写。</li>
</ul>

<h3 id="section-5">西文没有书名号</h3>

<p>书名号是中文特有的。在西文中，书名用斜体表示，篇名用引号。</p>

<h3 id="section-6">使用样式，不要在文字上添加格式</h3>

<p>同样语义的文字，就应该有同样的显示效果，这也是一致性的体现。把文字变得五颜六色，再插一段超大字体，这种做法还是留在小毛孩的论坛里吧。</p>

<h3 id="section-7">不要滥用强调</h3>

<p>强调会吸引注意力，打破文档视觉结构，只应该用在真正需要的地方。满篇的强调等于没有强调。</p>

<p>若要突出文档架构，应该使用标题（headings）。当文章中有些整行文字需要强调时，往往是应该将它们作为小标题。</p>

<p>在西文中，按照强调的程度不同，一般强调用斜体，特别强调用加粗。但是，斜体只适合西文，中文不好看，在印刷中可以用楷体或者加着重号代替，不过在一般电子文档中不方便使用（在 web 上可以用 CSS 来控制），没有什么好方法，所以在中文中就没法区分一般强调和特别强调了。 <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>改颜色改字体大小之类的奇淫技巧不可使用。</p>

<h3 id="section-8">合理使用格式</h3>

<p>通过合理使用语义化的格式，可以达到需要的显示效果，而不用去直接指定如何显示。HTML 和 markdown 都支持以下几种格式：</p>

<dl>
  <dt>引用 （blockquote）</dt>
  <dd>整段文字引用自其他地方。</dd>
  <dt>Preformatted text block</dt>
  <dd>保留原始格式，包括换行，空格等。</dd>
  <dt>代码格式</dt>
  <dd>用等宽字体（monospaced font）显示。要做得漂亮一点就是加上自动语法高亮渲染了。</dd>
  <dt>定义列表 (definition list)</dt>
  <dd>适用于一个名词，后面一段解释的场合，就像现在这段文字。也就是 key-value map 在文本中的体现。在HTML 里是 <code>DL</code>, <code>DT</code> 和 <code>DD</code> 标签，不属于基本的 markdown 格式，有些引擎会支持。</dd>
</dl>

<h2 id="section-9">总结</h2>

<p>保证各种元素的一致性。关注内容的层次结构，段落或文字的语义属性，而不是显示效果。显示效果由样式来控制。</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://www.geekpark.net/topics/193278">空格杂谈</a>  <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://blog.acgtyrant.com/chinese-western-mixed-typesetting.html">中西文混排</a><a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p><a href="http://blog.justfont.com/2014/01/popular-typography-4/">大眾字型學：理想的排版強調法</a><a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jekyll]]></title>
    <link href="http://aleung.github.io/blog/2015/01/26/jekyll/"/>
    <updated>2015-01-26T21:29:40+08:00</updated>
    <id>http://aleung.github.io/blog/2015/01/26/jekyll</id>
    <content type="html"><![CDATA[<h2 id="jekyll-">用 Jekyll 作为内部技术文档库</h2>

<p><img class="right" src="/attachments/2015/1/ecebook.png"></p>

<p>去年在公司的产品开发团队中推行了使用 <a href="http://jekyllrb.com/">Jekyll</a> 静态网站生成工具来写内部技术文档，大半年下来，效果还不错。</p>

<p>内部技术资料的共享和维护以前一直是个问题。开始用 Office Word 正正规规的写设计文档，维护成本太高了，往往是代码已经翻天覆地变化，文档里都没有反映出来，大家不愿意更新。而且查找起来也不方便。后来推行敏捷方法，不想让文档工作那么 heavy 了，于是用 wiki 来记录。Wiki 的问题是信息非常碎片化，大家很随意的添加新页面，整个 wiki 就像一个草稿本，写得很没有系统。网状的超链接导航令读者很迷茫，不知道需要的信息入口在哪儿，有些隐藏得很深的页面没有几个人知道它们的存在。Wiki 的在线编辑体验也不是那么好。</p>

<p>Jekyll 是个静态网站生成工具，采用 <a href="http://zh.m.wikipedia.org/wiki/Markdown">markdown</a> 语法来写内容，根据模板生成 HTML 页面，发布到一个 web 服务器上，就可以用浏览器在线查看内容。Jekyll 通常用来做  blog 系统，但它用来做有组织的内容发布系统也是完全胜任的。我基本上就是仿照 Jekyll <a href="http://jekyllrb.com/docs/home/">官方文档</a> 的风格和结构来组织我们产品的内部技术文档库。</p>

<p>使用 Jekyll 优点首先是编写方便，markdown 是个轻量的标记语言，上手简单，语法易记，而且有不少编辑工具支持。即使没有渲染成 HTML，也是直接可以阅读的，比起奇奇怪怪还各自不同的 wiki 语法好写多了。</p>

<p>在模板做得好以及安装合适的插件后，生成的文档显示效果相当漂亮，格式效果也很丰富。而且，我们使用了 <a href="https://github.com/aleung/jekyll-plantuml">plantuml</a> 插件，可以直接用文字的方式<strong>写</strong>UML<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，比起以前用其他工具画图，截图，再嵌入文档这种方式方便多了。</p>

<p>技术文档库的原始文件是文本格式，用 git 来做版本管理，不用担心大家同时编辑保存时会相互覆盖的问题，修改历史也很清晰。大家都是程序员，本来代码就是用 git 来管理的，文档也用 git 管理自然是很顺手的事情。使用 <a href="https://github.com/aleung/jekyll-post-revision">jekyll-post-revision</a> 这个插件，能够在生成的页面上显示修改历史记录。</p>

<p>通过 <a href="https://github.com/slashdotdash/jekyll-lunr-js-search">jekyll-lunr-js-search</a> 这个插件，能为站点提供全文搜索的能力，这也是相当方便的功能。</p>

<h2 id="windows--jekyll">在 Windows 上安装 Jekyll</h2>

<p>Jekyll 是用 Ruby 开发的，在 Linux 和 Mac OS X 上安装使用都很简单，在系统中有 Ruby 环境的前提下（Mac 是自带的，Linux 的各种发行版都会有安装包），照着官网上的<a href="http://jekyllrb.com/docs/quickstart/">介绍</a>，几个命令就搞定了。但是，在 Windows 下就不是那么简单了（顺便再黑一下 Windows，不使用 Microsoft 技术的开发者都应该离开它）。</p>

<p>在 Windows 上装过几次 Jekyll，可以写点教程减少大家摸索的时间。大致参考这篇 <a href="http://jekyll-windows.juthilo.com/">Run Jekyll on Windows</a>。</p>

<h3 id="ruby">安装 Ruby</h3>

<p>首先需要安装 Ruby 环境。从 <a href="http://rubyinstaller.org/downloads">http://rubyinstaller.org/downloads</a> 下载 Ruby 2.0 和 DevKit，安装 Ruby，然后将 DevKit 解压到 <code>C:/RubyDevKit</code>，在命令行运行下面指令完成安装。</p>

<p><code>bat
cd C:\RubyDevKit 
ruby dk.rb init 
ruby dk.rb install
</code></p>

<h3 id="jekyll--gem">安装 Jekyll 相关的 gem</h3>

<p>Gem 是 Ruby 的包管理工具。在命令行执行<code>gem install</code>可从互联网的仓库直接下载和安装需要的包。如果需要代理，需要先设置环境变量<code>http_proxy</code>，如不需要则忽略第一行。其中，<code>jekyll</code>这个 gem 是必须安装的，其他的视乎环境、配置和使用的插件，可能需要装，可能不需要装。</p>

<p>``` bat
set http_proxy=http://my-proxy:8080</p>

<p>gem install jekyll</p>

<p>gem install kramdown
gem install pygments
gem install nokogiri
gem install coderay
gem install wdm
gem install json
```</p>

<p>如果在安装过程中出现 SSL 错误，从<a href="https://gist.github.com/luislavena/f064211759ee0f806c88">这里</a>可以找到解决方法。</p>

<h3 id="jekyll">使用 Jekyll</h3>

<p>Jekyll 的相关操作都是执行<code>jekyll</code>命令进行。后面的基本上就是看<a href="http://jekyllrb.com/docs/quickstart/">官方文档</a>慢慢折腾了。</p>

<h2 id="jekyllexe">制作 jekyll.exe</h2>

<p>上面的步骤还是有点繁琐。我们公司里的都是 Java 程序员，在电脑里装个 Ruby 环境也没有其他用处。为了推广使用，简化大家的操作，做一个 portable 的 Jekyll 可执行程序会更好。</p>

<p>制作的步骤基本上参考这篇 <a href="http://www.nickw.it/jekyll-dot-exe/">Building Jekyll.exe for Windows</a>。</p>

<p>首先要安装 OCRA。可能还需要安装 psych，bigdecimal 这些 gem。</p>

<p><code>bat
gem install ocra
</code></p>

<p>解开 jekyll 到一个临时目录：</p>

<p><code>bat
gem unpack jekyll
</code></p>

<p>修改<code>bin/jekyll</code>，在开头增加几个依赖声明：</p>

<p><code>ruby
require 'nokogiri'
require 'jekyll-watch'
require 'wdm'
</code></p>

<p>生成 exe 文件：</p>

<p><code>bat
ocra --add-all-core --gem-all bin/jekyll lib/jekyll/mime.types lib/site_template/**/* lib/site_template/*
</code></p>

<p>做出来的 jekyll.exe 需要测试一下，看看各种命令是否都能正常。视乎配置和使用插件的不同，可能需要增加更多的依赖声明。以上只是我的环境的例子，不一定适用于所有场景。</p>

<p>最后，我知道大家都还是懒得衣来伸手饭来张口的，就提供一个编译好的 <a href="https://github.com/f5f6/f5f6.github.io/raw/master/_bin/jekyll.exe">jekyll.exe</a> 下载，支持 kramdown 和 coderay。但还是那句话：不一定符合你的环境。</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>参考 <a href="/blog/2014/08/23/plantuml/">PlantUML 简介</a>, <a href="/blog/2014/01/20/text-to-uml-diagram/">Text to UML Diagram</a><a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[migrate my blog to github]]></title>
    <link href="http://aleung.github.io/blog/2012/06/25/migrate-my-blog-to-github/"/>
    <updated>2012-06-25T23:40:00+08:00</updated>
    <id>http://aleung.github.io/blog/2012/06/25/migrate-my-blog-to-github</id>
    <content type="html"><![CDATA[<p>个人blog再一次搬家，从 Google Application Engine (GAE) 搬到 github 上来。原来的<a href="http://good-good-study.appspot.com/">地址</a>依然能够访问，但是不会再更新了，新文章都发到这里。Feed订阅地址不变，建议使用Google Reader订阅本站。</p>

<h2 id="section">搬迁原因</h2>

<p>上一次从blogbus搬到GAE，是因为忍受不了审查制度。GAE后来也被墙了，但是即使如此，我也不会为了读者数量而再使用国内的blog服务，在被审查的状态下写东西。</p>

<p>这次搬到github，最主要的动机是为了使用<a href="http://octopress.org/">Octopress</a>这个blog framework。</p>

<h3 id="section-1">好玩</h3>

<p>这个是最重要的原因。写blog不是什么正事，本来就是兴趣而已。之前搬离blogbus，选择了GAE的原因就是尝试一下GAE和PlayFramework编程。这次就是为了尝试Octopress。</p>

<h3 id="markdown">使用markdown写作</h3>

<p>Octopress使用markdown语法。接触markdown语法是在github项目的README页面上，还有<a href="http://stackoverflow.com">StackOverflow</a>里发帖用的也是markdown。刚开始觉得又是另一种wiki语法，但慢慢习惯了发现很好用：语法不太复杂，常用的格式不难记住；基本上常用的格式都覆盖了，实在不行还可以直接写HTML；原始文本的阅读性很好，不像HTML没法直接看；排版容易，文本编辑器就可以，而HTML的WYSIWYG编辑器生成的内容经常格式错乱需要手工再编辑。</p>

<h3 id="section-2">访问速度提高</h3>

<p>原来在GAE上的blog因为访问量少，服务进程闲置一段时间就会关闭，新请求进来要实例化新服务进程。我用的是PlayFramework，每次初始化都要等上十来秒左右，因此打开首个页面一定要等，体验很不好。</p>

<p>Octopress是在本地生成HTML页面后静态发布，速度自然不慢。不过缺省页面模版有些引用的资源下载速度不快，也有些可能被墙了，影响页面加载时间，下一步需要优化一下。</p>

<h3 id="section-3">版本管理与备份</h3>

<p>Octopress最好用的特性就是跟github集成，发布到github上。整个blog就是一个git project，天然就有版本管理了。放在github上，我也不需要考虑备份问题了。</p>

<h3 id="section-4">目前没有被墙</h3>

<p>目前github是可以直接访问的，因此可以方便大陆读者。不过这个是最次要的原因了，因为作为一个优秀的网络服务，github说不定哪天就被GFW给认证了。另外，前面说过页面里面嵌入的某些资源是被墙的，我还没有测试过对访问会带来什么影响。</p>

<h2 id="section-5">搬迁过程</h2>

<p>Octopress的搭建不算难，需要安装ruby和一些gem，按照文档指导，再Google一下就能搞掂。按照文档做了一些配置，也没什么问题。缺省不支持tag，找了两个<a href="https://github.com/robbyedwards/octopress-tag-pages">插件</a>装上去。模版和theme都用缺省的，稍微改了一点点，反正不在乎有没有个性了，我自己做也不一定好看，以后再说吧。缺省style显示不出表格，也需要改一点css。网上的资料不少，遇到问题Google一下大都能找到答案。</p>

<p>然后就是旧文章的迁移了，我原来的blog能够将所有数据用json格式导出，现在就要将它转换成新系统的文件格式；原来的文章正文是HTML，需要转换成markdown语法。不懂ruby，于是找了个python写的转换工具<a href="http://www.aaronsw.com/2002/html2text/">html2txt</a>，自己再写点脚本就好了。</p>

<p>问题还是有一些的：</p>

<p>Post的时间很奇怪：如果精确到秒，Octopress(其实是Jekyll)会认为这是UTC时间，在generate的时候变换为本地时区，页面里的帖子时间就加了8个小时；如果不精确到秒，只是分钟，那它就会当做本地时间而不做变换。我都不知道这是by design还是bug，不懂ruby看了下代码不得要领。后来我就把时间全部都改成只保留到分钟，绕开这个问题算了。</p>

<p>Ruby不支持中文URL，因此有几个问题：</p>

<ol>
  <li>文章URL不能是中文</li>
  <li>tag URL不能是中文</li>
  <li>文章中不能带有中文URL的链接。</li>
</ol>

<p>对于1，可以不用标题而只是用id来做post URL，但我觉得permalink还是用标题更cool一些，将中文翻译成英文好了。Google translate的API不公开了，本来想用Bing translate的API，但它要用OAuth2认证，我嫌要写太多代码了，后来找到有道翻译的API，效果还行。</p>

<p>对于2，因为tag的URL与显示是一致的，不能象post permalink那样做。网上的一些解决方法都比较复杂，不能保证日后升级兼容性，我干脆全部用英文做tag算了。</p>

<p>对于3，搜索了一遍旧文章，只有一个链接是中文的，而且已经失效了，故此也不需要花功夫了。</p>

<p>最后，就是还需要人工去check一遍老文章，看看自动转换的格式有没有问题，顺便回顾一下以前写的东西，有需要修改补充的就更新一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[试验 Octopress 的各种特性]]></title>
    <link href="http://aleung.github.io/blog/2012/06/24/try-octopress-markdown-features/"/>
    <updated>2012-06-24T23:08:00+08:00</updated>
    <id>http://aleung.github.io/blog/2012/06/24/try-octopress-markdown-features</id>
    <content type="html"><![CDATA[<p>这个blog使用的markdown解释器是<a href="http://kramdown.rubyforge.org/quickref.html">kramdown</a>，比起标准markdown有所增强。再加上Jekyll的一些插件特供的特殊功能。</p>

<h2 id="markdown">Markdown基本语法</h2>

<h3 id="section">标题</h3>

<p>标题用<code>#</code>开头，一个井号是一级标题，两个井号是二级标题，井号越多字体越小。</p>

<p>一级标题也可以通过在标题的下一行用<code>========</code>来标注，二级标题就是<code>---------</code>。更小的标题就不能用这种方式了。</p>

<h3 id="section-1">链接</h3>

<p>格式：</p>

<pre><code>[text](link)
</code></pre>

<h3 id="section-2">图片</h3>

<p>与链接类似，区别是前面增加叹号<code>!</code>：</p>

<pre><code>![text](link)
</code></pre>

<p>另一种图片语法是由插件支持的，用<code>{</code> <code>%</code>包围的img标签，后面跟着图片URL，在URL前可以加入可选的css class名称，如：<code>left</code>, <code>right</code>，得到文字环绕效果。</p>

<h3 id="blockquote">引用 (blockquote)</h3>

<p>用<code>&gt;</code>开头的一个段落：</p>

<blockquote>
  <p>Stay hungry…
stay foolish.</p>
</blockquote>

<p>用四个空格缩进的段落，会按原始格式显示，相当于HTML的<code>&lt;pre&gt;</code>的效果：</p>

<pre><code>+----+
|    |
+----+
</code></pre>

<p>也可以通过在原始格式引用段落的前后各加一行波浪号<code>~~~~~~</code>来实现。(这是kramdown特有的语法)</p>

<h3 id="section-3">显示效果</h3>

<p>用<code>*</code>或<code>_</code>包围的文字会用斜体显示：</p>

<p>Some of these words <em>are emphasized</em>.</p>

<p>如果双重符号<code>**</code>或<code>__</code>则会用粗体显示：</p>

<p>Use two asterisks for <strong>strong emphasis</strong>.</p>

<p>用<code>`</code>包围的文字按代码格式显示。</p>

<h3 id="section-4">列表</h3>

<p>用<code>*</code>, <code>+</code>, <code>-</code>开头的行都会作为列表项。子项缩进两个空格。</p>

<ul>
  <li>加号开头的段落
    <ul>
      <li>缩进两个空格，加号开头
        <ul>
          <li>再缩进两个空格，三级项目</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>其次</li>
</ul>

<h2 id="section-5">表格</h2>

<p>注意第二行的分割线的冒号位置，决定了这一列的对齐方式。</p>

<pre><code>No.   | Name    | Status  |
-----:|:--------|:-------:|
1     | Alaph   | done    |
2     | Beta    | ongoing |
10000 | Release | n/a     | 
</code></pre>

<p>效果：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: right">No.</th>
      <th style="text-align: left">Name</th>
      <th style="text-align: center">Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">1</td>
      <td style="text-align: left">Alaph</td>
      <td style="text-align: center">done</td>
    </tr>
    <tr>
      <td style="text-align: right">2</td>
      <td style="text-align: left">Beta</td>
      <td style="text-align: center">ongoing</td>
    </tr>
    <tr>
      <td style="text-align: right">10000</td>
      <td style="text-align: left">Release</td>
      <td style="text-align: center">n/a</td>
    </tr>
  </tbody>
</table>

<h3 id="section-6">脚注</h3>

<p>增加脚注<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>很简单，就是这样：<code>[^1]</code></p>

<p>脚注定义的写法是以<code>[^1]: </code>开头，后面跟着定义。</p>

<h2 id="section-7">嵌入代码</h2>

<p>下面的嵌入代码的方式都是由插件提供的，并非markdown语法。</p>

<h3 id="section-8">代码高亮</h3>

<pre><code> ``` [language] [title] [url] [link text]
 code snippet
 ```
</code></pre>

<p>效果：</p>

<p><code>java HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World");
    }
}
</code></p>

<h3 id="gist">嵌入Gist</h3>

<p><div><script src='https://gist.github.com/2934603.js'></script>
<noscript><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; 
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:context=&quot;http://www.springframework.org/schema/context&quot;
    xsi:schemaLocation=&quot;
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;
    default-autowire=&quot;byType&quot;&gt;

    &lt;context:property-placeholder location=&quot;file:bin/leoliang/spring/test1/bean.properties&quot;/&gt;

    &lt;bean id=&quot;fooA&quot; class=&quot;leoliang.spring.test1.FooImplA&quot; /&gt;
    &lt;bean id=&quot;fooB&quot; class=&quot;leoliang.spring.test1.FooImplB&quot; /&gt;
    
    &lt;bean id=&quot;bar&quot; class=&quot;leoliang.spring.test1.Bar&quot;&gt;
        &lt;property name=&quot;foo&quot; ref=&quot;${foo_bean_id}&quot;/&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</code></pre></noscript></div>
</p>

<p>方法是写一个用<code>{</code> <code>%</code>包围的gist标签，后面带上id。</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>脚注一定会显示在最末尾。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[独立博客一周年纪念]]></title>
    <link href="http://aleung.github.io/blog/2011/02/14/Independent-blog-of-a-week/"/>
    <updated>2011-02-14T01:34:00+08:00</updated>
    <id>http://aleung.github.io/blog/2011/02/14/Independent-blog-of-a-week</id>
    <content type="html"><![CDATA[<p>Good good study, day day up 这个博客从2001年就开始写，正如副标题所说，定位为记录学习心得和一些想法（之前我还有另外一个摄影、旅行主题的博客），基本上谈的就是理科生的话题。原来一直是放在BlogBus上的，直到去年初，实在忍受不了BlogBus疯狂的内容审查，搬出来做独立博客。</p>

<p>查看历史记录，在这个搭建于Google App Engine上的新blog上发的<a href="http://good-good-study.appspot.com/blog/posts/1001">第一篇文章</a>是在去年的2月14日，居然是在情人节！今天是2月13日，也就是这个独立博客已经一周岁了。</p>

<p>统计一下新blog这一年里发布的文章有30篇（不包括更新的旧文章），平均两周一篇，比我自己印象中的多了。希望自己今后能够继续保持这样一个习惯。最热门的文章是”<a href="http://good-good-study.appspot.com/blog/posts/20001">在Android手机上使用SSH tunnel翻墙</a>“，其次是”<a href="http://good-good-study.appspot.com/blog/posts/3224">Google中国地图偏移</a>“。</p>

<p>新的blog留言需要用Google帐号登录，spam是全没有了，但是留言也冷清了好多。没想到什么办法既方便又能杜绝spam的。不知道有没有方法通过Google Buzz或者Twitter来留言呢。另外一个问题是搬家之后搜索引擎的收录不理想，一些关键字的搜索结果还是指向我原来的blog。</p>

<p>搬到GAE上，就已经准备好要被墙，一年下来appspot.com被封被解封反复多次，似乎到目前为止这个blog还能直接访问（不知道不同地区的情况）。但是，即使被封也不会再搬回墙内，作为一个软件开发者，受困于信息封锁就意味着被技术发展所抛弃，我的博客读者不应该是这样的人。有人说翻墙太麻烦，老想找免费的方法当然麻烦，还是花点钱买个ssh帐号吧，便宜的就是一年几美元。每个月上百的ADSL费用都舍得花了，就不要吝啬这一年几十块钱了，无障碍获取信息的价值就远远值回来了。</p>

<p>就写到这里吧。</p>
]]></content>
  </entry>
  
</feed>

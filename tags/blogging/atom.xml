<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Blogging | Good good study, day day up]]></title>
  <link href="http://aleung.github.io/blog/tags/blogging/atom.xml" rel="self"/>
  <link href="http://aleung.github.io/blog/"/>
  <updated>2015-01-25T14:04:23+08:00</updated>
  <id>http://aleung.github.io/blog/</id>
  <author>
    <name><![CDATA[Leo Liang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[migrate my blog to github]]></title>
    <link href="http://aleung.github.io/blog/2012/06/25/migrate-my-blog-to-github/"/>
    <updated>2012-06-25T23:40:00+08:00</updated>
    <id>http://aleung.github.io/blog/2012/06/25/migrate-my-blog-to-github</id>
    <content type="html"><![CDATA[<p>个人blog再一次搬家，从 Google Application Engine (GAE) 搬到 github 上来。原来的<a href="http://good-good-study.appspot.com/">地址</a>依然能够访问，但是不会再更新了，新文章都发到这里。Feed订阅地址不变，建议使用Google Reader订阅本站。</p>

<h2 id="section">搬迁原因</h2>

<p>上一次从blogbus搬到GAE，是因为忍受不了审查制度。GAE后来也被墙了，但是即使如此，我也不会为了读者数量而再使用国内的blog服务，在被审查的状态下写东西。</p>

<p>这次搬到github，最主要的动机是为了使用<a href="http://octopress.org/">Octopress</a>这个blog framework。</p>

<h3 id="section-1">好玩</h3>

<p>这个是最重要的原因。写blog不是什么正事，本来就是兴趣而已。之前搬离blogbus，选择了GAE的原因就是尝试一下GAE和PlayFramework编程。这次就是为了尝试Octopress。</p>

<h3 id="markdown">使用markdown写作</h3>

<p>Octopress使用markdown语法。接触markdown语法是在github项目的README页面上，还有<a href="http://stackoverflow.com">StackOverflow</a>里发帖用的也是markdown。刚开始觉得又是另一种wiki语法，但慢慢习惯了发现很好用：语法不太复杂，常用的格式不难记住；基本上常用的格式都覆盖了，实在不行还可以直接写HTML；原始文本的阅读性很好，不像HTML没法直接看；排版容易，文本编辑器就可以，而HTML的WYSIWYG编辑器生成的内容经常格式错乱需要手工再编辑。</p>

<h3 id="section-2">访问速度提高</h3>

<p>原来在GAE上的blog因为访问量少，服务进程闲置一段时间就会关闭，新请求进来要实例化新服务进程。我用的是PlayFramework，每次初始化都要等上十来秒左右，因此打开首个页面一定要等，体验很不好。</p>

<p>Octopress是在本地生成HTML页面后静态发布，速度自然不慢。不过缺省页面模版有些引用的资源下载速度不快，也有些可能被墙了，影响页面加载时间，下一步需要优化一下。</p>

<h3 id="section-3">版本管理与备份</h3>

<p>Octopress最好用的特性就是跟github集成，发布到github上。整个blog就是一个git project，天然就有版本管理了。放在github上，我也不需要考虑备份问题了。</p>

<h3 id="section-4">目前没有被墙</h3>

<p>目前github是可以直接访问的，因此可以方便大陆读者。不过这个是最次要的原因了，因为作为一个优秀的网络服务，github说不定哪天就被GFW给认证了。另外，前面说过页面里面嵌入的某些资源是被墙的，我还没有测试过对访问会带来什么影响。</p>

<h2 id="section-5">搬迁过程</h2>

<p>Octopress的搭建不算难，需要安装ruby和一些gem，按照文档指导，再Google一下就能搞掂。按照文档做了一些配置，也没什么问题。缺省不支持tag，找了两个<a href="https://github.com/robbyedwards/octopress-tag-pages">插件</a>装上去。模版和theme都用缺省的，稍微改了一点点，反正不在乎有没有个性了，我自己做也不一定好看，以后再说吧。缺省style显示不出表格，也需要改一点css。网上的资料不少，遇到问题Google一下大都能找到答案。</p>

<p>然后就是旧文章的迁移了，我原来的blog能够将所有数据用json格式导出，现在就要将它转换成新系统的文件格式；原来的文章正文是HTML，需要转换成markdown语法。不懂ruby，于是找了个python写的转换工具<a href="http://www.aaronsw.com/2002/html2text/">html2txt</a>，自己再写点脚本就好了。</p>

<p>问题还是有一些的：</p>

<p>Post的时间很奇怪：如果精确到秒，Octopress(其实是Jekyll)会认为这是UTC时间，在generate的时候变换为本地时区，页面里的帖子时间就加了8个小时；如果不精确到秒，只是分钟，那它就会当做本地时间而不做变换。我都不知道这是by design还是bug，不懂ruby看了下代码不得要领。后来我就把时间全部都改成只保留到分钟，绕开这个问题算了。</p>

<p>Ruby不支持中文URL，因此有几个问题：</p>

<ol>
  <li>文章URL不能是中文</li>
  <li>tag URL不能是中文</li>
  <li>文章中不能带有中文URL的链接。</li>
</ol>

<p>对于1，可以不用标题而只是用id来做post URL，但我觉得permalink还是用标题更cool一些，将中文翻译成英文好了。Google translate的API不公开了，本来想用Bing translate的API，但它要用OAuth2认证，我嫌要写太多代码了，后来找到有道翻译的API，效果还行。</p>

<p>对于2，因为tag的URL与显示是一致的，不能象post permalink那样做。网上的一些解决方法都比较复杂，不能保证日后升级兼容性，我干脆全部用英文做tag算了。</p>

<p>对于3，搜索了一遍旧文章，只有一个链接是中文的，而且已经失效了，故此也不需要花功夫了。</p>

<p>最后，就是还需要人工去check一遍老文章，看看自动转换的格式有没有问题，顺便回顾一下以前写的东西，有需要修改补充的就更新一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[试验 Octopress 的各种特性]]></title>
    <link href="http://aleung.github.io/blog/2012/06/24/try-octopress-markdown-features/"/>
    <updated>2012-06-24T23:08:00+08:00</updated>
    <id>http://aleung.github.io/blog/2012/06/24/try-octopress-markdown-features</id>
    <content type="html"><![CDATA[<p>这个blog使用的markdown解释器是<a href="http://kramdown.rubyforge.org/quickref.html">kramdown</a>，比起标准markdown有所增强。再加上Jekyll的一些插件特供的特殊功能。</p>

<h2 id="markdown">Markdown基本语法</h2>

<h3 id="section">标题</h3>

<p>标题用<code>#</code>开头，一个井号是一级标题，两个井号是二级标题，井号越多字体越小。</p>

<p>一级标题也可以通过在标题的下一行用<code>========</code>来标注，二级标题就是<code>---------</code>。更小的标题就不能用这种方式了。</p>

<h3 id="section-1">链接</h3>

<p>格式：</p>

<pre><code>[text](link)
</code></pre>

<h3 id="section-2">图片</h3>

<p>与链接类似，区别是前面增加叹号<code>!</code>：</p>

<pre><code>![text](link)
</code></pre>

<p>另一种图片语法是由插件支持的，用<code>{</code> <code>%</code>包围的img标签，后面跟着图片URL，在URL前可以加入可选的css class名称，如：<code>left</code>, <code>right</code>，得到文字环绕效果。</p>

<h3 id="blockquote">引用 (blockquote)</h3>

<p>用<code>&gt;</code>开头的一个段落：</p>

<blockquote>
  <p>Stay hungry…
stay foolish.</p>
</blockquote>

<p>用四个空格缩进的段落，会按原始格式显示，相当于HTML的<code>&lt;pre&gt;</code>的效果：</p>

<pre><code>+----+
|    |
+----+
</code></pre>

<p>也可以通过在原始格式引用段落的前后各加一行波浪号<code>~~~~~~</code>来实现。(这是kramdown特有的语法)</p>

<h3 id="section-3">显示效果</h3>

<p>用<code>*</code>或<code>_</code>包围的文字会用斜体显示：</p>

<p>Some of these words <em>are emphasized</em>.</p>

<p>如果双重符号<code>**</code>或<code>__</code>则会用粗体显示：</p>

<p>Use two asterisks for <strong>strong emphasis</strong>.</p>

<p>用<code>`</code>包围的文字按代码格式显示。</p>

<h3 id="section-4">列表</h3>

<p>用<code>*</code>, <code>+</code>, <code>-</code>开头的行都会作为列表项。子项缩进两个空格。</p>

<ul>
  <li>加号开头的段落
    <ul>
      <li>缩进两个空格，加号开头
        <ul>
          <li>再缩进两个空格，三级项目</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>其次</li>
</ul>

<h2 id="section-5">表格</h2>

<p>注意第二行的分割线的冒号位置，决定了这一列的对齐方式。</p>

<pre><code>No.   | Name    | Status  |
-----:|:--------|:-------:|
1     | Alaph   | done    |
2     | Beta    | ongoing |
10000 | Release | n/a     | 
</code></pre>

<p>效果：</p>

<table>
  <thead>
    <tr>
      <th style="text-align: right">No.</th>
      <th style="text-align: left">Name</th>
      <th style="text-align: center">Status</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">1</td>
      <td style="text-align: left">Alaph</td>
      <td style="text-align: center">done</td>
    </tr>
    <tr>
      <td style="text-align: right">2</td>
      <td style="text-align: left">Beta</td>
      <td style="text-align: center">ongoing</td>
    </tr>
    <tr>
      <td style="text-align: right">10000</td>
      <td style="text-align: left">Release</td>
      <td style="text-align: center">n/a</td>
    </tr>
  </tbody>
</table>

<h3 id="section-6">脚注</h3>

<p>增加脚注<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>很简单，就是这样：<code>[^1]</code></p>

<p>脚注定义的写法是以<code>[^1]: </code>开头，后面跟着定义。</p>

<h2 id="section-7">嵌入代码</h2>

<p>下面的嵌入代码的方式都是由插件提供的，并非markdown语法。</p>

<h3 id="section-8">代码高亮</h3>

<pre><code> ``` [language] [title] [url] [link text]
 code snippet
 ```
</code></pre>

<p>效果：</p>

<p><code>java HelloWorld.java
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World");
    }
}
</code></p>

<h3 id="gist">嵌入Gist</h3>

<p>{% gist 2934603 %}</p>

<p>方法是写一个用<code>{</code> <code>%</code>包围的gist标签，后面带上id。</p>

<hr />
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>脚注一定会显示在最末尾。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[独立博客一周年纪念]]></title>
    <link href="http://aleung.github.io/blog/2011/02/14/Independent-blog-of-a-week/"/>
    <updated>2011-02-14T01:34:00+08:00</updated>
    <id>http://aleung.github.io/blog/2011/02/14/Independent-blog-of-a-week</id>
    <content type="html"><![CDATA[<p>Good good study, day day up 这个博客从2001年就开始写，正如副标题所说，定位为记录学习心得和一些想法（之前我还有另外一个摄影、旅行主题的博客），基本上谈的就是理科生的话题。原来一直是放在BlogBus上的，直到去年初，实在忍受不了BlogBus疯狂的内容审查，搬出来做独立博客。</p>

<p>查看历史记录，在这个搭建于Google App Engine上的新blog上发的<a href="http://good-good-study.appspot.com/blog/posts/1001">第一篇文章</a>是在去年的2月14日，居然是在情人节！今天是2月13日，也就是这个独立博客已经一周岁了。</p>

<p>统计一下新blog这一年里发布的文章有30篇（不包括更新的旧文章），平均两周一篇，比我自己印象中的多了。希望自己今后能够继续保持这样一个习惯。最热门的文章是”<a href="http://good-good-study.appspot.com/blog/posts/20001">在Android手机上使用SSH tunnel翻墙</a>“，其次是”<a href="http://good-good-study.appspot.com/blog/posts/3224">Google中国地图偏移</a>“。</p>

<p>新的blog留言需要用Google帐号登录，spam是全没有了，但是留言也冷清了好多。没想到什么办法既方便又能杜绝spam的。不知道有没有方法通过Google Buzz或者Twitter来留言呢。另外一个问题是搬家之后搜索引擎的收录不理想，一些关键字的搜索结果还是指向我原来的blog。</p>

<p>搬到GAE上，就已经准备好要被墙，一年下来appspot.com被封被解封反复多次，似乎到目前为止这个blog还能直接访问（不知道不同地区的情况）。但是，即使被封也不会再搬回墙内，作为一个软件开发者，受困于信息封锁就意味着被技术发展所抛弃，我的博客读者不应该是这样的人。有人说翻墙太麻烦，老想找免费的方法当然麻烦，还是花点钱买个ssh帐号吧，便宜的就是一年几美元。每个月上百的ADSL费用都舍得花了，就不要吝啬这一年几十块钱了，无障碍获取信息的价值就远远值回来了。</p>

<p>就写到这里吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[这个blog现在支持feed输出了]]></title>
    <link href="http://aleung.github.io/blog/2010/02/14/This-blog-now-support-feed-output/"/>
    <updated>2010-02-14T18:16:00+08:00</updated>
    <id>http://aleung.github.io/blog/2010/02/14/This-blog-now-support-feed-output</id>
    <content type="html"><![CDATA[<p>支持atom比我想象中简单很多，根本用不着什么library，多加一个xml template就行了。</p>

<p>如果你的浏览器支持，就能在地址栏右边看到feed的图标，点击就可以选择阅读器进行订阅。或者在阅读器（例如Google Reader）里面输入这个网站的地址，也可以订阅。</p>

<p><img src="http://farm5.static.flickr.com/4058/4353315450_7d1914e9ab_o.png" alt="" /></p>

<p>PS. 这个blog的页面使用了一些HTML5标签，因此需要使用新的浏览器才能正常浏览，例如使用 Firefox 3, Chrome。如果你看到的页面不是上图的样子，说明你的浏览器 out date 啦。</p>

<p>PPS. 我会一如既往的使用flickr来存放照片，如果你看不到照片，或者有一天你连这个blog的页面都看不到，那说明你上的只是局域网，根本不是Internet。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基本功能完备，可以公开了]]></title>
    <link href="http://aleung.github.io/blog/2010/02/14/Basic-function-complete-can-open/"/>
    <updated>2010-02-14T18:16:00+08:00</updated>
    <id>http://aleung.github.io/blog/2010/02/14/Basic-function-complete-can-open</id>
    <content type="html"><![CDATA[<p>一个blog所需要的功能的最小集合已经完备了，可以投入使用，再边用边改进了：</p>

<ul>
  <li>发文章</li>
  <li>文章分页显示</li>
  <li>Tag</li>
  <li>评论</li>
  <li>用户认证通过Google account进行</li>
</ul>

<p><a href="https://appengine.google.com/">Google Application Engine</a> 提供了强大的平台，<a href="http://www.playframework.org">Play Framework</a>使得Java web开发变得很简便。开发这个应用用了几天时间，不算快，但作为第一次，学习、查资料花的时间不少，上手之后的工作效率将会提高很多。另外，对我来说，HTML+CSS才是最困难的部分，基本没有做前端的经验。现在的界面是从sample里面copy出来改的，每改一点就要看看效果，边试边改。</p>
]]></content>
  </entry>
  
</feed>

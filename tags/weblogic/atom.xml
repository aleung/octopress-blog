<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: WebLogic | Good good study, day day up]]></title>
  <link href="http://aleung.github.com/blog/tags/weblogic/atom.xml" rel="self"/>
  <link href="http://aleung.github.com/blog/"/>
  <updated>2012-07-24T00:50:37+08:00</updated>
  <id>http://aleung.github.com/blog/</id>
  <author>
    <name><![CDATA[Leo Liang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Diagram of WebLogic MBean navigation]]></title>
    <link href="http://aleung.github.com/blog/2011/03/21/Diagram-of-WebLogic-MBean-navigation/"/>
    <updated>2011-03-21T18:37:00+08:00</updated>
    <id>http://aleung.github.com/blog/2011/03/21/Diagram-of-WebLogic-MBean-navigation</id>
    <content type="html"><![CDATA[<p>It isn’t a full diagram that presents all WebLogic MBeans. Only the MBeans I’m interesting in are shown.</p>

<p><a href="http://www.flickr.com/photos/leoliang/5546496754/"><img src="http://farm6.static.flickr.com/5056/5546496754_181f58ec69_b.jpg" alt="WeblogicMBean" /></a></p>

<p>Reference:<a href="http://download.oracle.com/docs/cd/E15051_01/wls/docs103/wlsmbeanref/core/index.html">The WebLogic Server® MBean Reference</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebLogic在非Resource Adapter里直接使用JCA WorkManager的失败尝试]]></title>
    <link href="http://aleung.github.com/blog/2010/11/02/WebLogic-Resource-Adapter-JCA-WorkManager-/"/>
    <updated>2010-11-02T05:43:00+08:00</updated>
    <id>http://aleung.github.com/blog/2010/11/02/WebLogic-Resource-Adapter-JCA-WorkManager-</id>
    <content type="html"><![CDATA[<p>JCA 1.5 规范定义了WorkManager API，能方便的进行任务的(多线程)并行处理。按照JCA规范的原意，WorkManager是仅提供给Resource Adapter使用的，容器会提供WorkManager实例并通过BootstrapContext注入到adapter中。可是，有时在其他场合，例如EJB、Servlet中，也希望能将请求拆分，使用WorkManager并行处理，但JEE规范中并没有提供这样的机制。</p>

<p>WebLogic提供了CommonJ WorkManager API，可用于任意应用中，但这个API不在JEE规范之中，因此GlassFish是不支持的。而且，使用WebLogic CommonJ WorkManager时需要在ejb-jar.xml中加入一个类型为commonj.work.WorkManager的resource reference，这样同一个ejb包就不能在不同application server间通用了，因此我还是希望能找到一种通用的方法。</p>

<p>SpringFramework的org.springframework.jca.work包为GlassFish和JBoss提供了在Resource Adapter外部使用JCA 1.5 WorkManager的简便方法。看了for GlassFish的源代码，发现它其实是调用了GlassFish内部的factory去直接创建WorkManager，那么对GlassFish是否也可以这样做呢？</p>

<p>反编译WebLogic的jar包，发现commonj WorkManager和connector WorkManager实际上都是delegate到一个weblogic.work.WorkManager实现的，也就是说在WebLogic里，CommonJ和JCA的WorkManager的底层实现其实都是同样的。接下来找到了weblogic.work.WorkManagerFactory，它有find和findOrCreate方法可返回weblogic.work.WorkManager实例，也许就是可以拿到weblogic-ejb-jar.xml里面定义的weblogic WorkManager。拿到了内部的weblogic.work.WorkManager实例后，再调用weblogic.connector.work.WorkManager的create方法，将这个内部WorkManger包裹到JCA WorkManager中，那么我们的应用就可以使用这个JCA WorkManager了，通过Spring的WorkManagerTaskExecutor来很方便的调度任务，上层的逻辑就可以做到与应用服务器无关。看起来很美。</p>

<p><a href="http://www.flickr.com/photos/leoliang/5137622842/"><img src="http://farm2.static.flickr.com/1208/5137622842_a9b4e5fda8_b.jpg" alt="WLS-WorkManager" /></a></p>

<p>可是结果是残酷的。写了一个测试程序，结果是通过这个WorkManagerFactory可以成功的获取到weblogic.work.WorkManager实例，也能够创建出包裹的JCA WorkManager，可是真正要使用它来执行work时，它很坚定的拒绝了，抛出异常信息：Attempt to create Work outside the context of the Connector container。</p>

<p>查看代码，发现weblogic.connector.work.WorkManager及WorkImpl内部会寻找相应的RAInstanceManager，并且WorkImpl需要用到rarClassloader，看来它设计上还是与resource adapter相关的。一涉及到classloader，我无心恋战了，算了，就此打住。</p>

<p>P.S. 既然说到WorkManager，就推荐一下我的同事写的相关的一篇blog：<a href="http://www.javaeye.com/topic/623825">application server 下的任务异步/并行执行方案</a></p>

<p>P.P.S. 我后来采用的解决方案是让build system可以根据需要为不同的 target application server 选择不同的 deployment descriptor 来build相应的artifacts。</p>

<p>P.P.P.S. 回头再读一下，发现文章里中文英文混杂得很厉害。没办法了，那些专业术语都是看惯英文了，用中文翻译了反而别扭。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WebLogic的classloading]]></title>
    <link href="http://aleung.github.com/blog/2009/09/27/WebLogic-classloading/"/>
    <updated>2009-09-27T07:23:00+08:00</updated>
    <id>http://aleung.github.com/blog/2009/09/27/WebLogic-classloading</id>
    <content type="html"><![CDATA[<p>一直对classloading的了解不是很清晰，每次遇到涉及WebLogic的classpath设置、classloading问题debug时都要去网上搜索资料。现在把资料整理下来。</p>

<p><a href="http://www.flickr.com/photos/leoliang/4379354938/"><img src="http://farm3.static.flickr.com/2682/4379354938_dc7cd5f47e_o.png" alt="wls_classloading" /></a></p>

<h3 id="section"></h3>

<h3 id="classloader">各层级classloader加载的类的范围</h3>

<ul>
  <li>Bootstrap classloader
    <ul>
      <li>Core Java libraries (<jre>/lib)</jre></li>
    </ul>
  </li>
  <li>Extension classloader
    <ul>
      <li>JRE extensions directory (<jre>/lib/ext)</jre></li>
    </ul>
  </li>
  <li>WebLogic Server system classloader
    <ul>
      <li>Classpath</li>
      <li>
        <domain>/lib

</domain>
      </li>
    </ul>
  </li>
  <li>Filtering classloader
    <ul>
      <li>nothing</li>
    </ul>
  </li>
  <li>Application classloader
    <ul>
      <li>EJB JARs</li>
      <li>APP-INF/lib</li>
      <li>APP-INF/classes</li>
      <li>Manifest Class-Path in EJB JARs</li>
    </ul>
  </li>
  <li>Web application classloader
    <ul>
      <li>WAR</li>
      <li>Manifest Class-Path in WAR</li>
    </ul>
  </li>
</ul>

<h3 id="section-1">类加载的优先级</h3>

<p>每个classloader在要加载一个class之前都会先请求它的上层classloader，如此逐级传递。因此效果就是越上层的classloader优先级越高，一个class如果在上层classloader能加载到，就不会让下面的classloader加载。</p>

<p>但是web application classloader是个特例，通过在weblogic.xml中配置<prefer-web-inf-classes>，可以让web application classloader优先在自己war范围内加载类，找不到的类才会请求上层classloader。</prefer-web-inf-classes></p>

<p>Filtering classloader是个特殊的classloader，它并不会加载任何类，而是起到控制类加载优先级的作用。在weblogic-application.xml中配置<prefer-application-packages>，可以限制对于指定的类不再向上层classloader请求，也就是限制在EAR的范围之内加载。</prefer-application-packages></p>

<h3 id="section-2">其他</h3>

<p>以上仅仅描述了缺省情况下classloading的行为。WebLogic对于一个application (EAR)内的classloader的层次结构是可以自定义的。Shared library和optional package，也会影响到classloading。另外，resource adapter (RAR)也有独立的classloader。还有其他的一些细节，需要查阅<a href="http://download.oracle.com/docs/cd/E13222_01/wls/docs100/programming/classloading.html">Understanding WebLogic Server Application Classloading</a>。</p>
]]></content>
  </entry>
  
</feed>

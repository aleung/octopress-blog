<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: SoftwareDev | Good good study, day day up]]></title>
  <link href="http://aleung.github.io/blog/tags/softwaredev/atom.xml" rel="self"/>
  <link href="http://aleung.github.io/blog/"/>
  <updated>2015-01-02T19:04:38+08:00</updated>
  <id>http://aleung.github.io/blog/</id>
  <author>
    <name><![CDATA[Leo Liang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Getting start with sbt]]></title>
    <link href="http://aleung.github.io/blog/2014/12/26/getting-start-with-sbt/"/>
    <updated>2014-12-26T17:17:50+08:00</updated>
    <id>http://aleung.github.io/blog/2014/12/26/getting-start-with-sbt</id>
    <content type="html"><![CDATA[<p>A shortened sbt tutorial for beginner and quick reference.</p>

<h2 id="directory-structure">Directory structure</h2>

<p><code>
lib/
project/
  Build.scala
  plugins.sbt
src/
  main/
    resources/
    scala/
    java/
  test/
built.sbt
</code></p>

<p>Source code can be placed in the project’s base directory. But usually people organize them into directory structure.</p>

<p>sbt by default uses the same directory structure as Maven for source files, all under <code>src/</code>.</p>

<p>sbt build definition files include <code>build.sbt</code> in project’s base drectory and other <code>.sbt</code> or <code>.scala</code> files in <code>project/</code> subdirectory.</p>

<p>The <code>project</code> directory <em>is another project embedded</em> which knows how to build the outer project. So it may have its <code>build.sbt</code> and <code>project</code> directory structure, which is recursive. <em>The build definition is an sbt project.</em></p>

<h2 id="running">Running</h2>

<p>Common sbt commands:</p>

<ul>
  <li>clean</li>
  <li>compile</li>
  <li>test</li>
  <li>testOnly &lt;testcase&gt;*</li>
  <li>run &lt;argument&gt;*</li>
  <li>package</li>
  <li>reload</li>
</ul>

<p>sbt can ran in interactive mode or batch mode. In batch mode, specifying a space-seperated list of commands. For commands that take arguments, enclosing the command and arguments in quotes.</p>

<p><code>sh
$ sbt clean compile "testOnly TestA TestB"
</code></p>

<p>Prefixing a command with <code>~</code> will make the command run when any source files change. Press enter to stop watching for changes.</p>

<p><code>
&gt; ~ compile
</code></p>

<h2 id="build-definition">Build definition</h2>

<h3 id="sbt-build-definition-basic">.sbt build definition basic</h3>

<h4 id="project">Project</h4>

<p><code>build.sbt</code> defines one or more <code>Project</code>s, which hold a list of Scala expressions called <code>settings</code>.</p>

<p>Top-level objects and classes are not allowed in <code>build.sbt</code>. Those should go in the <code>project/</code> directory as full Scala source files.</p>

<p>``` scala
lazy val commonSettings = Seq(
  organization := “com.example”,
  version := “0.1.0”,
  scalaVersion := “2.11.4”
)</p>

<p>lazy val root = (project in file(“.”)).
  settings(commonSettings: _*).
  settings(
    name := “hello”
  )
```</p>

<p>On the left, <code>name</code>, <code>version</code> and <code>scalaVersion</code> are <em>keys</em>. Keys have a method called <code>:=</code>, which returns a <code>Setting[T]</code>, where <code>T</code> is the value type.</p>

<h4 id="keys">Keys</h4>

<p>There are three flavors of key: <code>SettingKey[T]</code>, <code>TaskKey[T]</code> and <code>InputKey[T]</code>.</p>

<p>A <code>TaskKey[T]</code> is said to define a <em>task</em>. </p>

<p>A <code>InputKey[T]</code> defines a <em>input task</em>, which parses user input and produce a task to run.</p>

<p>For a setting, the value will be computed once at project load time. For a task, the computation will be re-run each time the task is executed.</p>

<p>Built-in keys are fields in object <code>sbt.Keys</code>, which are implicitly imported so can be directly referred.</p>

<p>Custom keys may be defined with their respective creation methods: <code>settingKey</code>, <code>taskKey</code>, and <code>inputKey</code>. </p>

<p>``` scala
lazy val hello = taskKey<a href="&quot;An example task&quot;">Unit</a></p>

<p>lazy val root = (project in file(“.”)).
  settings(
    hello := { println(“Hello!”) }
  )
```</p>

<h3 id="bare-sbt-build-definition">Bare .sbt build definition</h3>

<p><em>Bare .sbt build definition</em> is an old style which is not recommended to use.</p>

<p>Bare .sbt build definition doesn’t explicitly define a <code>Project</code>, it implicitly deines one based on the location of the <code>.sbt</code> file. The <code>.sbt</code> file consists of a list of <code>Setting[_]</code> expressions.</p>

<p>Before sbt 0.13.7, settings must be separated by blank lines.</p>

<h2 id="library-dependencies">Library dependencies</h2>

<p>To add unmanaged dependencies, simplily drop jar files in <code>lib/</code>.</p>

<p>Managed dependencies are specified by <code>libraryDependencies</code> key in <code>build.sbt</code>.</p>

<p><code>scala
libraryDependencies += groupID % artifactID % revision % configuration
</code></p>

<p>If you use double %% between the groupID and artifactID, sbt will add your project’s Scala version to the artifact name.</p>

<p>Assuming the scalaVersion for your build is 2.11.1, the following adds <code>org.scala-tools:scala-stm_2.11.1:0.3</code>:</p>

<p><code>scala
libraryDependencies += "org.scala-tools" %% "scala-stm" % "0.3"
</code></p>

<p>By default, if omitted, configuration is “compile”. A common used value is “test”.</p>

<p>sbt uses Apache Ivy to implement managed dependencies. Advanced usage of revision and configuration can follow Ivy document.</p>

<p>sbt uses the standard Maven2 repository by default. To add additional repository, add a <code>resolver</code>:</p>

<p>``` scala
resolvers += “Local Maven Repository” at “file://”+Path.userHome.absolutePath+”/.m2/repository”</p>

<p>resolvers += “Sonatype OSS Snapshots” at “https://oss.sonatype.org/content/repositories/snapshots”
```</p>

<h2 id="multiple-projects">Multiple projects</h2>

<p>Multiple projects can be grouped under one project. </p>

<p>``` scala
lazy val root = (project in file(“.”)).
  aggregate(util, core)</p>

<p>lazy val util = project</p>

<p>lazy val core = project
```</p>

<p>Each sub-project has its own directory. In above example the directory name is same as the project’s ID. The following is a more explicit way: </p>

<p><code>scala
lazy val core = project in file("core")
</code></p>

<p>If a project is not defined for the root directory in the build, sbt creates a default one that aggregates all other projects in the build. </p>

<p>A project may depend on other projects:</p>

<p><code>scala
lazy val core = project.dependsOn(util, api)
</code></p>

<p><code>foo dependsOn(bar)</code> means that the <code>compile</code> configuration in foo depends on the <code>compile</code> configuration in bar. You can declare other configuraiton dependency, for example, <code>dependsOn(bar % "test-&gt;test;compile-&gt;compile")</code>.</p>

<h2 id="using-plugins">Using plugins</h2>

<p>Declares the plugin dependency in <code>project/plugins.sbt</code>. The file name can be different, you may create one sbt file for one plugin.</p>

<p><code>scala
addSbtPlugin("com.typesafe.sbt" % "sbt-site" % "0.7.0")
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ivy Introduction for Maven User]]></title>
    <link href="http://aleung.github.io/blog/2014/12/26/ivy-introduction-for-maven-user/"/>
    <updated>2014-12-26T01:11:52+08:00</updated>
    <id>http://aleung.github.io/blog/2014/12/26/ivy-introduction-for-maven-user</id>
    <content type="html"><![CDATA[<p>由于 sbt 使用 Ivy 做依赖管理，必须了解一下 Ivy 的基础知识。这里从熟悉 Maven 的用户的角度简单描述一下 Ivy。</p>

<h2 id="section">共同点</h2>

<p>Maven的功能要比 Ivy 多很多，Maven 既管 build 也管依赖，而Ivy 仅仅是负责依赖管理。但就在依赖管理方面，两者在概念、模型、功能等方面都还是比较相似的。</p>

<p>对于 artifact 的标识，都是使用 groupID, artifactID, version 三元组，不过 Ivy 叫它们为 organization, module name, revision。Ivy 兼容 Maven 2 metadata，可以直接使用 Maven 2 repository。</p>

<h2 id="configuration--scope">Configuration / Scope</h2>

<p>Ivy 有个重要的概念叫 configuration，在 Maven 里类似的对应是 scope，但是 Ivy 的 configuration 比 Maven 的 scope 要灵活得多。</p>

<p>一个模块可以有多个 configuration，每个 configuration 包含一组外部模块依赖的声明（实际的配置是反过来的，每个依赖声明会标识自己在那种 configuration 中生效）。Configuration 可以是跟 Maven scope 类似的 compile, runtime 和 test，也可以任意定义。例如，某个模块既可以支持 Oracle 也可以支持 MySQL，当使用不同数据库时，需要依赖的模块是不同的，就可以分别在 oracle 和 mysql 两个 configuration 中定义各自需要的依赖。</p>

<p>Ivy 的 configuration 在依赖传递管理方面，比 Maven 要强。除了可以定义在一个 configuation 中需要依赖某个模块，还可以定义依赖这个模块时，会使用它的哪个 configuration，只有指定的 configuration 中的依赖才会传递进来。这个机制称为 configuration mapping。</p>

<p>下面的例子中，声明了在 default configuration 中需要依赖 hibernate，并且包含 hibernate 的 proxool 和 oscache 这两种 configuration 中的依赖。</p>

<p><code>xml
&lt;dependency org="hibernate" name="hibernate" rev="2.1.8" conf="default-&gt;proxool,oscache"/&gt;
</code></p>

<p>Configuration 可以扩展（继承）另一个 configuration，可以设置外部可见性。</p>

<h2 id="repository">Repository</h2>

<p>Maven 的 repository 必须是网络服务（local 除外，local repository 本质上相当于 cache），Ivy 除了支持Maven 2 repository，也支持指定文件系统路径作为repository，还有各种各样其他的存储方式。</p>

<p>Maven 当配置了多个 repository 时，是按照配置的顺序一一查找，找到 artifact 为止。Ivy 的 artifact 查找是由 resolver 来负责，一个 resolver 对应一个 repository，有些特殊的 resolver 可以将多个 resolver 组合起来使用，例如 chain resolver 和 dual resolver。缺省的 resolver 就是一个 chain resolve，按照 local, shared, public的顺序去访问这些 repository。Ivy 的组织要比 Maven 更灵活一些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[API metrics demo]]></title>
    <link href="http://aleung.github.io/blog/2014/12/14/api-metrics-demo/"/>
    <updated>2014-12-14T17:21:17+08:00</updated>
    <id>http://aleung.github.io/blog/2014/12/14/api-metrics-demo</id>
    <content type="html"><![CDATA[<p>This demo uses Graphite and Grafana to store and present API metrics. The demo environment is installed on Ubuntu.</p>

<h2 id="graphite">Graphite</h2>

<p>Graphite has two major components. </p>

<p>The first is <code>carbon-cache</code>, which is a daemon process to receive metrics data from client through TCP connection and store into filesystem via <code>whisper</code> database library.</p>

<p>Another one is a webapp. It provides HTTP API for generating graphs and retrieving raw data.</p>

<p>Since Ubuntu 14.04, it’s easy to install graphite with <code>apt-get</code>:</p>

<p><code>sh
sudo apt-get update
sudo apt-get install graphite-web graphite-carbon
</code></p>

<p>Both <code>carbon</code> and <code>graphite-web</code> are installed as python module. </p>

<p>Start carbon:</p>

<p><code>sh
sudo service carbon-cache start
</code></p>

<p>Graphite-web is base on django framework. Read <code>/usr/share/doc/graphite-web/README</code> for how to setup graphite-web. A major steps is to create database and default data:</p>

<p><code>sh
sudo graphite-manage syncdb
sudo chown _graphite:_graphite /var/lib/graphite/graphite.db
</code></p>

<p>For testing Graphite, you can start Graphite with the Django lightweight Web server for development:</p>

<p><code>sh
sudo -u _graphite /usr/bin/django-admin runserver --settings graphite.settings 0.0.0.0:8080
</code></p>

<p>To install on Apache, follow the guide in <code>/usr/share/doc/graphite-web/README</code>. </p>

<p><code>sh
sudo apt-get install libapache2-mod-wsgi
sudo cp /usr/share/graphite-web/apache2-graphite.conf /etc/apache2/sites-available/graphite-web.conf
sudo a2ensite graphite-web
sudo service apache2 restart
</code></p>

<p>Graphite-web 0.9.12 only works under URL root path, it conflict with Apache default site setting. I modify <code>/etc/apache2/sites-enabled/graphite-web.conf</code> to make it work in a virtual host on port 81.</p>

<p><code>apache
Listen 81
&lt;VirtualHost *:81&gt;
 ...
&lt;/VirtualHost&gt;
</code></p>

<p>Reference:</p>

<ul>
  <li>https://www.digitalocean.com/community/tutorials/how-to-install-and-use-graphite-on-an-ubuntu-14-04-server</li>
</ul>

<h2 id="grafana">Grafana</h2>

<p>Download grafana package and extract to a directory. Configure Apache web server to make the grafana directory accessable.</p>

<p>Edit <code>config.js</code> (copy from <code>config.sample.js</code>) to enable graphite as datasource.</p>

<p>Because graphite-web is hosting on virtual host on port 81, which is different than where grafana is hosting, there is cross site script access restriction. Have to enable CORS (cross origin resource sharing) on graphite-web side.</p>

<p>Enable Apache mod_headers:</p>

<p>~~~ sh
sudo a2enmod headers
~~~</p>

<p>Add into <code>/etc/apache2/sites-enabled/graphite-web.conf</code>:</p>

<p>~~~ apache
Header set Access-Control-Allow-Origin “*”
Header set Access-Control-Allow-Methods “GET, OPTIONS”
Header set Access-Control-Allow-Headers “origin, authorization, accept”
~~~</p>

<h2 id="elasticsearch">Elasticsearch</h2>

<p>Elasticsearch is used by Granfan as a database to persistent dashboard configuration. Search and analystics features of Elasticsearch isn’t used in this case. Without Elasticsearch Grafana still works, but unable to save any change to dashboard design. You have to export dashboard JSON and import next time you want to use it.</p>

<p><code>sh
wget https://download.elasticsearch.org/elasticsearch/elasticsearch/elasticsearch-1.4.1.deb
sudo dpkg -i elasticsearch-1.4.1.deb
</code></p>

<p>Elasticsearch is not starting on bootup by default. To setup as service, run:</p>

<p><code>sh
sudo update-rc.d elasticsearch defaults 95 10
</code></p>

<p>To start manually, run:</p>

<p><code>sh
sudo /etc/init.d/elasticsearch start
</code></p>

<p>To enable CORS (cross origin resource sharing), add below into <code>/etc/elasticsearch/elasticsearch.yml</code>:</p>

<p><code>yml
http.cors.enabled: true
</code></p>

<h2 id="demo">Demo</h2>

<p>The scala script <code>feed_graphite.scala</code> generates mock API metrics data for demo. The Grafana portal is defined as <code>api.json</code>. Both files are stored in this <a href="https://gist.github.com/aleung/1ec7e56bfa9448af920b">gist</a>.</p>

<p><img src="/attachments/2014/12/api-metrics-demo.png" alt="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PlantUML 简介]]></title>
    <link href="http://aleung.github.io/blog/2014/08/23/plantuml/"/>
    <updated>2014-08-23T16:57:33+08:00</updated>
    <id>http://aleung.github.io/blog/2014/08/23/plantuml</id>
    <content type="html"><![CDATA[<p>关于PlantUML的简介。</p>

<iframe src="//www.slideshare.net/slideshow/embed_code/38238529" width="597" height="486" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/aleung/plantuml" title="PlantUML" target="_blank">PlantUML</a> </strong> from <strong><a href="http://www.slideshare.net/aleung" target="_blank">aleung</a></strong> </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Text to UML diagram]]></title>
    <link href="http://aleung.github.io/blog/2014/01/20/text-to-uml-diagram/"/>
    <updated>2014-01-20T22:10:00+08:00</updated>
    <id>http://aleung.github.io/blog/2014/01/20/text-to-uml-diagram</id>
    <content type="html"><![CDATA[<p>Usually I used <a href="http://astah.net/">Astah</a> to draw UML diagram to put into design document in MS Word or PowerPoint format. The separation of the source and generated file making management of the UML model file a problem. And also it’s annoying to adjust a large amount of elements by dragging with mouse whenever you add something in the diagram. For a coder, typing on keyboard is faster than drawing with mouse.</p>

<p>Now I switch to <a href="http://plantuml.com/">PlantUML</a>. Just write UML in its <a href="http://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> and PlantUML generates the diagram. It supports most of the frequent used UML diagrams, which I use most are sequence diagram, class diagram and state diagram. Then I paste the generated diagram into slides (design document) and keep the “source” in note. No need to wonder where to find original UML model file when I need to update the diagram.</p>

<p>The core of PlantUML is simply a jar file. It parses the text input and depends on <em>dot</em> tool from <a href="http://www.graphviz.org/">Graphviz</a> for graph generation (except sequence diagram). </p>

<p>There are <a href="http://www.plantuml.com/running.html">a bunch of ways</a> to run PlantUML. I highlight some of them I prefer:</p>

<ul>
  <li>Online editor. Best choice if you’re too lazy to install anything on your computer.</li>
  <li>Desktop (Windows): <a href="https://code.google.com/p/plant-uml-file-watcher/">PlantUML File Watcher</a></li>
  <li>Embedded into Octopress blog platform. The below examples are using it.</li>
  <li>IDE plugin. Easy way to keep UML together with source code.</li>
</ul>

<p>The syntax of PlantUML’s DSL is quite intuitional, you can start to use it by following example.</p>

<p>```
package ConsentObject «Rect» {
  Consent : id
  Scope : key
}</p>

<p>Client - User
(Client, User) . Consent</p>

<p>Consent - “*” Scope</p>

<p>Consent “1” – “1..*” AccessToken
```</p>

<p>The generated diagram:</p>

<p><img src='/images/plantuml/aa654ab10cd77969eaef52fa8b70576f.png'> </p>

<p>A sequence diagram example:</p>

<p>```
title OAuth 2.0 Authorization Code Grant</p>

<p>actor    UserAgent       as UA
participant Application     as APP
participant OAuthServer     as OAuth
participant ResourceServer  as RS</p>

<p>== Application requests authorization from user ==
UA-&gt;APP: 
APP–&gt;UA:redirect to OAuth Server
UA-&gt;OAuth: GET /authorize?response_type=code
ref over UA, OAuth: user authentication\nuser confirms reqest
OAuth–&gt;UA: redirect to App with authorization_code
UA-&gt;APP: authorization_code</p>

<p>== Application retrieve access token ==
APP-&gt;OAuth: POST /token with authorization_code
ref over APP, OAuth: client authentication
APP&lt;–OAuth: access_token</p>

<p>== Application access protected resource ==
APP-&gt;RS: getResource with access_token
RS-&gt;OAuth: validateToken(access_token)
RS–&gt;APP: result
```</p>

<p><img src='/images/plantuml/be23d4813dfec870f068ecda2f4ba44f.png'></p>
]]></content>
  </entry>
  
</feed>

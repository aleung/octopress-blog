<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Anti-GFW | Good good study, day day up]]></title>
  <link href="http://aleung.github.io/blog/tags/anti-gfw/atom.xml" rel="self"/>
  <link href="http://aleung.github.io/blog/"/>
  <updated>2014-03-15T13:59:47+08:00</updated>
  <id>http://aleung.github.io/blog/</id>
  <author>
    <name><![CDATA[Leo Liang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android用户的好消息：用ssh翻墙]]></title>
    <link href="http://aleung.github.io/blog/2011/02/11/Android-ssh-/"/>
    <updated>2011-02-11T20:41:00+08:00</updated>
    <id>http://aleung.github.io/blog/2011/02/11/Android-ssh-</id>
    <content type="html"><![CDATA[<p>之前我写过一系列<a href="http://good-good-study.appspot.com/blog/posts/90001">文章</a>介绍Android系统用ssh翻墙的想法，现在有人把整合的软件做出来了：<a href="http://madeye.me/2011/02/10/ssh-tunnel-on-the-android-application-puff-android-edition/">sshtunnel</a></p>

<p>与TransProxy类似，sshtunnel也是内置了redsocks作为HTTPS/SOCKS redirector，使用iptables重定向网络流，不同的是它还使用了trilead-ssh2代码（作者说来自于ConnectBot）来做SSH client，因此这一个程序就可以完成整个过程，操作简单。根据文档说明和大致浏览代码，貌似没有使用SSH dynamic port forwarding，而是要求SSH server端安装了HTTP代理服务器，SSH连接纯粹是tunnel了到服务端HTTP proxy的连接。</p>

<p>Update: <a href="https://twitter.com/#!/ofmax/status/36717058762739712">作者说</a>，不使用SSH dynamic port forwarding是因为受限于Android手机的机能。我之前测试用ConnectBot做SOCKS proxy的时候就总是遇到CPU占用100%的问题，估计作者说的就是这个。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Andriod TransProxy]]></title>
    <link href="http://aleung.github.io/blog/2010/09/28/Andriod-TransProxy/"/>
    <updated>2010-09-28T06:13:00+08:00</updated>
    <id>http://aleung.github.io/blog/2010/09/28/Andriod-TransProxy</id>
    <content type="html"><![CDATA[<p>关注我之前写的Android翻墙系列文章<a href="/2010/06/02/Consider-how-in-the-Android-mobile-phones-in-use-SSH-tunnel-over-the-wall">1</a>, <a href="/2010/06/07/Android-SSH-tunnel-2010-06-06-">2</a>, <a href="/2010/07/31/Android-SSH-tunnel-prototype">3</a>的朋友请留意一下这个应用：<a href="http://forum.xda-developers.com/showthread.php?t=766569">TransProxy</a>。这个应用的v3版本集成了HTTP transparent proxy (使用<a href="http://transproxy.sourceforge.net/">Transproxy</a>)、HTTPS/SOCKS redirector (使用<a href="http://darkk.net.ru/redsocks/">redsocks</a>) 、iptables script 并提供了配置、控制的界面。理论上，结合TransProxy和ConnectBot就可以实现Android上通过SSH tunnel翻墙，请参考<a href="/2010/06/02/Consider-how-in-the-Android-mobile-phones-in-use-SSH-tunnel-over-the-wall">这里</a>的第二张图片：ConnectBot实现了SSH client，TransProxy提供了transparent socks proxy并且设置iptables。</p>

<p>不过，我刚刚将TransProxy和ConnectBot配合运行起来试了一下，并没有成功，并且手机又遇到了100% CPU占用的问题，只能手工将ConnectBot kill了。ConnectBot当前最新的snapshot版本都还是没有解决这个<a href="http://code.google.com/p/connectbot/issues/detail?id=299">bug</a>，大家快去给这个bug加星，促使开发者优先解决吧。</p>

<p>鉴于我目前暂时处于肉身翻墙状态，没有积极性去进一步实验了，各位动手试试吧，有结果记得共享出来。另外，目前TransProxy的作者还在相当勤快的改进这个应用，不妨到xda-developers论坛与他交流。  </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android手机上使用SSH tunnel：prototype]]></title>
    <link href="http://aleung.github.io/blog/2010/07/31/Android-SSH-tunnel-prototype/"/>
    <updated>2010-07-31T00:17:00+08:00</updated>
    <id>http://aleung.github.io/blog/2010/07/31/Android-SSH-tunnel-prototype</id>
    <content type="html"><![CDATA[<p>在上次写下<a href="/2010/06/07/Android-SSH-tunnel-2010-06-06-">进展</a>之后，就真的没有任何进展了。本来打算完成之后会发布成开源软件的，但现在看来遥遥无期。有人问我iptables命令怎么写，就把简要介绍放这里吧。</p>

<ol>
  <li>首先确认你有Android系统的root权限，下面的操作要以root身份登录到shell进行</li>
  <li>将transocks_ev放到Android系统中，目录随你喜欢。这里<a href="http://cid-e1c6bc07e3f505a3.office.live.com/self.aspx/.Public/transocks%5E_ev-android.zip">下载</a>已编译的transocks_ev for Android可执行文件，解压后文件的MD5：6a0c3500bcd24ab7b706c8caf34f15ba</li>
  <li>从Android Market下载ConnectBot，配置好你的ssh帐号，记得设置port forwarding，端口为9050</li>
  <li>在ConnectBot中连接ssh</li>
  <li>在shell中运行transocks_ev:  </li>
</ol>

<pre><code>transocks_ev -S 127.0.0.1 -s 9050
</code></pre>

<ol>
  <li>在shell中执行iptables命令： </li>
</ol>

<pre><code>iptables -t nat -F 
iptables -t nat -A OUTPUT -m owner --cmd-owner transocks_ev -j RETURN 
iptables -t nat -A OUTPUT -m owner --cmd-owner org.connectbot -j RETURN 
iptables -t nat -A OUTPUT -p tcp --dport 80 -j REDIRECT --to-ports 1211 
iptables -t nat -A OUTPUT -p tcp --dport 443 -j REDIRECT --to-ports 1211
</code></pre>

<ol>
  <li>这时所有的HTTP/HTTPS流量都会通过ssh tunnel了，但DNS查询不会，所以依然无法访问被DNS污染的网站</li>
  <li>断开ConnectBot连接</li>
  <li>在shell中kill掉transocks_ev进程</li>
  <li>在shell中执行iptables命令：</li>
</ol>

<pre><code>iptables -t nat -F
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android手机上使用SSH tunnel的进展 (2010-06-06)]]></title>
    <link href="http://aleung.github.io/blog/2010/06/07/Android-SSH-tunnel-2010-06-06-/"/>
    <updated>2010-06-07T13:22:00+08:00</updated>
    <id>http://aleung.github.io/blog/2010/06/07/Android-SSH-tunnel-2010-06-06-</id>
    <content type="html"><![CDATA[<p>在上一篇博客中，我提出了<a href="http://good-good-study.appspot.com/blog/posts/20001">在Android手机上使用SSH tunnel的想法</a>。几天下来有了一些进展。</p>

<p>首先，非常感谢<a href="http://sunner.cn/">Sunner</a>，他帮忙编译出Android平台的transocks_ev binary，并且解决了一些在Android平台上运行的问题。</p>

<p>在实验中，用ConnectBot + transocks_ev + iptables，HTTP和HTTPS请求都能重定向到SSH tunnel了，测试了浏览器和其他一些应用，无需任何额外设置就可正常访问网络。不过目前没有考虑使用非HTTP/HTTPS的应用。但现在还有两个问题：</p>

<ol>
  <li>DNS查询还是直接出去，不能避免DNS污染</li>
  <li>现在用ConnectBot作为ssh client，并不合适： 
    * 在port forwarding时ConnectBot CPU占用非常高，达到99%，估计是有bug。
    * ConnectBot的连接和断开需要手动控制，密码也要在界面输入，无法做到整个翻墙过程单击执行。</li>
</ol>

<p>对于第一个问题，transocks_ev 不支持UDP，因此无法tunnel DNS查询请求。我在考虑参考<a href="http://code.google.com/p/cmwrap/">CMWrap</a>的方案，做一个DNS proxy，转成TCP请求发出去。  </p>

<p>对于第二个问题，想用一个命令行ssh来代替ConnectBot。目前在Android上常用的是dropbear，但dropbear不支持SOCKS。查了linux上支持SOCKS的ssh client有OpenSSH和lsh（还有没有其他？），但是Sunner尝试了编译OpenSSH和lsh都不成功，因为它俩都太依赖gnu的一些东西了，比如glibc、glib等，而android上所有的对应的库都是从简的。因此暂时还是先用着ConnectBot，并将CPU高的问题反馈给开发者，看看有没有什么回应。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在考虑怎样在Android手机上使用SSH tunnel翻墙]]></title>
    <link href="http://aleung.github.io/blog/2010/06/02/Consider-how-in-the-Android-mobile-phones-in-use-SSH-tunnel-over-the-wall/"/>
    <updated>2010-06-02T14:53:00+08:00</updated>
    <id>http://aleung.github.io/blog/2010/06/02/Consider-how-in-the-Android-mobile-phones-in-use-SSH-tunnel-over-the-wall</id>
    <content type="html"><![CDATA[<p>目前在PC上使用SSH tunnel翻墙是一个相当广泛使用的方案，国外SSH帐号的获取不是太难，购买起来价格也比VPN帐号要便宜。但是在智能手机上目前还不能使用SSH方案，只能用VPN。Android系统是基于Linux的，特别是root了之后，基本上要玩什么都随心所欲了。因此Android上是应该也可以使用SSH tunnel的。</p>

<p>先看看Windows上是怎样设置SSH翻墙的：</p>

<ul>
  <li>首先需要有个支持dynamic port forwarding的SSH client，这个SSH client能开放出SOCKS服务</li>
  <li>如果浏览器(或者其他程序)支持使用SOCKS proxy，设置使用SSH client开放出来的SOCKS端口，就可以使用了</li>
  <li>如果浏览器(或者其他程序)不支持SOCKS proxy，只支持HTTP proxy，就需要再运行一个支持SOCKS的代理程序（例如Privoxy），将HTTP转成SOCKS</li>
</ul>

<p><img src="http://farm5.static.flickr.com/4046/4662779602_743c1c50c2_b.jpg" alt="" /></p>

<p>在Android上就要麻烦一点了，因为需要网络通讯的不仅仅是浏览器，很多Android application都需要访问网络，但是它们并不支持proxy—-连HTTP proxy都不支持，更不用说SOCKS了。它们只会直接连接目标站点，如图中虚线所示，然后撞墙。</p>

<p>但是Linux有iptables，可以设置iptables规则（需要root权限），将HTTP/HTTPS请求forward到一个transparent SOCKS proxy去。transparent SOCKS proxy的作用是将任意TCP连接转成SOCKS连接，这样就可以走SSH tunnel出去了。我分析过几乎所有的Android应用访问网络都是走HTTP/HTTPS协议的，所有仅仅处理HTTP/HTTPS就够了。</p>

<p><img src="http://farm5.static.flickr.com/4023/4662779594_32dd9773cb_b.jpg" alt="" /></p>

<p>Android上支持dynamic port forwarding的SSH client有<a href="http://code.google.com/p/connectbot/">ConnectBot</a>，不过ConnectBot是一个有界面的应用，似乎不能由其他程序来控制，这样就不好做到翻墙软件的傻瓜化了。应该还是弄一个命令行的ssh client更合适。</p>

<p>在网上搜索了一下，开源的transparent SOCKS proxy有几个：<a href="http://oss.tiggerswelt.net/transocks_ev/">transocks_ev</a>，<a href="http://transocks.sourceforge.net/">TranSocks</a> 和 <a href="http://darkk.net.ru/redsocks/">redsocks</a>。从文档上看，似乎transocks_ev比较适合。</p>

<p>但是，我现在面临的困难在于我不熟悉如何交叉编译Android平台程序（C语言），了解了一下如何搭建Android交叉编译环境，似乎挺麻烦（对我而言）。而且要让普通Linux上可运行的sshd和transocks port到Android上，也许还有一些代码要修改。不知道有没有Android系统高手能够帮忙？</p>
]]></content>
  </entry>
  
</feed>
